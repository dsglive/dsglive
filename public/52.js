webpackJsonp([52],{"2gGM":function(e,t,r){e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function t(){return e.default}:function t(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./",r(r.s=0)}({0:function(e,t,r){e.exports=r("lVK7")},OMN4:function(e,t){e.exports=r("mtWM")},lVK7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("OMN4"),a=r.n(n);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function o(e){if(null===e||"object"!==s(e))return e;var t=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(r){t[r]=o(e[r])}),t}function i(e){return Array.isArray(e)?e:[e]}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var m=function(){function e(){f(this,e),this.errors={}}return p(e,[{key:"set",value:function e(t,r){"object"===c(t)?this.errors=t:this.set(u({},this.errors,l({},t,i(r))))}},{key:"all",value:function e(){return this.errors}},{key:"has",value:function e(t){return this.errors.hasOwnProperty(t)}},{key:"hasAny",value:function e(){for(var t=this,r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return n.some(function(e){return t.has(e)})}},{key:"any",value:function e(){return Object.keys(this.errors).length>0}},{key:"get",value:function e(t){if(this.has(t))return this.getAll(t)[0]}},{key:"getAll",value:function e(t){return i(this.errors[t]||[])}},{key:"only",value:function e(){for(var t=this,r=[],n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];return a.forEach(function(e){var n=t.get(e);n&&r.push(n)}),r}},{key:"flatten",value:function e(){return Object.values(this.errors).reduce(function(e,t){return e.concat(t)},[])}},{key:"clear",value:function e(t){var r=this,n={};t&&Object.keys(this.errors).forEach(function(e){e!==t&&(n[e]=r.errors[e])}),this.set(n)}}]),e}();function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _(e,t,r){return t&&g(e.prototype,t),r&&g(e,r),e}var x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};b(this,e),this.busy=!1,this.successful=!1,this.errors=new m,this.originalData=o(t),Object.assign(this,t)}return _(e,[{key:"fill",value:function e(t){var r=this;this.keys().forEach(function(e){r[e]=t[e]})}},{key:"data",value:function e(){var t=this;return this.keys().reduce(function(e,r){return y({},e,h({},r,t[r]))},{})}},{key:"keys",value:function t(){return Object.keys(this).filter(function(t){return!e.ignore.includes(t)})}},{key:"startProcessing",value:function e(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function e(){this.busy=!1,this.successful=!0}},{key:"clear",value:function e(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function t(){var r=this;Object.keys(this).filter(function(t){return!e.ignore.includes(t)}).forEach(function(e){r[e]=o(r.originalData[e])})}},{key:"get",value:function e(t){return this.submit("get",t)}},{key:"post",value:function e(t){return this.submit("post",t)}},{key:"patch",value:function e(t){return this.submit("patch",t)}},{key:"put",value:function e(t){return this.submit("put",t)}},{key:"delete",value:function e(t){return this.submit("delete",t)}},{key:"submit",value:function e(t,r){var n=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var o="get"===t?{params:this.data()}:this.data();return new Promise(function(e,i){a.a.request(y({url:n.route(r),method:t,data:o},s)).then(function(t){n.finishProcessing(),e(t)}).catch(function(e){n.busy=!1,e.response&&n.errors.set(n.extractErrors(e.response)),i(e)})})}},{key:"extractErrors",value:function t(r){return r.data&&"object"===v(r.data)?r.data.errors?y({},r.data.errors):r.data.message?{error:r.data.message}:y({},r.data):{error:e.errorMessage}}},{key:"route",value:function t(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=r;return e.routes.hasOwnProperty(r)&&(a=decodeURI(e.routes[r])),"object"!==v(n)&&(n={id:n}),Object.keys(n).forEach(function(e){a=a.replace("{".concat(e,"}"),n[e])}),a}},{key:"onKeydown",value:function e(t){t.target.name&&this.errors.clear(t.target.name)}}]),e}();x.routes={},x.errorMessage="Something went wrong. Please try again.",x.ignore=["busy","successful","errors","originalData"];var k=x,w,C,O;function S(e,t,r,n,a,s,o,i){var l=typeof(e=e||{}).default;"object"!==l&&"function"!==l||(e=e.default);var u="function"==typeof e?e.options:e,c;if(t&&(u.render=t,u.staticRenderFns=r,u._compiled=!0),n&&(u.functional=!0),s&&(u._scopeId=s),o?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=c):a&&(c=i?function(){a.call(this,this.$root.$options.shadowRoot)}:a),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function e(t,r){return c.call(r),f(t,r)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,c):[c]}return{exports:e,options:u}}var E=!1,P=null,j=null,T=null,M,$=S({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.has(e.field)?r("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:e._s(e.form.errors.get(e.field))}}):e._e()},[],!1,null,null,null).exports,N={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function e(){this.dismissible&&this.form.clear()}}},A,q,B,L=!1,V=null,R=null,U=null,D,I=S({name:"alert-error",extends:N,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[e.form.errors.has("error")?r("div",{domProps:{innerHTML:e._s(e.form.errors.get("error"))}}):r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports,H,F,K,G=!1,Y=null,z=null,Z=null,J,W=S({name:"alert-errors",extends:N,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e.message?r("div",{domProps:{innerHTML:e._s(e.message)}}):e._e(),e._v(" "),r("ul",e._l(e.form.errors.flatten(),function(t){return r("li",{domProps:{innerHTML:e._s(t)}})}))]):e._e()},[],!1,null,null,null).exports,X,Q,ee,te=!1,re=null,ne=null,ae=null,se,oe=S({name:"alert-success",extends:N,props:{message:{type:String,default:""}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.successful?r("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports;r.d(t,"Form",function(){return k}),r.d(t,"Errors",function(){return m}),r.d(t,"HasError",function(){return $}),r.d(t,"AlertError",function(){return I}),r.d(t,"AlertErrors",function(){return W}),r.d(t,"AlertSuccess",function(){return oe}),r.d(t,"default",function(){return k})}})},"2yrZ":function(e,t,r){function n(e){r("pwLK")}var a,s=null,o,i=!1,l,u=null,c=null,f=r("VU/8")(null,r("dgbI"),!1,n,null,null);e.exports=f.exports},"4xOu":function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("modal-layout",{staticClass:"white"},[r("v-card",{attrs:{flat:!0}},[r("v-toolbar",{staticClass:"primary",attrs:{fixed:"",app:""}},[r("v-btn",{attrs:{flat:"",icon:"",color:"white"},nativeOn:{click:function(t){e.redirectBack()}}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-xs-center white--text"},[e._v("Create New Payment")]),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-items",[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,flat:"",color:"white"},nativeOn:{click:function(t){e.submit()}}},[e._v("\n          Save\n          "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:"","my-0":"","py-0":"","mx-3":"","px-3":""}},[r("v-flex",{attrs:{xs12:"",lg5:"","offset-lg1":""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("customer")},attrs:{items:e.customers,"error-messages":e.errorMessages("customer"),"item-text":"name","item-value":"id",required:"",label:"Choose Customer",light:"",chips:"","prepend-icon":"supervised_user_circle","data-vv-name":"customer"},model:{value:e.form.user_id,callback:function(t){e.$set(e.form,"user_id",t)},expression:"form.user_id"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg5:""}},[r("v-dialog",{ref:"date_paid",attrs:{"return-value":e.form.date_paid,persistent:"",lazy:"","full-width":"",width:"290px"},on:{"update:returnValue":function(t){e.$set(e.form,"date_paid",t)}},model:{value:e.date_paid_modal,callback:function(t){e.date_paid_modal=t},expression:"date_paid_modal"}},[r("v-text-field",{staticStyle:{"margin-top":"26px"},attrs:{slot:"activator",label:"Date Paid","prepend-icon":"event_available",readonly:""},slot:"activator",model:{value:e.form.date_paid,callback:function(t){e.$set(e.form,"date_paid",t)},expression:"form.date_paid"}}),e._v(" "),r("v-date-picker",{attrs:{scrollable:""},model:{value:e.form.date_paid,callback:function(t){e.$set(e.form,"date_paid",t)},expression:"form.date_paid"}},[r("v-spacer"),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.date_paid_modal=!1}}},[e._v("Cancel")]),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.$refs.date_paid.save(e.form.date_paid)}}},[e._v("OK")])],1)],1)],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:"","offset-lg1":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0},expression:"{ required: true}"}],class:{"error--text":e.hasErrors("transaction_id")},attrs:{"error-messages":e.errorMessages("transaction_id"),light:"",label:"Transaction No.","prepend-icon":"receipt","data-vv-name":"transaction_id",hint:"Reference No. ie.: Paypal Transaction Number Or Invoice No.","persistent-hint":""},model:{value:e.form.transaction_id,callback:function(t){e.$set(e.form,"transaction_id",t)},expression:"form.transaction_id"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0},expression:"{ required: true}"}],class:{"error--text":e.hasErrors("type")},attrs:{"error-messages":e.errorMessages("type"),light:"",label:"Payment Type","prepend-icon":"credit_card","data-vv-name":"type",hint:"ie.: Check,Cash,Credit Card etc","persistent-hint":""},model:{value:e.form.type,callback:function(t){e.$set(e.form,"type",t)},expression:"form.type"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg4:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0,decimal:2,min_value:0},expression:"{ required: true,decimal:2, min_value:0 }"}],class:{"error--text":e.hasErrors("amount")},attrs:{"error-messages":e.errorMessages("amount"),light:"",label:"Amount Paid","prepend-icon":"attach_money",suffix:"USD","data-vv-name":"amount"},model:{value:e.form.amount,callback:function(t){e.$set(e.form,"amount",t)},expression:"form.amount"}})],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:"","my-0":"","py-0":"","mx-3":"","px-3":""}},[r("v-flex",{attrs:{xs10:"","offset-xs1":""}},[r("v-subheader",[e._v("\n          Notes:\n        ")]),e._v(" "),r("v-textarea",{attrs:{counter:"",maxlength:"255","full-width":"",outline:"",hint:"(Optional)","persistent-hint":""},model:{value:e.form.notes,callback:function(t){e.$set(e.form,"notes",t)},expression:"form.notes"}})],1)],1)],1)],1)},n=[];e.exports={render:r,staticRenderFns:n}},PIqx:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("2yrZ"),a=r.n(n),s=r("gvVL"),o=r("2gGM"),i=r.n(o),l=r("e7x4"),u=r.n(l);t.default={components:{ModalLayout:a.a},mixins:[s.a],data:function e(){return{form:new o.Form({user_id:null,transaction_id:null,date_paid:null,amount:null,type:null,notes:null}),date_paid_modal:!1,customers:[]}},watch:{customers:{handler:function e(t){},deep:!0}},mounted:function e(){this.getInitialData(),this.form.date_paid=moment().format("YYYY-MM-DD")},methods:{getInitialData:function e(){var t=this;axios.get(route("api.payment.getCustomers")).then(function(e){console.log("customers",e.data.data),t.customers=e.data.data})},submit:function e(){var t=this;this.$validator.validateAll().then(function(e){var r;e?t.createPayment():u.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error",html:'<p class="title">Please Fix Form Errors</p>',type:"warning",confirmButtonText:"Back"})})},createPayment:function e(){var t=this;t.form.busy=!0,t.form.post(route("api.payment.create"),t.form).then(function(e){var r;console.log(e.data),t.$validator.reset(),u.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success!",html:'<p class="title">Payment Has Been Created!</p>',type:"success",confirmButtonText:"Ok"}),t.$nextTick(function(){return t.$router.push({name:"payments"})})}).catch(function(e){var t;console.log(e.response.data),u.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error!",html:'<p class="title">Please Complete Form To Submit!</p>',type:"error",confirmButtonText:"Ok"})})},redirectBack:function e(){var t=this;t.$nextTick(function(){return t.$router.push({name:"payments"})})}}}},dgbI:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-app",{attrs:{standalone:""}},[r("v-content",{staticClass:"white"},[r("v-container",{staticClass:"pa-0 ma-0",attrs:{transition:"slide-x-transition",fluid:""}},[r("v-card",{attrs:{flat:!0}},[e._t("toolbar"),e._v(" "),e._t("default")],2)],1),e._v(" "),e._t("footer")],2)],1)},n=[];e.exports={render:r,staticRenderFns:n}},gvVL:function(e,t,r){"use strict";t.a={methods:{errorMessages:function e(t){return this.errors.collect(t).concat(this.form.errors.only(t))},hasErrors:function e(t){var r;return this.errors.collect(t).concat(this.form.errors.only(t)).length>0}}}},"n3+d":function(e,t,r){var n,a,s,o=!1,i=null,l=null,u=null,c=r("VU/8")(r("PIqx"),r("4xOu"),!1,null,null,null);e.exports=c.exports},pwLK:function(e,t,r){var n=r("zr7H");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);var a=r("rjj0")("57bf4ea8",n,!0,{})},rjj0:function(e,t,r){var n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a=r("tTVk"),s={},o=n&&(document.head||document.getElementsByTagName("head")[0]),i=null,l=0,u=!1,c=function(){},f=null,d="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e){for(var t=0;t<e.length;t++){var r=e[t],n=s[r.id];if(n){n.refs++;for(var a=0;a<n.parts.length;a++)n.parts[a](r.parts[a]);for(;a<r.parts.length;a++)n.parts.push(h(r.parts[a]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length)}else{for(var o=[],a=0;a<r.parts.length;a++)o.push(h(r.parts[a]));s[r.id]={id:r.id,refs:1,parts:o}}}}function v(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function h(e){var t,r,n=document.querySelector("style["+d+'~="'+e.id+'"]');if(n){if(u)return c;n.parentNode.removeChild(n)}if(p){var a=l++;n=i||(i=v()),t=g.bind(null,n,a,!1),r=g.bind(null,n,a,!0)}else n=v(),t=_.bind(null,n),r=function(){n.parentNode.removeChild(n)};return t(e),function n(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else r()}}e.exports=function(e,t,r,n){u=r,f=n||{};var o=a(e,t);return m(o),function t(r){for(var n=[],i=0;i<o.length;i++){var l=o[i],u;(u=s[l.id]).refs--,n.push(u)}r?m(o=a(e,r)):o=[];for(var i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete s[u.id]}}}};var y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")}),b;function g(e,t,r,n){var a=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=y(t,a);else{var s=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}function _(e,t){var r=t.css,n=t.media,a=t.sourceMap;if(n&&e.setAttribute("media",n),f.ssrId&&e.setAttribute(d,t.id),a&&(r+="\n/*# sourceURL="+a.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},tTVk:function(e,t){e.exports=function e(t,r){for(var n=[],a={},s=0;s<r.length;s++){var o=r[s],i=o[0],l,u,c,f={id:t+":"+s,css:o[1],media:o[2],sourceMap:o[3]};a[i]?a[i].parts.push(f):n.push(a[i]={id:i,parts:[f]})}return n}},zr7H:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".v-messages__message{color:#e57373}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,