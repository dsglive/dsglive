webpackJsonp([58],{"2gGM":function(e,t,r){e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function t(){return e.default}:function t(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./",r(r.s=0)}({0:function(e,t,r){e.exports=r("lVK7")},OMN4:function(e,t){e.exports=r("mtWM")},lVK7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("OMN4"),s=r.n(n);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function a(e){if(null===e||"object"!==o(e))return e;var t=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(r){t[r]=a(e[r])}),t}function i(e){return Array.isArray(e)?e:[e]}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var v=function(){function e(){f(this,e),this.errors={}}return m(e,[{key:"set",value:function e(t,r){"object"===c(t)?this.errors=t:this.set(u({},this.errors,l({},t,i(r))))}},{key:"all",value:function e(){return this.errors}},{key:"has",value:function e(t){return this.errors.hasOwnProperty(t)}},{key:"hasAny",value:function e(){for(var t=this,r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];return n.some(function(e){return t.has(e)})}},{key:"any",value:function e(){return Object.keys(this.errors).length>0}},{key:"get",value:function e(t){if(this.has(t))return this.getAll(t)[0]}},{key:"getAll",value:function e(t){return i(this.errors[t]||[])}},{key:"only",value:function e(){for(var t=this,r=[],n=arguments.length,s=new Array(n),o=0;o<n;o++)s[o]=arguments[o];return s.forEach(function(e){var n=t.get(e);n&&r.push(n)}),r}},{key:"flatten",value:function e(){return Object.values(this.errors).reduce(function(e,t){return e.concat(t)},[])}},{key:"clear",value:function e(t){var r=this,n={};t&&Object.keys(this.errors).forEach(function(e){e!==t&&(n[e]=r.errors[e])}),this.set(n)}}]),e}();function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _(e,t,r){return t&&g(e.prototype,t),r&&g(e,r),e}var x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};b(this,e),this.busy=!1,this.successful=!1,this.errors=new v,this.originalData=a(t),Object.assign(this,t)}return _(e,[{key:"fill",value:function e(t){var r=this;this.keys().forEach(function(e){r[e]=t[e]})}},{key:"data",value:function e(){var t=this;return this.keys().reduce(function(e,r){return y({},e,h({},r,t[r]))},{})}},{key:"keys",value:function t(){return Object.keys(this).filter(function(t){return!e.ignore.includes(t)})}},{key:"startProcessing",value:function e(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function e(){this.busy=!1,this.successful=!0}},{key:"clear",value:function e(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function t(){var r=this;Object.keys(this).filter(function(t){return!e.ignore.includes(t)}).forEach(function(e){r[e]=a(r.originalData[e])})}},{key:"get",value:function e(t){return this.submit("get",t)}},{key:"post",value:function e(t){return this.submit("post",t)}},{key:"patch",value:function e(t){return this.submit("patch",t)}},{key:"put",value:function e(t){return this.submit("put",t)}},{key:"delete",value:function e(t){return this.submit("delete",t)}},{key:"submit",value:function e(t,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var a="get"===t?{params:this.data()}:this.data();return new Promise(function(e,i){s.a.request(y({url:n.route(r),method:t,data:a},o)).then(function(t){n.finishProcessing(),e(t)}).catch(function(e){n.busy=!1,e.response&&n.errors.set(n.extractErrors(e.response)),i(e)})})}},{key:"extractErrors",value:function t(r){return r.data&&"object"===p(r.data)?r.data.errors?y({},r.data.errors):r.data.message?{error:r.data.message}:y({},r.data):{error:e.errorMessage}}},{key:"route",value:function t(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=r;return e.routes.hasOwnProperty(r)&&(s=decodeURI(e.routes[r])),"object"!==p(n)&&(n={id:n}),Object.keys(n).forEach(function(e){s=s.replace("{".concat(e,"}"),n[e])}),s}},{key:"onKeydown",value:function e(t){t.target.name&&this.errors.clear(t.target.name)}}]),e}();x.routes={},x.errorMessage="Something went wrong. Please try again.",x.ignore=["busy","successful","errors","originalData"];var k=x,w,C,S;function E(e,t,r,n,s,o,a,i){var l=typeof(e=e||{}).default;"object"!==l&&"function"!==l||(e=e.default);var u="function"==typeof e?e.options:e,c;if(t&&(u.render=t,u.staticRenderFns=r,u._compiled=!0),n&&(u.functional=!0),o&&(u._scopeId=o),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},u._ssrRegister=c):s&&(c=i?function(){s.call(this,this.$root.$options.shadowRoot)}:s),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function e(t,r){return c.call(r),f(t,r)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,c):[c]}return{exports:e,options:u}}var O=!1,j=null,$=null,P=null,M,T=E({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.has(e.field)?r("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:e._s(e.form.errors.get(e.field))}}):e._e()},[],!1,null,null,null).exports,A={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function e(){this.dismissible&&this.form.clear()}}},N,B,L,H=!1,z=null,R=null,U=null,V,F=E({name:"alert-error",extends:A,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[e.form.errors.has("error")?r("div",{domProps:{innerHTML:e._s(e.form.errors.get("error"))}}):r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports,q,I,D,G=!1,K=null,X=null,Z=null,J,W=E({name:"alert-errors",extends:A,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e.message?r("div",{domProps:{innerHTML:e._s(e.message)}}):e._e(),e._v(" "),r("ul",e._l(e.form.errors.flatten(),function(t){return r("li",{domProps:{innerHTML:e._s(t)}})}))]):e._e()},[],!1,null,null,null).exports,Q,Y,ee,te=!1,re=null,ne=null,se=null,oe,ae=E({name:"alert-success",extends:A,props:{message:{type:String,default:""}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.successful?r("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports;r.d(t,"Form",function(){return k}),r.d(t,"Errors",function(){return v}),r.d(t,"HasError",function(){return T}),r.d(t,"AlertError",function(){return F}),r.d(t,"AlertErrors",function(){return W}),r.d(t,"AlertSuccess",function(){return ae}),r.d(t,"default",function(){return k})}})},"2yrZ":function(e,t,r){function n(e){r("pwLK")}var s,o=null,a,i=!1,l,u=null,c=null,f=r("VU/8")(null,r("dgbI"),!1,n,null,null);e.exports=f.exports},SiGz:function(e,t,r){var n,s,o,a=!1,i=null,l=null,u=null,c=r("VU/8")(r("v3SX"),r("lxH8"),!1,null,null,null);e.exports=c.exports},dgbI:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-app",{attrs:{standalone:""}},[r("v-content",{staticClass:"white"},[r("v-container",{staticClass:"pa-0 ma-0",attrs:{transition:"slide-x-transition",fluid:""}},[r("v-card",{attrs:{flat:!0}},[e._t("toolbar"),e._v(" "),e._t("default")],2)],1),e._v(" "),e._t("footer")],2)],1)},n=[];e.exports={render:r,staticRenderFns:n}},gvVL:function(e,t,r){"use strict";t.a={methods:{errorMessages:function e(t){return this.errors.collect(t).concat(this.form.errors.only(t))},hasErrors:function e(t){var r;return this.errors.collect(t).concat(this.form.errors.only(t)).length>0}}}},lxH8:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("modal-layout",{staticClass:"white"},[r("v-card",{attrs:{flat:!0}},[r("v-toolbar",{staticClass:"primary"},[r("v-btn",{attrs:{flat:"",icon:"",color:"white"},nativeOn:{click:function(t){e.redirectBack()}}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-xs-center white--text"},[e._v("Client Creation Page")]),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-items",[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,flat:"",color:"white"},nativeOn:{click:function(t){e.submit()}}},[e._v("\n          Save\n          "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0},expression:"{ required: true }"}],class:{"error--text":e.hasErrors("name")},attrs:{"error-messages":e.errorMessages("name"),label:"Client Name","prepend-icon":"fa-user","data-vv-name":"name"},model:{value:e.form.name,callback:function(t){e.$set(e.form,"name",t)},expression:"form.name"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{email:!0},expression:"{ email: true }"}],class:{"error--text":e.hasErrors("email")},attrs:{"error-messages":e.errorMessages("email"),label:"Email","prepend-icon":"mail","data-vv-name":"email"},model:{value:e.form.email,callback:function(t){e.$set(e.form,"email",t)},expression:"form.email"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Phone","prepend-icon":"phone"},model:{value:e.form.phone,callback:function(t){e.$set(e.form,"phone",t)},expression:"form.phone"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Address 1","prepend-icon":"looks_one"},model:{value:e.form.address_1,callback:function(t){e.$set(e.form,"address_1",t)},expression:"form.address_1"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Address 2","prepend-icon":"looks_two"},model:{value:e.form.address_2,callback:function(t){e.$set(e.form,"address_2",t)},expression:"form.address_2"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"City","prepend-icon":"location_city"},model:{value:e.form.city,callback:function(t){e.$set(e.form,"city",t)},expression:"form.city"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"State","prepend-icon":"map"},model:{value:e.form.state,callback:function(t){e.$set(e.form,"state",t)},expression:"form.state"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{regex:/^\d{5}(?:[-\s]\d{4})?$/},expression:"{ regex: /^\\d{5}(?:[-\\s]\\d{4})?$/ }"}],class:{"error--text":e.hasErrors("zip")},attrs:{"error-messages":e.errorMessages("zip"),label:"Zip","prepend-icon":"markunread_mailbox","data-vv-name":"zip"},model:{value:e.form.zip,callback:function(t){e.$set(e.form,"zip",t)},expression:"form.zip"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-textarea",{attrs:{color:"teal"},model:{value:e.form.notes,callback:function(t){e.$set(e.form,"notes",t)},expression:"form.notes"}},[r("div",{attrs:{slot:"label"},slot:"label"},[e._v("\n            Notes "),r("small",[e._v("(optional)")])])])],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,block:"",color:"accent"},on:{click:function(t){e.submit()}}},[e._v("\n          Save "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1)],1)],1)},n=[];e.exports={render:r,staticRenderFns:n}},pwLK:function(e,t,r){var n=r("zr7H");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);var s=r("rjj0")("57bf4ea8",n,!0,{})},rjj0:function(e,t,r){var n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s=r("tTVk"),o={},a=n&&(document.head||document.getElementsByTagName("head")[0]),i=null,l=0,u=!1,c=function(){},f=null,d="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e){for(var t=0;t<e.length;t++){var r=e[t],n=o[r.id];if(n){n.refs++;for(var s=0;s<n.parts.length;s++)n.parts[s](r.parts[s]);for(;s<r.parts.length;s++)n.parts.push(h(r.parts[s]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length)}else{for(var a=[],s=0;s<r.parts.length;s++)a.push(h(r.parts[s]));o[r.id]={id:r.id,refs:1,parts:a}}}}function p(){var e=document.createElement("style");return e.type="text/css",a.appendChild(e),e}function h(e){var t,r,n=document.querySelector("style["+d+'~="'+e.id+'"]');if(n){if(u)return c;n.parentNode.removeChild(n)}if(m){var s=l++;n=i||(i=p()),t=g.bind(null,n,s,!1),r=g.bind(null,n,s,!0)}else n=p(),t=_.bind(null,n),r=function(){n.parentNode.removeChild(n)};return t(e),function n(s){if(s){if(s.css===e.css&&s.media===e.media&&s.sourceMap===e.sourceMap)return;t(e=s)}else r()}}e.exports=function(e,t,r,n){u=r,f=n||{};var a=s(e,t);return v(a),function t(r){for(var n=[],i=0;i<a.length;i++){var l=a[i],u;(u=o[l.id]).refs--,n.push(u)}r?v(a=s(e,r)):a=[];for(var i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete o[u.id]}}}};var y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")}),b;function g(e,t,r,n){var s=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=y(t,s);else{var o=document.createTextNode(s),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function _(e,t){var r=t.css,n=t.media,s=t.sourceMap;if(n&&e.setAttribute("media",n),f.ssrId&&e.setAttribute(d,t.id),s&&(r+="\n/*# sourceURL="+s.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},tTVk:function(e,t){e.exports=function e(t,r){for(var n=[],s={},o=0;o<r.length;o++){var a=r[o],i=a[0],l,u,c,f={id:t+":"+o,css:a[1],media:a[2],sourceMap:a[3]};s[i]?s[i].parts.push(f):n.push(s[i]={id:i,parts:[f]})}return n}},v3SX:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("2yrZ"),s=r.n(n),o=r("gvVL"),a=r("2gGM"),i=r.n(a),l=r("e7x4"),u=r.n(l);t.default={components:{ModalLayout:s.a},mixins:[o.a],data:function e(){return{form:new a.Form({name:null,active:!1,email:null,phone:null,address_1:null,address_2:null,city:null,state:null,zip:null,country:null,notes:null})}},methods:{getStatus:function e(t){return t?"Status: Active":"Status: Inactive"},submit:function e(){var t=this;this.$validator.validateAll().then(function(e){var r;e?t.createClient():u.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error",html:'<p class="title">Please Fix Form Errors</p>',type:"warning",confirmButtonText:"Back"})})},createClient:function e(){var t=this;t.form.busy=!0,t.form.post(route("api.client.create")).then(function(e){var r;console.log(e.data),t.$validator.reset(),u.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success!",html:'<p class="title">Client Has Been Created!</p>',type:"success",confirmButtonText:"Ok"}),t.$nextTick(function(){return t.$router.push({name:"clients"})})}).catch(function(e){})},resetForm:function e(){var t=this;this.form=new a.Form({active:!1,name:null,email:null,phone:null,address_1:null,address_2:null,city:null,state:null,zip:null,country:null,notes:null})},redirectBack:function e(){var t=this;t.$nextTick(function(){return t.$router.push({name:"clients"})})}}}},zr7H:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".v-messages__message{color:#e57373}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZvcm0vZGlzdC92Zm9ybS5jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0NyZWF0ZUNsaWVudC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZT8wODg0Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbWl4aW5zL3ZhbGlkYXRpb24tZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVDbGllbnQudnVlP2Q4NGQiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZT9iY2JmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVDbGllbnQudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWU/MTk2YiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIwIiwiT01ONCIsImxWSzciLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwidmFsdWUiLCJleHRlcm5hbF9fYXhpb3NfIiwiZXh0ZXJuYWxfX2F4aW9zX19kZWZhdWx0IiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJkZWVwQ29weSIsImNvcHkiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImFycmF5V3JhcCIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJFcnJvcnNfX3R5cGVvZiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkVycm9yc19FcnJvcnMiLCJFcnJvcnMiLCJlcnJvcnMiLCJzZXQiLCJmaWVsZCIsIm1lc3NhZ2VzIiwiYWxsIiwiaGFzIiwiaGFzQW55IiwiX3RoaXMiLCJfbGVuIiwiZmllbGRzIiwiX2tleSIsInNvbWUiLCJhbnkiLCJnZXRBbGwiLCJvbmx5IiwiX3RoaXMyIiwiX2xlbjIiLCJfa2V5MiIsIm1lc3NhZ2UiLCJwdXNoIiwiZmxhdHRlbiIsInZhbHVlcyIsInJlZHVjZSIsImEiLCJiIiwiY29uY2F0IiwiY2xlYXIiLCJfdGhpczMiLCJGb3JtX190eXBlb2YiLCJGb3JtX19kZWZpbmVQcm9wZXJ0eSIsIkZvcm1fX2V4dGVuZHMiLCJGb3JtX19jbGFzc0NhbGxDaGVjayIsIkZvcm1fX2RlZmluZVByb3BlcnRpZXMiLCJGb3JtX19jcmVhdGVDbGFzcyIsIkZvcm1fRm9ybSIsIkZvcm0iLCJkYXRhIiwidW5kZWZpbmVkIiwiYnVzeSIsInN1Y2Nlc3NmdWwiLCJvcmlnaW5hbERhdGEiLCJmaWxsIiwiZmlsdGVyIiwiaWdub3JlIiwiaW5jbHVkZXMiLCJzdGFydFByb2Nlc3NpbmciLCJmaW5pc2hQcm9jZXNzaW5nIiwicmVzZXQiLCJ1cmwiLCJzdWJtaXQiLCJwb3N0IiwicGF0Y2giLCJwdXQiLCJfZGVsZXRlIiwibWV0aG9kIiwiX3RoaXM0IiwiY29uZmlnIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0Iiwicm91dGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImVycm9yIiwiZXh0cmFjdEVycm9ycyIsImVycm9yTWVzc2FnZSIsInBhcmFtZXRlcnMiLCJyb3V0ZXMiLCJkZWNvZGVVUkkiLCJpZCIsInJlcGxhY2UiLCJvbktleWRvd24iLCJldmVudCIsInNyY19Gb3JtIiwiSGFzRXJyb3IiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwidHlwZSIsImRlZmF1bHQiLCJvcHRpb25zIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwicmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fIiwiX192dWVfc3R5bGVzX18iLCJfX3Z1ZV9zY29wZUlkX18iLCJfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fIiwiQ29tcG9uZW50IiwiY29tcG9uZW50c19IYXNFcnJvciIsImZvcm0iLCJyZXF1aXJlZCIsIlN0cmluZyIsIl92bSIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJkb21Qcm9wcyIsImlubmVySFRNTCIsIl9zIiwiX2UiLCJBbGVydCIsImRpc21pc3NpYmxlIiwiQm9vbGVhbiIsIm1ldGhvZHMiLCJkaXNtaXNzIiwiQWxlcnRFcnJvciIsIkFsZXJ0RXJyb3JfcmVuZGVyIiwiQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyIsIkFsZXJ0RXJyb3JfX192dWVfc3R5bGVzX18iLCJBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyIsIkFsZXJ0RXJyb3JfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydEVycm9yIiwiZXh0ZW5kcyIsImF0dHJzIiwicm9sZSIsImFyaWEtbGFiZWwiLCJvbiIsImNsaWNrIiwiYXJpYS1oaWRkZW4iLCJfdiIsIl90IiwiQWxlcnRFcnJvcnMiLCJBbGVydEVycm9yc19yZW5kZXIiLCJBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydEVycm9yc19fX3Z1ZV9zdHlsZXNfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydEVycm9yc19Db21wb25lbnQiLCJjb21wb25lbnRzX0FsZXJ0RXJyb3JzIiwiX2wiLCJBbGVydFN1Y2Nlc3MiLCJBbGVydFN1Y2Nlc3NfcmVuZGVyIiwiQWxlcnRTdWNjZXNzX3N0YXRpY1JlbmRlckZucyIsIkFsZXJ0U3VjY2Vzc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc2NvcGVJZF9fIiwiQWxlcnRTdWNjZXNzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydFN1Y2Nlc3NfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydFN1Y2Nlc3MiLCJpbmplY3RTdHlsZSIsIl9fdnVlX3NjcmlwdF9fIiwiX192dWVfdGVtcGxhdGVfXyIsInN0YW5kYWxvbmUiLCJ0cmFuc2l0aW9uIiwiZmx1aWQiLCJmbGF0IiwiZXJyb3JNZXNzYWdlcyIsImNvbGxlY3QiLCJoYXNFcnJvcnMiLCJpY29uIiwiY29sb3IiLCJuYXRpdmVPbiIsIiRldmVudCIsInJlZGlyZWN0QmFjayIsImxvYWRpbmciLCJkaXNhYmxlZCIsInJpZ2h0Iiwicm93Iiwid3JhcCIsInhzMTIiLCJtZDgiLCJvZmZzZXQtbWQyIiwiZGlyZWN0aXZlcyIsInJhd05hbWUiLCJleHByZXNzaW9uIiwiY2xhc3MiLCJlcnJvci0tdGV4dCIsImVycm9yLW1lc3NhZ2VzIiwibGFiZWwiLCJwcmVwZW5kLWljb24iLCJkYXRhLXZ2LW5hbWUiLCJtb2RlbCIsImNhbGxiYWNrIiwiJCR2IiwiJHNldCIsImVtYWlsIiwicmVnZXgiLCJzbG90IiwiYmxvY2siLCJjb250ZW50IiwibG9jYWxzIiwidXBkYXRlIiwiaGFzRG9jdW1lbnQiLCJkb2N1bWVudCIsIkRFQlVHIiwiRXJyb3IiLCJsaXN0VG9TdHlsZXMiLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwibm9vcCIsInNzcklkS2V5IiwiaXNPbGRJRSIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsImFwcGx5VG9UYWciLCJ1cGRhdGVTdHlsZSIsIm5ld09iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFyZW50SWQiLCJsaXN0IiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImpvaW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJzZXRBdHRyaWJ1dGUiLCJzc3JJZCIsInNvdXJjZXMiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsIm5ld1N0eWxlcyIsInBhcnQiLCJjb21wb25lbnRzIiwiTW9kYWxMYXlvdXQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfTGF5b3V0c19Nb2RhbExheW91dF92dWVfX19kZWZhdWx0IiwibWl4aW5zIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX01peGluc192YWxpZGF0aW9uX2Vycm9yX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfdmZvcm1fXyIsImFjdGl2ZSIsInBob25lIiwiYWRkcmVzc18xIiwiYWRkcmVzc18yIiwiY2l0eSIsInN0YXRlIiwiemlwIiwiY291bnRyeSIsIm5vdGVzIiwiZ2V0U3RhdHVzIiwic3RhdHVzIiwic2VsZiIsIiR2YWxpZGF0b3IiLCJ2YWxpZGF0ZUFsbCIsInJlc3VsdCIsInZhbGlkYXRpb25Nb2RhbCIsImNyZWF0ZUNsaWVudCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19zd2VldGFsZXJ0Ml9fX2RlZmF1bHQiLCJtaXhpbiIsImNvbmZpcm1CdXR0b25DbGFzcyIsImJ1dHRvbnNTdHlsaW5nIiwidGl0bGUiLCJodG1sIiwiY29uZmlybUJ1dHRvblRleHQiLCJzdWNjZXNzTW9kYWwiLCJjb25zb2xlIiwibG9nIiwiJG5leHRUaWNrIiwiJHJvdXRlciIsInJlc2V0Rm9ybSJdLCJtYXBwaW5ncyI6IjBDQUFBQSxFQUFBQyxRQUNBLFNBQUFDLEdBRUEsSUFBQUMsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUosUUFHQSxJQUFBRCxFQUFBRyxFQUFBRSxJQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBQ0FOLFlBVUEsT0FOQUMsRUFBQUcsR0FBQUcsS0FBQVIsRUFBQUMsUUFBQUQsSUFBQUMsUUFBQUcsR0FHQUosRUFBQU8sR0FBQSxFQUdBUCxFQUFBQyxRQXFDQSxPQWhDQUcsRUFBQUssRUFBQVAsRUFHQUUsRUFBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQSxTQUFBVixFQUFBVyxFQUFBQyxHQUNBVCxFQUFBVSxFQUFBYixFQUFBVyxJQUNBRyxPQUFBQyxlQUFBZixFQUFBVyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVQsRUFBQWdCLEVBQUEsU0FBQXBCLEdBQ0EsSUFBQWEsRUFBQWIsS0FBQXFCLFdBQ0EsU0FBQUMsSUFBbUMsT0FBQXRCLEVBQUEsU0FDbkMsU0FBQXVCLElBQXlDLE9BQUF2QixHQUV6QyxPQURBSSxFQUFBTyxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFULEVBQUFVLEVBQUEsU0FBQVUsRUFBQUMsR0FBOEQsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJQUc5RHJCLEVBQUF3QixFQUFBLEtBR0F4QixJQUFBeUIsRUFBQSxHQTlEQSxFQW1FQUMsRUFDQSxTQUFBOUIsRUFBQUMsRUFBQUcsR0FFQUosRUFBQUMsUUFBQUcsRUFBQSxTQUtBMkIsS0FDQSxTQUFBL0IsRUFBQUMsR0FFQUQsRUFBQUMsUUFBQUcsRUFBQSxTQUlBNEIsS0FDQSxTQUFBaEMsRUFBQWlDLEVBQUE3QixHQUVBLGFBQ0FXLE9BQUFDLGVBQUFpQixFQUFBLGNBQTBEQyxPQUFBLElBRzFELElBQUFDLEVBQUEvQixFQUFBLFFBQ0FnQyxFQUFBaEMsRUFBQWdCLEVBQUFlLEdBR0EsU0FBQUUsRUFBQUMsR0FBd1UsT0FBdE9ELEVBQTNFLG1CQUFBRSxRQUFBLGlCQUFBQSxPQUFBQyxTQUEyRSxTQUFBSCxFQUFBQyxHQUFrQyxjQUFBQSxHQUErQixTQUFBRCxFQUFBQyxHQUFrQyxPQUFBQSxHQUFBLG1CQUFBQyxRQUFBRCxFQUFBRyxjQUFBRixRQUFBRCxJQUFBQyxPQUFBYixVQUFBLGdCQUFBWSxJQUFtSUEsR0FReFUsU0FBQUksRUFBQUosR0FDQSxVQUFBQSxHQUFBLFdBQUFELEVBQUFDLEdBQ0EsT0FBQUEsRUFHQSxJQUFBSyxFQUFBQyxNQUFBQyxRQUFBUCxTQUlBLE9BSEF2QixPQUFBK0IsS0FBQVIsR0FBQVMsUUFBQSxTQUFBQyxHQUNBTCxFQUFBSyxHQUFBTixFQUFBSixFQUFBVSxNQUVBTCxFQVNBLFNBQUFNLEVBQUFmLEdBQ0EsT0FBQVUsTUFBQUMsUUFBQVgsU0FHQSxTQUFBZ0IsRUFBQVosRUFBQVUsRUFBQWQsR0FBbU0sT0FBeEpjLEtBQUFWLEVBQWtCdkIsT0FBQUMsZUFBQXNCLEVBQUFVLEdBQWtDZCxRQUFBaEIsWUFBQSxFQUFBRCxjQUFBLEVBQUFrQyxVQUFBLElBQWdGYixFQUFBVSxHQUFBZCxFQUFvQkksRUFFbk0sU0FBQWMsSUFBbVIsT0FBOVBBLEVBQUFyQyxPQUFBc0MsUUFBQSxTQUFBQyxHQUFnRCxRQUFBaEQsRUFBQSxFQUFnQkEsRUFBQWlELFVBQUFDLE9BQXNCbEQsSUFBQSxDQUFPLElBQUFtRCxFQUFBRixVQUFBakQsR0FBMkIsUUFBQTBDLEtBQUFTLEVBQTBCMUMsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFpRCxFQUFBVCxLQUF5RE0sRUFBQU4sR0FBQVMsRUFBQVQsSUFBaUMsT0FBQU0sSUFBa0JJLE1BQUFDLEtBQUFKLFdBRW5SLFNBQUFLLEVBQUF0QixHQUE2VixPQUFwUHNCLEVBQTNFLG1CQUFBckIsUUFBQSxpQkFBQUEsT0FBQUMsU0FBMkUsU0FBQUgsRUFBQUMsR0FBeUMsY0FBQUEsR0FBK0IsU0FBQUQsRUFBQUMsR0FBeUMsT0FBQUEsR0FBQSxtQkFBQUMsUUFBQUQsRUFBQUcsY0FBQUYsUUFBQUQsSUFBQUMsT0FBQWIsVUFBQSxnQkFBQVksSUFBbUlBLEdBRTdWLFNBQUF1QixFQUFBQyxFQUFBQyxHQUFpRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQUUzRixTQUFBQyxFQUFBWCxFQUFBWSxHQUEyQyxRQUFBNUQsRUFBQSxFQUFnQkEsRUFBQTRELEVBQUFWLE9BQWtCbEQsSUFBQSxDQUFPLElBQUE2RCxFQUFBRCxFQUFBNUQsR0FBMkI2RCxFQUFBakQsV0FBQWlELEVBQUFqRCxhQUFBLEVBQXdEaUQsRUFBQWxELGNBQUEsRUFBZ0MsVUFBQWtELE1BQUFoQixVQUFBLEdBQXVEcEMsT0FBQUMsZUFBQXNDLEVBQUFhLEVBQUFuQixJQUFBbUIsSUFFOVAsU0FBQUMsRUFBQUwsRUFBQU0sRUFBQUMsR0FBaU0sT0FBcElELEdBQUFKLEVBQUFGLEVBQUFyQyxVQUFBMkMsR0FBc0VDLEdBQUFMLEVBQUFGLEVBQUFPLEdBQThEUCxFQUlqTSxJQUFBUSxFQUVBLFdBSUEsU0FBQUMsSUFDQVgsRUFBQUYsS0FBQWEsR0FFQWIsS0FBQWMsVUFvS0EsT0ExSkFMLEVBQUFJLElBQ0F4QixJQUFBLE1BQ0FkLE1BQUEsU0FBQXdDLEVBQUFDLEVBQUFDLEdBQ0EsV0FBQWhCLEVBQUFlLEdBQ0FoQixLQUFBYyxPQUFBRSxFQUVBaEIsS0FBQWUsSUFBQXRCLEtBQTRCTyxLQUFBYyxPQUFBdkIsS0FBaUN5QixFQUFBMUIsRUFBQTJCLFNBVTdENUIsSUFBQSxNQUNBZCxNQUFBLFNBQUEyQyxJQUNBLE9BQUFsQixLQUFBYyxVQVVBekIsSUFBQSxNQUNBZCxNQUFBLFNBQUE0QyxFQUFBSCxHQUNBLE9BQUFoQixLQUFBYyxPQUFBOUMsZUFBQWdELE1BVUEzQixJQUFBLFNBQ0FkLE1BQUEsU0FBQTZDLElBR0EsSUFGQSxJQUFBQyxFQUFBckIsS0FFQXNCLEVBQUExQixVQUFBQyxPQUFBMEIsRUFBQSxJQUFBdEMsTUFBQXFDLEdBQUFFLEVBQUEsRUFBMkVBLEVBQUFGLEVBQWFFLElBQ3hGRCxFQUFBQyxHQUFBNUIsVUFBQTRCLEdBR0EsT0FBQUQsRUFBQUUsS0FBQSxTQUFBVCxHQUNBLE9BQUFLLEVBQUFGLElBQUFILFFBVUEzQixJQUFBLE1BQ0FkLE1BQUEsU0FBQW1ELElBQ0EsT0FBQXRFLE9BQUErQixLQUFBYSxLQUFBYyxRQUFBakIsT0FBQSxLQVVBUixJQUFBLE1BQ0FkLE1BQUEsU0FBQWYsRUFBQXdELEdBQ0EsR0FBQWhCLEtBQUFtQixJQUFBSCxHQUNBLE9BQUFoQixLQUFBMkIsT0FBQVgsR0FBQSxNQVdBM0IsSUFBQSxTQUNBZCxNQUFBLFNBQUFvRCxFQUFBWCxHQUNBLE9BQUExQixFQUFBVSxLQUFBYyxPQUFBRSxXQVVBM0IsSUFBQSxPQUNBZCxNQUFBLFNBQUFxRCxJQUtBLElBSkEsSUFBQUMsRUFBQTdCLEtBRUFpQixLQUVBYSxFQUFBbEMsVUFBQUMsT0FBQTBCLEVBQUEsSUFBQXRDLE1BQUE2QyxHQUFBQyxFQUFBLEVBQThFQSxFQUFBRCxFQUFlQyxJQUM3RlIsRUFBQVEsR0FBQW5DLFVBQUFtQyxHQVVBLE9BUEFSLEVBQUFuQyxRQUFBLFNBQUE0QixHQUNBLElBQUFnQixFQUFBSCxFQUFBckUsSUFBQXdELEdBRUFnQixHQUNBZixFQUFBZ0IsS0FBQUQsS0FHQWYsS0FTQTVCLElBQUEsVUFDQWQsTUFBQSxTQUFBMkQsSUFDQSxPQUFBOUUsT0FBQStFLE9BQUFuQyxLQUFBYyxRQUFBc0IsT0FBQSxTQUFBQyxFQUFBQyxHQUNBLE9BQUFELEVBQUFFLE9BQUFELFdBVUFqRCxJQUFBLFFBQ0FkLE1BQUEsU0FBQWlFLEVBQUF4QixHQUNBLElBQUF5QixFQUFBekMsS0FFQWMsS0FFQUUsR0FDQTVELE9BQUErQixLQUFBYSxLQUFBYyxRQUFBMUIsUUFBQSxTQUFBQyxHQUNBQSxJQUFBMkIsSUFDQUYsRUFBQXpCLEdBQUFvRCxFQUFBM0IsT0FBQXpCLE1BS0FXLEtBQUFlLElBQUFELE9BSUFELEVBM0tBLEdBZ0xBLFNBQUE2QixFQUFBL0QsR0FBdVYsT0FBaFArRCxFQUEzRSxtQkFBQTlELFFBQUEsaUJBQUFBLE9BQUFDLFNBQTJFLFNBQUFILEVBQUFDLEdBQXVDLGNBQUFBLEdBQStCLFNBQUFELEVBQUFDLEdBQXVDLE9BQUFBLEdBQUEsbUJBQUFDLFFBQUFELEVBQUFHLGNBQUFGLFFBQUFELElBQUFDLE9BQUFiLFVBQUEsZ0JBQUFZLElBQW1JQSxHQUV2VixTQUFBZ0UsRUFBQWhFLEVBQUFVLEVBQUFkLEdBQXdNLE9BQXhKYyxLQUFBVixFQUFrQnZCLE9BQUFDLGVBQUFzQixFQUFBVSxHQUFrQ2QsUUFBQWhCLFlBQUEsRUFBQUQsY0FBQSxFQUFBa0MsVUFBQSxJQUFnRmIsRUFBQVUsR0FBQWQsRUFBb0JJLEVBRXhNLFNBQUFpRSxJQUE2UixPQUFuUUEsRUFBQXhGLE9BQUFzQyxRQUFBLFNBQUFDLEdBQXFELFFBQUFoRCxFQUFBLEVBQWdCQSxFQUFBaUQsVUFBQUMsT0FBc0JsRCxJQUFBLENBQU8sSUFBQW1ELEVBQUFGLFVBQUFqRCxHQUEyQixRQUFBMEMsS0FBQVMsRUFBMEIxQyxPQUFBVyxVQUFBQyxlQUFBbkIsS0FBQWlELEVBQUFULEtBQXlETSxFQUFBTixHQUFBUyxFQUFBVCxJQUFpQyxPQUFBTSxJQUFrQkksTUFBQUMsS0FBQUosV0FFN1IsU0FBQWlELEVBQUExQyxFQUFBQyxHQUFzRCxLQUFBRCxhQUFBQyxHQUEwQyxVQUFBQyxVQUFBLHFDQUVoRyxTQUFBeUMsRUFBQW5ELEVBQUFZLEdBQWdELFFBQUE1RCxFQUFBLEVBQWdCQSxFQUFBNEQsRUFBQVYsT0FBa0JsRCxJQUFBLENBQU8sSUFBQTZELEVBQUFELEVBQUE1RCxHQUEyQjZELEVBQUFqRCxXQUFBaUQsRUFBQWpELGFBQUEsRUFBd0RpRCxFQUFBbEQsY0FBQSxFQUFnQyxVQUFBa0QsTUFBQWhCLFVBQUEsR0FBdURwQyxPQUFBQyxlQUFBc0MsRUFBQWEsRUFBQW5CLElBQUFtQixJQUVuUSxTQUFBdUMsRUFBQTNDLEVBQUFNLEVBQUFDLEdBQWdOLE9BQTlJRCxHQUFBb0MsRUFBQTFDLEVBQUFyQyxVQUFBMkMsR0FBMkVDLEdBQUFtQyxFQUFBMUMsRUFBQU8sR0FBbUVQLEVBTWhOLElBQUE0QyxFQUVBLFdBTUEsU0FBQUMsSUFDQSxJQUFBQyxFQUFBdEQsVUFBQUMsT0FBQSxRQUFBc0QsSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxNQUVBaUQsRUFBQTdDLEtBQUFpRCxHQUVBakQsS0FBQW9ELE1BQUEsRUFDQXBELEtBQUFxRCxZQUFBLEVBQ0FyRCxLQUFBYyxPQUFBLElBQUFGLEVBQ0FaLEtBQUFzRCxhQUFBdkUsRUFBQW1FLEdBQ0E5RixPQUFBc0MsT0FBQU0sS0FBQWtELEdBdVFBLE9BOVBBSCxFQUFBRSxJQUNBNUQsSUFBQSxPQUNBZCxNQUFBLFNBQUFnRixFQUFBTCxHQUNBLElBQUE3QixFQUFBckIsS0FFQUEsS0FBQWIsT0FBQUMsUUFBQSxTQUFBQyxHQUNBZ0MsRUFBQWhDLEdBQUE2RCxFQUFBN0QsUUFVQUEsSUFBQSxPQUNBZCxNQUFBLFNBQUEyRSxJQUNBLElBQUFyQixFQUFBN0IsS0FFQSxPQUFBQSxLQUFBYixPQUFBaUQsT0FBQSxTQUFBYyxFQUFBN0QsR0FDQSxPQUFBdUQsS0FBK0JNLEVBQUFQLEtBQStCdEQsRUFBQXdDLEVBQUF4QyxhQVU5REEsSUFBQSxPQUNBZCxNQUFBLFNBQUFZLElBQ0EsT0FBQS9CLE9BQUErQixLQUFBYSxNQUFBd0QsT0FBQSxTQUFBbkUsR0FDQSxPQUFBNEQsRUFBQVEsT0FBQUMsU0FBQXJFLFFBUUFBLElBQUEsa0JBQ0FkLE1BQUEsU0FBQW9GLElBQ0EzRCxLQUFBYyxPQUFBMEIsUUFDQXhDLEtBQUFvRCxNQUFBLEVBQ0FwRCxLQUFBcUQsWUFBQSxLQU9BaEUsSUFBQSxtQkFDQWQsTUFBQSxTQUFBcUYsSUFDQTVELEtBQUFvRCxNQUFBLEVBQ0FwRCxLQUFBcUQsWUFBQSxLQU9BaEUsSUFBQSxRQUNBZCxNQUFBLFNBQUFpRSxJQUNBeEMsS0FBQWMsT0FBQTBCLFFBQ0F4QyxLQUFBcUQsWUFBQSxLQU9BaEUsSUFBQSxRQUNBZCxNQUFBLFNBQUFzRixJQUNBLElBQUFwQixFQUFBekMsS0FFQTVDLE9BQUErQixLQUFBYSxNQUFBd0QsT0FBQSxTQUFBbkUsR0FDQSxPQUFBNEQsRUFBQVEsT0FBQUMsU0FBQXJFLEtBQ09ELFFBQUEsU0FBQUMsR0FDUG9ELEVBQUFwRCxHQUFBTixFQUFBMEQsRUFBQWEsYUFBQWpFLFNBV0FBLElBQUEsTUFDQWQsTUFBQSxTQUFBZixFQUFBc0csR0FDQSxPQUFBOUQsS0FBQStELE9BQUEsTUFBQUQsTUFVQXpFLElBQUEsT0FDQWQsTUFBQSxTQUFBeUYsRUFBQUYsR0FDQSxPQUFBOUQsS0FBQStELE9BQUEsT0FBQUQsTUFVQXpFLElBQUEsUUFDQWQsTUFBQSxTQUFBMEYsRUFBQUgsR0FDQSxPQUFBOUQsS0FBQStELE9BQUEsUUFBQUQsTUFVQXpFLElBQUEsTUFDQWQsTUFBQSxTQUFBMkYsRUFBQUosR0FDQSxPQUFBOUQsS0FBQStELE9BQUEsTUFBQUQsTUFVQXpFLElBQUEsU0FDQWQsTUFBQSxTQUFBNEYsRUFBQUwsR0FDQSxPQUFBOUQsS0FBQStELE9BQUEsU0FBQUQsTUFZQXpFLElBQUEsU0FDQWQsTUFBQSxTQUFBd0YsRUFBQUssRUFBQU4sR0FDQSxJQUFBTyxFQUFBckUsS0FFQXNFLEVBQUExRSxVQUFBQyxPQUFBLFFBQUFzRCxJQUFBdkQsVUFBQSxHQUFBQSxVQUFBLE1BQ0FJLEtBQUEyRCxrQkFDQSxJQUFBVCxFQUFBLFFBQUFrQixHQUNBRyxPQUFBdkUsS0FBQWtELFFBQ09sRCxLQUFBa0QsT0FDUCxXQUFBc0IsUUFBQSxTQUFBQyxFQUFBQyxHQUNBakcsRUFBQTRELEVBQUFzQyxRQUFBL0IsR0FDQWtCLElBQUFPLEVBQUFPLE1BQUFkLEdBQ0FNLFNBQ0FsQixRQUNTb0IsSUFBQU8sS0FBQSxTQUFBQyxHQUNUVCxFQUFBVCxtQkFFQWEsRUFBQUssS0FDU0MsTUFBQSxTQUFBQyxHQUNUWCxFQUFBakIsTUFBQSxFQUVBNEIsRUFBQUYsVUFDQVQsRUFBQXZELE9BQUFDLElBQUFzRCxFQUFBWSxjQUFBRCxFQUFBRixXQUdBSixFQUFBTSxVQVlBM0YsSUFBQSxnQkFDQWQsTUFBQSxTQUFBMEcsRUFBQUgsR0FDQSxPQUFBQSxFQUFBNUIsTUFBQSxXQUFBUixFQUFBb0MsRUFBQTVCLE1BTUE0QixFQUFBNUIsS0FBQXBDLE9BQ0E4QixLQUErQmtDLEVBQUE1QixLQUFBcEMsUUFHL0JnRSxFQUFBNUIsS0FBQWxCLFNBRUFnRCxNQUFBRixFQUFBNUIsS0FBQWxCLFNBSUFZLEtBQTZCa0MsRUFBQTVCLE9BZDdCOEIsTUFBQS9CLEVBQUFpQyxpQkF5QkE3RixJQUFBLFFBQ0FkLE1BQUEsU0FBQXFHLEVBQUEzSCxHQUNBLElBQUFrSSxFQUFBdkYsVUFBQUMsT0FBQSxRQUFBc0QsSUFBQXZELFVBQUEsR0FBQUEsVUFBQSxNQUNBa0UsRUFBQTdHLEVBZUEsT0FiQWdHLEVBQUFtQyxPQUFBcEgsZUFBQWYsS0FDQTZHLEVBQUF1QixVQUFBcEMsRUFBQW1DLE9BQUFuSSxLQUdBLFdBQUF5RixFQUFBeUMsS0FDQUEsR0FDQUcsR0FBQUgsSUFJQS9ILE9BQUErQixLQUFBZ0csR0FBQS9GLFFBQUEsU0FBQUMsR0FDQXlFLElBQUF5QixRQUFBLElBQTRCaEQsT0FBQWxELEVBQUEsS0FBZ0I4RixFQUFBOUYsTUFFNUN5RSxLQVNBekUsSUFBQSxZQUNBZCxNQUFBLFNBQUFpSCxFQUFBQyxHQUNBQSxFQUFBOUYsT0FBQTFDLE1BQ0ErQyxLQUFBYyxPQUFBMEIsTUFBQWlELEVBQUE5RixPQUFBMUMsVUFLQWdHLEVBdFJBLEdBeVJBRCxFQUFBb0MsVUFDQXBDLEVBQUFrQyxhQUFBLDBDQUNBbEMsRUFBQVMsUUFBQSw2Q0FDQSxJQUFBaUMsRUFBQSxFQU1BQyxFQWNBQyxFQUNBQyxFQVNBLFNBQUFDLEVBQ0FDLEVBQ0FILEVBQ0FDLEVBQ0FHLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBS0EsSUFBQUMsU0FIQU4sU0FHQU8sUUFDQSxXQUFBRCxHQUFBLGFBQUFBLElBQ0FOLElBQUFPLFNBSUEsSUFBQUMsRUFBQSxtQkFBQVIsRUFDQUEsRUFBQVEsUUFDQVIsRUFtQkFTLEVBOEJBLEdBOUNBWixJQUNBVyxFQUFBWCxTQUNBVyxFQUFBVixrQkFDQVUsRUFBQUUsV0FBQSxHQUlBVCxJQUNBTyxFQUFBRyxZQUFBLEdBSUFSLElBQ0FLLEVBQUFJLFNBQUFULEdBSUFDLEdBQ0FLLEVBQUEsU0FBQUksSUFFQUEsRUFDQUEsR0FDQTVHLEtBQUE2RyxRQUFBN0csS0FBQTZHLE9BQUFDLFlBQ0E5RyxLQUFBK0csUUFBQS9HLEtBQUErRyxPQUFBRixRQUFBN0csS0FBQStHLE9BQUFGLE9BQUFDLGFBRUEsb0JBQUFFLHNCQUNBSixFQUFBSSxxQkFHQWYsR0FDQUEsRUFBQXBKLEtBQUFtRCxLQUFBNEcsR0FHQUEsS0FBQUssdUJBQ0FMLEVBQUFLLHNCQUFBQyxJQUFBZixJQUtBSSxFQUFBWSxhQUFBWCxHQUNHUCxJQUNITyxFQUFBSixFQUNBLFdBQXFCSCxFQUFBcEosS0FBQW1ELFVBQUFvSCxNQUFBQyxTQUFBQyxhQUNyQnJCLEdBR0FPLEVBQ0EsR0FBQUQsRUFBQUcsV0FBQSxDQUdBSCxFQUFBZ0IsY0FBQWYsRUFFQSxJQUFBZ0IsRUFBQWpCLEVBQUFYLE9BQ0FXLEVBQUFYLE9BQUEsU0FBQTZCLEVBQUFDLEVBQUFkLEdBRUEsT0FEQUosRUFBQTNKLEtBQUErSixHQUNBWSxFQUFBRSxFQUFBZCxRQUVLLENBRUwsSUFBQWUsRUFBQXBCLEVBQUFxQixhQUNBckIsRUFBQXFCLGFBQUFELEtBQ0FwRixPQUFBb0YsRUFBQW5CLElBQ0FBLEdBSUEsT0FDQWxLLFFBQUF5SixFQUNBUSxXQVdBLElBQUFzQixHQUFBLEVBRUFDLEVBQUEsS0FFQUMsRUFBQSxLQUVBQyxFQUFBLEtBRUFDLEVBVUFDLEVBVkFwQyxHQXRJQTdJLEtBQUEsWUFDQXNELE9BQ0E0SCxNQUNBOUIsS0FBQWpKLE9BQ0FnTCxVQUFBLEdBRUFwSCxPQUNBcUYsS0FBQWdDLE9BQ0FELFVBQUEsS0FLQSxXQUEwQixJQUFBRSxFQUFBdEksS0FBYXVJLEVBQUFELEVBQUFFLGVBQTBCQyxFQUFBSCxFQUFBSSxNQUFBRCxJQUFBRixFQUF3QixPQUFBRCxFQUFBSCxLQUFBckgsT0FBQUssSUFBQW1ILEVBQUF0SCxPQUFBeUgsRUFBQSxPQUFrREUsWUFBQSw4QkFBQUMsVUFBb0RDLFVBQUFQLEVBQUFRLEdBQUFSLEVBQUFILEtBQUFySCxPQUFBdEQsSUFBQThLLEVBQUF0SCxXQUFvRHNILEVBQUFTLFVBaUhuUCxFQUVBLEtBRUEsS0FFQSxNQVlBLFFBR0FDLEdBQ0F6SSxPQUNBNEgsTUFDQTlCLEtBQUFqSixPQUNBZ0wsVUFBQSxHQUVBYSxhQUNBNUMsS0FBQTZDLFFBQ0E1QyxTQUFBLElBR0E2QyxTQUNBQyxRQUFBLFNBQUFBLElBQ0FwSixLQUFBaUosYUFDQWpKLEtBQUFtSSxLQUFBM0YsV0FvQkE2RyxFQVdBQyxFQUNBQyxFQVNBQyxHQUFBLEVBRUFDLEVBQUEsS0FFQUMsRUFBQSxLQUVBQyxFQUFBLEtBRUFDLEVBVUFDLEVBVkEvRCxHQTVCQTdJLEtBQUEsY0FDQTZNLFFBQUFkLEVBQ0F6SSxPQUNBeUIsU0FDQXFFLEtBQUFnQyxPQUNBL0IsUUFBQSwrQ0FLQSxXQUFxQyxJQUFBZ0MsRUFBQXRJLEtBQWF1SSxFQUFBRCxFQUFBRSxlQUEwQkMsRUFBQUgsRUFBQUksTUFBQUQsSUFBQUYsRUFBd0IsT0FBQUQsRUFBQUgsS0FBQXJILE9BQUFZLE1BQUErRyxFQUFBLE9BQXlDRSxZQUFBLHVDQUFBb0IsT0FBMERDLEtBQUEsV0FBZ0IxQixFQUFBLFlBQUFHLEVBQUEsVUFBaUNFLFlBQUEsUUFBQW9CLE9BQTJCMUQsS0FBQSxTQUFBNEQsYUFBQSxTQUFxQ0MsSUFBS0MsTUFBQTdCLEVBQUFjLFdBQXFCWCxFQUFBLFFBQWFzQixPQUFPSyxjQUFBLFVBQXNCOUIsRUFBQStCLEdBQUEsU0FBQS9CLEVBQUFTLEtBQUFULEVBQUErQixHQUFBLEtBQUEvQixFQUFBZ0MsR0FBQSxXQUFBaEMsRUFBQUgsS0FBQXJILE9BQUFLLElBQUEsU0FBQXNILEVBQUEsT0FBa0dHLFVBQVVDLFVBQUFQLEVBQUFRLEdBQUFSLEVBQUFILEtBQUFySCxPQUFBdEQsSUFBQSxhQUFrRGlMLEVBQUEsT0FBWUcsVUFBVUMsVUFBQVAsRUFBQVEsR0FBQVIsRUFBQXRHLGVBQWlDLEdBQUFzRyxFQUFBUyxVQVVqbEIsRUFFQSxLQUVBLEtBRUEsTUFZQSxRQWtCQXdCLEVBV0FDLEVBQ0FDLEVBU0FDLEdBQUEsRUFFQUMsRUFBQSxLQUVBQyxFQUFBLEtBRUFDLEVBQUEsS0FFQUMsRUFVQUMsRUFWQWpGLEdBNUJBN0ksS0FBQSxlQUNBNk0sUUFBQWQsRUFDQXpJLE9BQ0F5QixTQUNBcUUsS0FBQWdDLE9BQ0EvQixRQUFBLCtDQUtBLFdBQXNDLElBQUFnQyxFQUFBdEksS0FBYXVJLEVBQUFELEVBQUFFLGVBQTBCQyxFQUFBSCxFQUFBSSxNQUFBRCxJQUFBRixFQUF3QixPQUFBRCxFQUFBSCxLQUFBckgsT0FBQVksTUFBQStHLEVBQUEsT0FBeUNFLFlBQUEsdUNBQUFvQixPQUEwREMsS0FBQSxXQUFnQjFCLEVBQUEsWUFBQUcsRUFBQSxVQUFpQ0UsWUFBQSxRQUFBb0IsT0FBMkIxRCxLQUFBLFNBQUE0RCxhQUFBLFNBQXFDQyxJQUFLQyxNQUFBN0IsRUFBQWMsV0FBcUJYLEVBQUEsUUFBYXNCLE9BQU9LLGNBQUEsVUFBc0I5QixFQUFBK0IsR0FBQSxTQUFBL0IsRUFBQVMsS0FBQVQsRUFBQStCLEdBQUEsS0FBQS9CLEVBQUEsUUFBQUcsRUFBQSxPQUErREcsVUFBVUMsVUFBQVAsRUFBQVEsR0FBQVIsRUFBQXRHLFlBQWlDc0csRUFBQVMsS0FBQVQsRUFBQStCLEdBQUEsS0FBQTVCLEVBQUEsS0FBQUgsRUFBQTBDLEdBQUExQyxFQUFBSCxLQUFBckgsT0FBQW9CLFVBQUEsU0FBQThDLEdBQWtGLE9BQUF5RCxFQUFBLE1BQWdCRyxVQUFVQyxVQUFBUCxFQUFBUSxHQUFBOUQsV0FBNkJzRCxFQUFBUyxVQVVobkIsRUFFQSxLQUVBLEtBRUEsTUFZQSxRQWdCQWtDLEVBV0FDLEVBQ0FDLEdBU0FDLElBQUEsRUFFQUMsR0FBQSxLQUVBQyxHQUFBLEtBRUFDLEdBQUEsS0FFQUMsR0FVQUMsR0FWQTNGLEdBNUJBN0ksS0FBQSxnQkFDQTZNLFFBQUFkLEVBQ0F6SSxPQUNBeUIsU0FDQXFFLEtBQUFnQyxPQUNBL0IsUUFBQSxNQUtBLFdBQXVDLElBQUFnQyxFQUFBdEksS0FBYXVJLEVBQUFELEVBQUFFLGVBQTBCQyxFQUFBSCxFQUFBSSxNQUFBRCxJQUFBRixFQUF3QixPQUFBRCxFQUFBSCxLQUFBLFdBQUFNLEVBQUEsT0FBdUNFLFlBQUEsd0NBQUFvQixPQUEyREMsS0FBQSxXQUFnQjFCLEVBQUEsWUFBQUcsRUFBQSxVQUFpQ0UsWUFBQSxRQUFBb0IsT0FBMkIxRCxLQUFBLFNBQUE0RCxhQUFBLFNBQXFDQyxJQUFLQyxNQUFBN0IsRUFBQWMsV0FBcUJYLEVBQUEsUUFBYXNCLE9BQU9LLGNBQUEsVUFBc0I5QixFQUFBK0IsR0FBQSxTQUFBL0IsRUFBQVMsS0FBQVQsRUFBQStCLEdBQUEsS0FBQS9CLEVBQUFnQyxHQUFBLFdBQUE3QixFQUFBLE9BQW1FRyxVQUFVQyxVQUFBUCxFQUFBUSxHQUFBUixFQUFBdEcsZUFBaUMsR0FBQXNHLEVBQUFTLFVBVTNlLEVBRUEsS0FFQSxLQUVBLE1BWUEsUUFHQXRNLEVBQUFPLEVBQUFzQixFQUFBLGtCQUE4RixPQUFBb0gsSUFDOUZqSixFQUFBTyxFQUFBc0IsRUFBQSxvQkFBZ0csT0FBQXNDLElBQ2hHbkUsRUFBQU8sRUFBQXNCLEVBQUEsc0JBQWtHLE9BQUE0SixJQUNsR3pMLEVBQUFPLEVBQUFzQixFQUFBLHdCQUFvRyxPQUFBdUwsSUFDcEdwTixFQUFBTyxFQUFBc0IsRUFBQSx5QkFBcUcsT0FBQXlNLElBQ3JHdE8sRUFBQU8sRUFBQXNCLEVBQUEsMEJBQXNHLE9BQUFtTixLQUN0R2hQLEVBQUFPLEVBQUFzQixFQUFBLHFCQUFpRyxPQUFBb0gsK0JDdDhCakcsU0FBQWdHLEVBQUE1RSxHQUNBckssRUFBQSxRQUVBLElBQUFxSixFQUVBNkYsRUFBQSxLQUVBQyxFQUVBL0QsR0FBQSxFQUVBQyxFQUVBQyxFQUFBLEtBRUFDLEVBQUEsS0FDQUMsRUFiQXhMLEVBQUEsT0FhQXFKLENBWEEsS0FFQXJKLEVBQUEsU0FFQSxFQUVBaVAsRUFFQSxLQUVBLE1BVUFyUCxFQUFBQyxRQUFBMkwsRUFBQTNMLDhCQ3pCQSxJQUFBd0osRUFFQTZGLEVBRUFDLEVBRUEvRCxHQUFBLEVBRUFDLEVBQUEsS0FFQUMsRUFBQSxLQUVBQyxFQUFBLEtBQ0FDLEVBYkF4TCxFQUFBLE9BYUFxSixDQVhBckosRUFBQSxRQUVBQSxFQUFBLFNBRUEsRUFFQSxLQUVBLEtBRUEsTUFVQUosRUFBQUMsUUFBQTJMLEVBQUEzTCw0QkN0QkEsSUFBQXNKLEVBQUEsV0FBMEIsSUFBQTBDLEVBQUF0SSxLQUFhdUksRUFBQUQsRUFBQUUsZUFBMEJDLEVBQUFILEVBQUFJLE1BQUFELElBQUFGLEVBQXdCLE9BQUFFLEVBQUEsU0FBbUJzQixPQUFPOEIsV0FBQSxNQUFpQnBELEVBQUEsYUFBa0JFLFlBQUEsVUFBb0JGLEVBQUEsZUFBb0JFLFlBQUEsWUFBQW9CLE9BQStCK0IsV0FBQSxxQkFBQUMsTUFBQSxNQUE4Q3RELEVBQUEsVUFBZXNCLE9BQU9pQyxNQUFBLEtBQWExRCxFQUFBZ0MsR0FBQSxXQUFBaEMsRUFBQStCLEdBQUEsS0FBQS9CLEVBQUFnQyxHQUFBLG1CQUFBaEMsRUFBQStCLEdBQUEsS0FBQS9CLEVBQUFnQyxHQUFBLG1CQUM5U3pFLEtBQ0F4SixFQUFBQyxTQUFrQnNKLFNBQUFDLHNEQ0ZsQnZILEVBQUEsR0FFRTZLLFNBR0U4QyxjQUhPLFNBQUFBLEVBR09qTCxHQUNaLE9BQU9oQixLQUFLYyxPQUFPb0wsUUFBUWxMLEdBQU91QixPQUFPdkMsS0FBS21JLEtBQUtySCxPQUFPYyxLQUFLWixLQUVqRW1MLFVBTk8sU0FBQUEsRUFNR25MLEdBQ1IsSUFBSUYsRUFHSixPQUhhZCxLQUFLYyxPQUNmb0wsUUFBUWxMLEdBQ1J1QixPQUFPdkMsS0FBS21JLEtBQUtySCxPQUFPYyxLQUFLWixJQUNyQm5CLE9BQVMseUJDWjFCLElBQUErRixFQUFBLFdBQTBCLElBQUEwQyxFQUFBdEksS0FBYXVJLEVBQUFELEVBQUFFLGVBQTBCQyxFQUFBSCxFQUFBSSxNQUFBRCxJQUFBRixFQUF3QixPQUFBRSxFQUFBLGdCQUEwQkUsWUFBQSxVQUFvQkYsRUFBQSxVQUFlc0IsT0FBT2lDLE1BQUEsS0FBYXZELEVBQUEsYUFBa0JFLFlBQUEsWUFBc0JGLEVBQUEsU0FBY3NCLE9BQU9pQyxLQUFBLEdBQUFJLEtBQUEsR0FBQUMsTUFBQSxTQUFvQ0MsVUFBV25DLE1BQUEsU0FBQW9DLEdBQXlCakUsRUFBQWtFLG1CQUFxQi9ELEVBQUEsVUFBQUgsRUFBQStCLEdBQUEsb0JBQUEvQixFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxZQUFBSCxFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxtQkFBdUdFLFlBQUEsK0JBQXlDTCxFQUFBK0IsR0FBQSwwQkFBQS9CLEVBQUErQixHQUFBLEtBQUE1QixFQUFBLFlBQUFILEVBQUErQixHQUFBLEtBQUE1QixFQUFBLG1CQUFBQSxFQUFBLFNBQTRHc0IsT0FBTzBDLFFBQUFuRSxFQUFBSCxLQUFBL0UsS0FBQXNKLFNBQUFwRSxFQUFBeEgsT0FBQVksT0FBQTRHLEVBQUFILEtBQUEvRSxLQUFBNEksS0FBQSxHQUFBSyxNQUFBLFNBQStGQyxVQUFXbkMsTUFBQSxTQUFBb0MsR0FBeUJqRSxFQUFBdkUsYUFBZXVFLEVBQUErQixHQUFBLGdDQUFBNUIsRUFBQSxVQUFzRHNCLE9BQU80QyxNQUFBLE1BQVlyRSxFQUFBK0IsR0FBQSxzQkFBQS9CLEVBQUErQixHQUFBLEtBQUE1QixFQUFBLFlBQTBEc0IsT0FBTzZDLElBQUEsR0FBQUMsS0FBQSxNQUFvQnBFLEVBQUEsVUFBZXNCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsZ0JBQXFCd0UsYUFBYWhRLEtBQUEsV0FBQWlRLFFBQUEsYUFBQTNPLE9BQTZDNkosVUFBQSxHQUFpQitFLFdBQUEsdUJBQWtDQyxPQUFTQyxjQUFBL0UsRUFBQTZELFVBQUEsU0FBdUNwQyxPQUFRdUQsaUJBQUFoRixFQUFBMkQsY0FBQSxRQUFBc0IsTUFBQSxjQUFBQyxlQUFBLFVBQUFDLGVBQUEsUUFBZ0hDLE9BQVFuUCxNQUFBK0osRUFBQUgsS0FBQSxLQUFBd0YsU0FBQSxTQUFBQyxHQUErQ3RGLEVBQUF1RixLQUFBdkYsRUFBQUgsS0FBQSxPQUFBeUYsSUFBZ0NULFdBQUEsZ0JBQXlCLEdBQUE3RSxFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxVQUErQnNCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsZ0JBQXFCd0UsYUFBYWhRLEtBQUEsV0FBQWlRLFFBQUEsYUFBQTNPLE9BQTZDdVAsT0FBQSxHQUFjWCxXQUFBLG9CQUErQkMsT0FBU0MsY0FBQS9FLEVBQUE2RCxVQUFBLFVBQXdDcEMsT0FBUXVELGlCQUFBaEYsRUFBQTJELGNBQUEsU0FBQXNCLE1BQUEsUUFBQUMsZUFBQSxPQUFBQyxlQUFBLFNBQXlHQyxPQUFRblAsTUFBQStKLEVBQUFILEtBQUEsTUFBQXdGLFNBQUEsU0FBQUMsR0FBZ0R0RixFQUFBdUYsS0FBQXZGLEVBQUFILEtBQUEsUUFBQXlGLElBQWlDVCxXQUFBLGlCQUEwQixHQUFBN0UsRUFBQStCLEdBQUEsS0FBQTVCLEVBQUEsVUFBK0JzQixPQUFPK0MsS0FBQSxHQUFBQyxJQUFBLEdBQUFDLGFBQUEsTUFBb0N2RSxFQUFBLGdCQUFxQnNCLE9BQU93RCxNQUFBLFFBQUFDLGVBQUEsU0FBdUNFLE9BQVFuUCxNQUFBK0osRUFBQUgsS0FBQSxNQUFBd0YsU0FBQSxTQUFBQyxHQUFnRHRGLEVBQUF1RixLQUFBdkYsRUFBQUgsS0FBQSxRQUFBeUYsSUFBaUNULFdBQUEsaUJBQTBCLEdBQUE3RSxFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxVQUErQnNCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsZ0JBQXFCc0IsT0FBT3dELE1BQUEsWUFBQUMsZUFBQSxhQUErQ0UsT0FBUW5QLE1BQUErSixFQUFBSCxLQUFBLFVBQUF3RixTQUFBLFNBQUFDLEdBQW9EdEYsRUFBQXVGLEtBQUF2RixFQUFBSCxLQUFBLFlBQUF5RixJQUFxQ1QsV0FBQSxxQkFBOEIsR0FBQTdFLEVBQUErQixHQUFBLEtBQUE1QixFQUFBLFVBQStCc0IsT0FBTytDLEtBQUEsR0FBQUMsSUFBQSxHQUFBQyxhQUFBLE1BQW9DdkUsRUFBQSxnQkFBcUJzQixPQUFPd0QsTUFBQSxZQUFBQyxlQUFBLGFBQStDRSxPQUFRblAsTUFBQStKLEVBQUFILEtBQUEsVUFBQXdGLFNBQUEsU0FBQUMsR0FBb0R0RixFQUFBdUYsS0FBQXZGLEVBQUFILEtBQUEsWUFBQXlGLElBQXFDVCxXQUFBLHFCQUE4QixHQUFBN0UsRUFBQStCLEdBQUEsS0FBQTVCLEVBQUEsVUFBK0JzQixPQUFPK0MsS0FBQSxHQUFBQyxJQUFBLEdBQUFDLGFBQUEsTUFBb0N2RSxFQUFBLGdCQUFxQnNCLE9BQU93RCxNQUFBLE9BQUFDLGVBQUEsaUJBQThDRSxPQUFRblAsTUFBQStKLEVBQUFILEtBQUEsS0FBQXdGLFNBQUEsU0FBQUMsR0FBK0N0RixFQUFBdUYsS0FBQXZGLEVBQUFILEtBQUEsT0FBQXlGLElBQWdDVCxXQUFBLGdCQUF5QixHQUFBN0UsRUFBQStCLEdBQUEsS0FBQTVCLEVBQUEsVUFBK0JzQixPQUFPK0MsS0FBQSxHQUFBQyxJQUFBLEdBQUFDLGFBQUEsTUFBb0N2RSxFQUFBLGdCQUFxQnNCLE9BQU93RCxNQUFBLFFBQUFDLGVBQUEsT0FBcUNFLE9BQVFuUCxNQUFBK0osRUFBQUgsS0FBQSxNQUFBd0YsU0FBQSxTQUFBQyxHQUFnRHRGLEVBQUF1RixLQUFBdkYsRUFBQUgsS0FBQSxRQUFBeUYsSUFBaUNULFdBQUEsaUJBQTBCLEdBQUE3RSxFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxVQUErQnNCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsZ0JBQXFCd0UsYUFBYWhRLEtBQUEsV0FBQWlRLFFBQUEsYUFBQTNPLE9BQTZDd1AsTUFBQSwwQkFBa0NaLFdBQUEsMkNBQXNEQyxPQUFTQyxjQUFBL0UsRUFBQTZELFVBQUEsUUFBc0NwQyxPQUFRdUQsaUJBQUFoRixFQUFBMkQsY0FBQSxPQUFBc0IsTUFBQSxNQUFBQyxlQUFBLHFCQUFBQyxlQUFBLE9BQWlIQyxPQUFRblAsTUFBQStKLEVBQUFILEtBQUEsSUFBQXdGLFNBQUEsU0FBQUMsR0FBOEN0RixFQUFBdUYsS0FBQXZGLEVBQUFILEtBQUEsTUFBQXlGLElBQStCVCxXQUFBLGVBQXdCLEdBQUE3RSxFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxVQUErQnNCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsY0FBbUJzQixPQUFPc0MsTUFBQSxRQUFlcUIsT0FBUW5QLE1BQUErSixFQUFBSCxLQUFBLE1BQUF3RixTQUFBLFNBQUFDLEdBQWdEdEYsRUFBQXVGLEtBQUF2RixFQUFBSCxLQUFBLFFBQUF5RixJQUFpQ1QsV0FBQSxnQkFBMEIxRSxFQUFBLE9BQVlzQixPQUFPaUUsS0FBQSxTQUFlQSxLQUFBLFVBQWMxRixFQUFBK0IsR0FBQSx3QkFBQTVCLEVBQUEsU0FBQUgsRUFBQStCLEdBQUEsd0JBQUEvQixFQUFBK0IsR0FBQSxLQUFBNUIsRUFBQSxVQUFxR3NCLE9BQU8rQyxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQ3ZFLEVBQUEsU0FBY3NCLE9BQU8wQyxRQUFBbkUsRUFBQUgsS0FBQS9FLEtBQUFzSixTQUFBcEUsRUFBQXhILE9BQUFZLE9BQUE0RyxFQUFBSCxLQUFBL0UsS0FBQTZLLE1BQUEsR0FBQTVCLE1BQUEsVUFBaUduQyxJQUFLQyxNQUFBLFNBQUFvQyxHQUF5QmpFLEVBQUF2RSxhQUFldUUsRUFBQStCLEdBQUEscUJBQUE1QixFQUFBLFVBQTJDc0IsT0FBTzRDLE1BQUEsTUFBWXJFLEVBQUErQixHQUFBLCtCQUM3dEl4RSxLQUNBeEosRUFBQUMsU0FBa0JzSixTQUFBQyx5Q0NDbEIsSUFBQXFJLEVBQUF6UixFQUFBLFFBQ0EsaUJBQUF5UixRQUFBN1IsRUFBQU0sRUFBQXVSLEVBQUEsTUFDQUEsRUFBQUMsU0FBQTlSLEVBQUFDLFFBQUE0UixFQUFBQyxRQUVBLElBQUFDLEVBQUEzUixFQUFBLE9BQUFBLENBQUEsV0FBQXlSLEdBQUEsNEJDREEsSUFBQUcsRUFBQSxvQkFBQUMsU0FFQSx1QkFBQUMsZUFDQUYsRUFDQSxVQUFBRyxNQUNBLDJKQUtBLElBQUFDLEVBQUFoUyxFQUFBLFFBZUFpUyxLQVFBQyxFQUFBTixJQUFBQyxTQUFBSyxNQUFBTCxTQUFBTSxxQkFBQSxZQUNBQyxFQUFBLEtBQ0FDLEVBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBLGFBQ0F6SSxFQUFBLEtBQ0EwSSxFQUFBLGtCQUlBQyxFQUFBLG9CQUFBQyxXQUFBLGVBQUFDLEtBQUFELFVBQUFFLFVBQUFDLGVBb0NBLFNBQUFDLEVBQUFDLEdBQ0EsUUFBQTdTLEVBQUEsRUFBaUJBLEVBQUE2UyxFQUFBM1AsT0FBbUJsRCxJQUFBLENBQ3BDLElBQUE4UyxFQUFBRCxFQUFBN1MsR0FDQStTLEVBQUFoQixFQUFBZSxFQUFBbkssSUFDQSxHQUFBb0ssRUFBQSxDQUNBQSxFQUFBQyxPQUNBLFFBQUFDLEVBQUEsRUFBcUJBLEVBQUFGLEVBQUFHLE1BQUFoUSxPQUEyQitQLElBQ2hERixFQUFBRyxNQUFBRCxHQUFBSCxFQUFBSSxNQUFBRCxJQUVBLEtBQVlBLEVBQUFILEVBQUFJLE1BQUFoUSxPQUF1QitQLElBQ25DRixFQUFBRyxNQUFBNU4sS0FBQTZOLEVBQUFMLEVBQUFJLE1BQUFELEtBRUFGLEVBQUFHLE1BQUFoUSxPQUFBNFAsRUFBQUksTUFBQWhRLFNBQ0E2UCxFQUFBRyxNQUFBaFEsT0FBQTRQLEVBQUFJLE1BQUFoUSxZQUVLLENBRUwsSUFEQSxJQUFBZ1EsS0FDQUQsRUFBQSxFQUFxQkEsRUFBQUgsRUFBQUksTUFBQWhRLE9BQXVCK1AsSUFDNUNDLEVBQUE1TixLQUFBNk4sRUFBQUwsRUFBQUksTUFBQUQsS0FFQWxCLEVBQUFlLEVBQUFuSyxLQUE4QkEsR0FBQW1LLEVBQUFuSyxHQUFBcUssS0FBQSxFQUFBRSxXQUs5QixTQUFBRSxJQUNBLElBQUFDLEVBQUExQixTQUFBMkIsY0FBQSxTQUdBLE9BRkFELEVBQUEzSixLQUFBLFdBQ0FzSSxFQUFBdUIsWUFBQUYsR0FDQUEsRUFHQSxTQUFBRixFQUFBblIsR0FDQSxJQUFBeVAsRUFBQStCLEVBQ0FILEVBQUExQixTQUFBOEIsY0FBQSxTQUFBbkIsRUFBQSxNQUFBdFEsRUFBQTJHLEdBQUEsTUFFQSxHQUFBMEssRUFBQSxDQUNBLEdBQUFqQixFQUdBLE9BQUFDLEVBT0FnQixFQUFBSyxXQUFBQyxZQUFBTixHQUlBLEdBQUFkLEVBQUEsQ0FFQSxJQUFBcUIsRUFBQXpCLElBQ0FrQixFQUFBbkIsTUFBQWtCLEtBQ0EzQixFQUFBb0MsRUFBQUMsS0FBQSxLQUFBVCxFQUFBTyxHQUFBLEdBQ0FKLEVBQUFLLEVBQUFDLEtBQUEsS0FBQVQsRUFBQU8sR0FBQSxRQUdBUCxFQUFBRCxJQUNBM0IsRUFBQXNDLEVBQUFELEtBQUEsS0FBQVQsR0FDQUcsRUFBQSxXQUNBSCxFQUFBSyxXQUFBQyxZQUFBTixJQU1BLE9BRkE1QixFQUFBelAsR0FFQSxTQUFBZ1MsRUFBQUMsR0FDQSxHQUFBQSxFQUFBLENBQ0EsR0FBQUEsRUFBQUMsTUFBQWxTLEVBQUFrUyxLQUNBRCxFQUFBRSxRQUFBblMsRUFBQW1TLE9BQ0FGLEVBQUFHLFlBQUFwUyxFQUFBb1MsVUFDQSxPQUVBM0MsRUFBQXpQLEVBQUFpUyxRQUVBVCxLQS9HQTlULEVBQUFDLFFBQUEsU0FBQTBVLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FwQyxFQUFBbUMsRUFFQTNLLEVBQUE0SyxNQUVBLElBQUEzQixFQUFBZixFQUFBdUMsRUFBQUMsR0FHQSxPQUZBMUIsRUFBQUMsR0FFQSxTQUFBcEIsRUFBQWdELEdBRUEsSUFEQSxJQUFBQyxLQUNBMVUsRUFBQSxFQUFtQkEsRUFBQTZTLEVBQUEzUCxPQUFtQmxELElBQUEsQ0FDdEMsSUFBQThTLEVBQUFELEVBQUE3UyxHQUNBK1MsS0FBQWhCLEVBQUFlLEVBQUFuSyxLQUNBcUssT0FDQTBCLEVBQUFwUCxLQUFBeU4sR0FFQTBCLEVBRUE3QixFQURBQyxFQUFBZixFQUFBdUMsRUFBQUksSUFHQTVCLEtBRUEsUUFBQTdTLEVBQUEsRUFBbUJBLEVBQUEwVSxFQUFBeFIsT0FBc0JsRCxJQUFBLENBQ3pDLElBQUErUyxFQUNBLFFBREFBLEVBQUEyQixFQUFBMVUsSUFDQWdULEtBQUEsQ0FDQSxRQUFBQyxFQUFBLEVBQXVCQSxFQUFBRixFQUFBRyxNQUFBaFEsT0FBMkIrUCxJQUNsREYsRUFBQUcsTUFBQUQsWUFFQWxCLEVBQUFnQixFQUFBcEssUUF3RkEsSUFBQWdNLEdBQ0FDLEtBRUEsU0FBQUMsRUFBQUMsR0FFQSxPQURBRixFQUFBQyxHQUFBQyxFQUNBRixFQUFBL04sT0FBQTBGLFNBQUF3SSxLQUFBLFFBSkFILEVBUUEsU0FBQWYsRUFBQVIsRUFBQXdCLEVBQUFyQixFQUFBeFIsR0FDQSxJQUFBa1MsRUFBQVYsRUFBQSxHQUFBeFIsRUFBQWtTLElBRUEsR0FBQWIsRUFBQTJCLFdBQ0EzQixFQUFBMkIsV0FBQUMsUUFBQU4sRUFBQUUsRUFBQVgsT0FDRyxDQUNILElBQUFnQixFQUFBdkQsU0FBQXdELGVBQUFqQixHQUNBa0IsRUFBQS9CLEVBQUErQixXQUNBQSxFQUFBUCxJQUFBeEIsRUFBQU0sWUFBQXlCLEVBQUFQLElBQ0FPLEVBQUFsUyxPQUNBbVEsRUFBQWdDLGFBQUFILEVBQUFFLEVBQUFQLElBRUF4QixFQUFBRSxZQUFBMkIsSUFLQSxTQUFBbkIsRUFBQVYsRUFBQXJSLEdBQ0EsSUFBQWtTLEVBQUFsUyxFQUFBa1MsSUFDQUMsRUFBQW5TLEVBQUFtUyxNQUNBQyxFQUFBcFMsRUFBQW9TLFVBaUJBLEdBZkFELEdBQ0FkLEVBQUFpQyxhQUFBLFFBQUFuQixHQUVBdkssRUFBQTJMLE9BQ0FsQyxFQUFBaUMsYUFBQWhELEVBQUF0USxFQUFBMkcsSUFHQXlMLElBR0FGLEdBQUEsbUJBQUFFLEVBQUFvQixRQUFBLFNBRUF0QixHQUFBLHVEQUF5RHVCLEtBQUFDLFNBQUFDLG1CQUFBQyxLQUFBQyxVQUFBekIsTUFBQSxPQUd6RGYsRUFBQTJCLFdBQ0EzQixFQUFBMkIsV0FBQUMsUUFBQWYsTUFDRyxDQUNILEtBQUFiLEVBQUF5QyxZQUNBekMsRUFBQU0sWUFBQU4sRUFBQXlDLFlBRUF6QyxFQUFBRSxZQUFBNUIsU0FBQXdELGVBQUFqQiwwQkN2TkF4VSxFQUFBQyxRQUFBLFNBQUFtUyxFQUFBdUMsRUFBQUMsR0FHQSxJQUZBLElBQUF6QixLQUNBa0QsS0FDQS9WLEVBQUEsRUFBaUJBLEVBQUFzVSxFQUFBcFIsT0FBaUJsRCxJQUFBLENBQ2xDLElBQUE4UyxFQUFBd0IsRUFBQXRVLEdBQ0EySSxFQUFBbUssRUFBQSxHQUNBb0IsRUFDQUMsRUFDQUMsRUFDQTRCLEdBQ0FyTixHQUFBMEwsRUFBQSxJQUFBclUsRUFDQWtVLElBTEFwQixFQUFBLEdBTUFxQixNQUxBckIsRUFBQSxHQU1Bc0IsVUFMQXRCLEVBQUEsSUFPQWlELEVBQUFwTixHQUdBb04sRUFBQXBOLEdBQUF1SyxNQUFBNU4sS0FBQTBRLEdBRkFuRCxFQUFBdk4sS0FBQXlRLEVBQUFwTixJQUFtQ0EsS0FBQXVLLE9BQUE4QyxLQUtuQyxPQUFBbkQsc0tDNkpBbFIsRUFBQSxTQUNBc1UsWUFDQUMsWUFBQUMsRUFBQXpRLEdBRUEwUSxRQUFBQyxFQUFBLEdBQ0E5UCxLQUFBLFNBQUFBLElBQUEsT0FFQWlGLEtBQUEsSUFBQThLLEVBQUEsTUFDQWhXLEtBQUEsS0FDQWlXLFFBQUEsRUFDQXBGLE1BQUEsS0FDQXFGLE1BQUEsS0FDQUMsVUFBQSxLQUNBQyxVQUFBLEtBQ0FDLEtBQUEsS0FDQUMsTUFBQSxLQUNBQyxJQUFBLEtBQ0FDLFFBQUEsS0FDQUMsTUFBQSxTQUdBdkssU0FDQXdLLFVBREEsU0FBQUEsRUFDQUMsR0FDQSxPQUFBQSxFQUNBLGlCQUVBLG9CQUdBN1AsT0FSQSxTQUFBQSxJQVNBLElBQUE4UCxFQUFBN1QsS0FDQUEsS0FBQThULFdBQUFDLGNBQUFsUCxLQUFBLFNBQUFtUCxHQUtBLElBQUFDLEVBSkFELEVBRUFILEVBQUFLLGVBRUFDLEVBQUE5UixFQUFBK1IsT0FDQUMsbUJBQUEsMENBQ0FDLGdCQUFBLEdBRUFMLEVBQ0FNLE1BQUEsbUJBQ0FDLEtBQUEsOENBQ0FuTyxLQUFBLFVBQ0FvTyxrQkFBQSxZQUtBUCxhQTVCQSxTQUFBQSxJQTZCQSxJQUFBTCxFQUFBN1QsS0FDQTZULEVBQUExTCxLQUFBL0UsTUFBQSxFQUVBeVEsRUFBQTFMLEtBQ0FuRSxLQUFBWSxNQUFBLHNCQUNBQyxLQUFBLFNBQUFDLEdBR0EsSUFBQTRQLEVBRkFDLFFBQUFDLElBQUE5UCxFQUFBNUIsTUFDQTJRLEVBQUFDLFdBQUFqUSxRQUNBc1EsRUFBQTlSLEVBQUErUixPQUNBQyxtQkFBQSwwQ0FDQUMsZ0JBQUEsR0FFQUksRUFDQUgsTUFBQSxXQUNBQyxLQUFBLGdEQUNBbk8sS0FBQSxVQUNBb08sa0JBQUEsT0FFQVosRUFBQWdCLFVBQUEsa0JBQUFoQixFQUFBaUIsUUFBQTdTLE1BQUFoRixLQUFBLGdCQUVBOEgsTUFBQSxTQUFBakUsT0FFQWlVLFVBbkRBLFNBQUFBLElBb0RBLElBQUFsQixFQUFBN1QsVUFDQW1JLEtBQUEsSUFBQThLLEVBQUEsTUFDQUMsUUFBQSxFQUNBalcsS0FBQSxLQUNBNlEsTUFBQSxLQUNBcUYsTUFBQSxLQUNBQyxVQUFBLEtBQ0FDLFVBQUEsS0FDQUMsS0FBQSxLQUNBQyxNQUFBLEtBQ0FDLElBQUEsS0FDQUMsUUFBQSxLQUNBQyxNQUFBLFFBR0FsSCxhQW5FQSxTQUFBQSxJQW9FQSxJQUFBcUgsRUFBQTdULEtBQ0E2VCxFQUFBZ0IsVUFBQSxrQkFBQWhCLEVBQUFpQixRQUFBN1MsTUFBQWhGLEtBQUEsd0NDaFJBWCxFQUFBRCxFQUFBQyxRQUFBRyxFQUFBLE9BQUFBLEVBQUEsSUFLQXdGLE1BQUE1RixFQUFBTSxFQUFBLHNDQUE2RCIsImZpbGUiOiI1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIuL1wiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJsVks3XCIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIk9NTjRcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXhpb3NcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImxWSzdcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJheGlvc1wiXG52YXIgZXh0ZXJuYWxfX2F4aW9zXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJPTU40XCIpO1xudmFyIGV4dGVybmFsX19heGlvc19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfX2F4aW9zXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWwuanNcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8qKlxyXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5KG9iaikge1xuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBjb3B5O1xufVxuLyoqXHJcbiAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYW4gYXJyYXksIHdyYXAgaXQgaW4gb25lLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBbnl9IHZhbHVlXHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKi9cblxuZnVuY3Rpb24gYXJyYXlXcmFwKHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL0Vycm9ycy5qc1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gRXJyb3JzX190eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBFcnJvcnNfX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBFcnJvcnNfX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBFcnJvcnNfX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXG5cbnZhciBFcnJvcnNfRXJyb3JzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IGVycm9yIGJhZyBpbnN0YW5jZS5cclxuICAgKi9cbiAgZnVuY3Rpb24gRXJyb3JzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcnJvcnMpO1xuXG4gICAgdGhpcy5lcnJvcnMgPSB7fTtcbiAgfVxuICAvKipcclxuICAgKiBTZXQgdGhlIGVycm9ycyBvYmplY3Qgb3IgZmllbGQgZXJyb3IgbWVzc2FnZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGZpZWxkXHJcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd8dW5kZWZpbmVkfSBtZXNzYWdlc1xyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEVycm9ycywgW3tcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChmaWVsZCwgbWVzc2FnZXMpIHtcbiAgICAgIGlmIChFcnJvcnNfX3R5cGVvZihmaWVsZCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZmllbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldChfZXh0ZW5kcyh7fSwgdGhpcy5lcnJvcnMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQsIGFycmF5V3JhcChtZXNzYWdlcykpKSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCB0aGUgZXJyb3JzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFsbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVycm9ycztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlcmUgaXMgYW4gZXJyb3IgZm9yIHRoZSBnaXZlbiBmaWVsZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpZWxkXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoYXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGZpZWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcnMuaGFzT3duUHJvcGVydHkoZmllbGQpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IGVycm9ycyBmb3IgdGhlIGdpdmVuIGZpZWxkcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHsuLi5TdHJpbmd9IGZpZWxkc1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzQW55XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0FueSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmaWVsZHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGZpZWxkc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpZWxkcy5zb21lKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzKGZpZWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IGVycm9ycy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhbnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYW55KCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5sZW5ndGggPiAwO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgZmlyc3QgZXJyb3IgbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGZpZWxkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgU3RyaW5nfSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7U3RyaW5nfHVuZGVmaW5lZH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChmaWVsZCkge1xuICAgICAgaWYgKHRoaXMuaGFzKGZpZWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGwoZmllbGQpWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGhlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgZ2l2ZW4gZmllbGQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGwoZmllbGQpIHtcbiAgICAgIHJldHVybiBhcnJheVdyYXAodGhpcy5lcnJvcnNbZmllbGRdIHx8IFtdKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBmaWVsZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7Li4uU3RyaW5nfSBmaWVsZHNcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvbmx5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9ubHkoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2VzID0gW107XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZmllbGRzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGZpZWxkc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpczIuZ2V0KGZpZWxkKTtcblxuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGhlIGVycm9ycyBpbiBhIGZsYXQgYXJyYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZsYXR0ZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmxhdHRlbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZXJyb3JzKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfSwgW10pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIENsZWFyIG9uZSBvciBhbGwgZXJyb3IgZmllbGRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gZmllbGRcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoZmllbGQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZXJyb3JzID0ge307XG5cbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gZmllbGQpIHtcbiAgICAgICAgICAgIGVycm9yc1trZXldID0gX3RoaXMzLmVycm9yc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0KGVycm9ycyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVycm9ycztcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9Gb3JtLmpzXG5mdW5jdGlvbiBGb3JtX190eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBGb3JtX190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgRm9ybV9fdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIEZvcm1fX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIEZvcm1fX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gRm9ybV9fZXh0ZW5kcygpIHsgRm9ybV9fZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBGb3JtX19leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gRm9ybV9fY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBGb3JtX19kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gRm9ybV9fY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBGb3JtX19kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgRm9ybV9fZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXG5cblxuXG52YXIgRm9ybV9Gb3JtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBmb3JtIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgZnVuY3Rpb24gRm9ybSgpIHtcbiAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBGb3JtX19jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtKTtcblxuICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIHRoaXMuZXJyb3JzID0gbmV3IEVycm9yc19FcnJvcnMoKTtcbiAgICB0aGlzLm9yaWdpbmFsRGF0YSA9IGRlZXBDb3B5KGRhdGEpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbGwgZm9ybSBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cblxuXG4gIEZvcm1fX2NyZWF0ZUNsYXNzKEZvcm0sIFt7XG4gICAga2V5OiBcImZpbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbChkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZvcm0gZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5rZXlzKCkucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1fX2V4dGVuZHMoe30sIGRhdGEsIEZvcm1fX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIF90aGlzMltrZXldKSk7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZm9ybSBkYXRhIGtleXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImtleXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gIUZvcm0uaWdub3JlLmluY2x1ZGVzKGtleSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgcHJvY2Vzc2luZyB0aGUgZm9ybS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0UHJvY2Vzc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFByb2Nlc3NpbmcoKSB7XG4gICAgICB0aGlzLmVycm9ycy5jbGVhcigpO1xuICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5pc2ggcHJvY2Vzc2luZyB0aGUgZm9ybS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZpbmlzaFByb2Nlc3NpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoUHJvY2Vzc2luZygpIHtcbiAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgICAgdGhpcy5zdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGZvcm0gZXJyb3JzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmVycm9ycy5jbGVhcigpO1xuICAgICAgdGhpcy5zdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBmb3JtIGZpZWxkcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiAhRm9ybS5pZ25vcmUuaW5jbHVkZXMoa2V5KTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpczNba2V5XSA9IGRlZXBDb3B5KF90aGlzMy5vcmlnaW5hbERhdGFba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIEdFVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgnZ2V0JywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIFBPU1QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBvc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgncG9zdCcsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBQQVRDSCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGF0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0Y2godXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ3BhdGNoJywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIFBVVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1dCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgncHV0JywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIERFTEVURSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ2RlbGV0ZScsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZm9ybSBkYXRhIHZpYSBhbiBIVFRQIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IG1ldGhvZCAoZ2V0LCBwb3N0LCBwYXRjaCwgcHV0KVxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgKGF4aW9zIGNvbmZpZylcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3VibWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1Ym1pdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdGhpcy5zdGFydFByb2Nlc3NpbmcoKTtcbiAgICAgIHZhciBkYXRhID0gbWV0aG9kID09PSAnZ2V0JyA/IHtcbiAgICAgICAgcGFyYW1zOiB0aGlzLmRhdGEoKVxuICAgICAgfSA6IHRoaXMuZGF0YSgpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZXh0ZXJuYWxfX2F4aW9zX19kZWZhdWx0LmEucmVxdWVzdChGb3JtX19leHRlbmRzKHtcbiAgICAgICAgICB1cmw6IF90aGlzNC5yb3V0ZSh1cmwpLFxuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSwgY29uZmlnKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBfdGhpczQuZmluaXNoUHJvY2Vzc2luZygpO1xuXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzNC5idXN5ID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF90aGlzNC5lcnJvcnMuc2V0KF90aGlzNC5leHRyYWN0RXJyb3JzKGVycm9yLnJlc3BvbnNlKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdCB0aGUgZXJyb3JzIGZyb20gdGhlIHJlc3BvbnNlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gcmVzcG9uc2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0RXJyb3JzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RFcnJvcnMocmVzcG9uc2UpIHtcbiAgICAgIGlmICghcmVzcG9uc2UuZGF0YSB8fCBGb3JtX190eXBlb2YocmVzcG9uc2UuZGF0YSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IEZvcm0uZXJyb3JNZXNzYWdlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICByZXR1cm4gRm9ybV9fZXh0ZW5kcyh7fSwgcmVzcG9uc2UuZGF0YS5lcnJvcnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmRhdGEubWVzc2FnZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gRm9ybV9fZXh0ZW5kcyh7fSwgcmVzcG9uc2UuZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIG5hbWVkIHJvdXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwYXJhbWV0ZXJzXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicm91dGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcm91dGUobmFtZSkge1xuICAgICAgdmFyIHBhcmFtZXRlcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHVybCA9IG5hbWU7XG5cbiAgICAgIGlmIChGb3JtLnJvdXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB1cmwgPSBkZWNvZGVVUkkoRm9ybS5yb3V0ZXNbbmFtZV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoRm9ybV9fdHlwZW9mKHBhcmFtZXRlcnMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgIGlkOiBwYXJhbWV0ZXJzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShcIntcIi5jb25jYXQoa2V5LCBcIn1cIiksIHBhcmFtZXRlcnNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIGVycm9ycyBvbiBrZXlkb3duLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25LZXlkb3duXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5uYW1lKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLmNsZWFyKGV2ZW50LnRhcmdldC5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9ybTtcbn0oKTtcblxuRm9ybV9Gb3JtLnJvdXRlcyA9IHt9O1xuRm9ybV9Gb3JtLmVycm9yTWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xuRm9ybV9Gb3JtLmlnbm9yZSA9IFsnYnVzeScsICdzdWNjZXNzZnVsJywgJ2Vycm9ycycsICdvcmlnaW5hbERhdGEnXTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19Gb3JtID0gKEZvcm1fRm9ybSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/e1wiY2FjaGVEaXJlY3RvcnlcIjpcIkM6Ly9Vc2Vycy8vT3RpbnNvZnQvL0NvZGUvL2dpdGh1Yi8vdmZvcm0vL25vZGVfbW9kdWxlcy8vLmNhY2hlLy9jYWNoZS1sb2FkZXJcIn0hLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvSGFzRXJyb3IudnVlXG4vL1xuLy9cbi8vXG4vL1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgSGFzRXJyb3IgPSAoe1xuICBuYW1lOiAnaGFzLWVycm9yJyxcbiAgcHJvcHM6IHtcbiAgICBmb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgZmllbGQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNDM4OWE2ZGRcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9IYXNFcnJvci52dWVcbnZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5lcnJvcnMuaGFzKF92bS5maWVsZCkpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhlbHAtYmxvY2sgaW52YWxpZC1mZWVkYmFja1wiLGRvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0uZm9ybS5lcnJvcnMuZ2V0KF92bS5maWVsZCkpfX0pOl92bS5fZSgpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0hhc0Vycm9yLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBIYXNFcnJvcixcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0hhc0Vycm9yID0gKENvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydC5qc1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnQgPSAoe1xuICBwcm9wczoge1xuICAgIGZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBkaXNtaXNzaWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgICAgaWYgKHRoaXMuZGlzbWlzc2libGUpIHtcbiAgICAgICAgdGhpcy5mb3JtLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz97XCJjYWNoZURpcmVjdG9yeVwiOlwiQzovL1VzZXJzLy9PdGluc29mdC8vQ29kZS8vZ2l0aHViLy92Zm9ybS8vbm9kZV9tb2R1bGVzLy8uY2FjaGUvL2NhY2hlLWxvYWRlclwifSEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9yLnZ1ZVxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnRFcnJvciA9ICh7XG4gIG5hbWU6ICdhbGVydC1lcnJvcicsXG4gIGV4dGVuZHM6IEFsZXJ0LFxuICBwcm9wczoge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdUaGVyZSB3ZXJlIHNvbWUgcHJvYmxlbXMgd2l0aCB5b3VyIGlucHV0LidcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1lNzNhYTdjOFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3IudnVlXG52YXIgQWxlcnRFcnJvcl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5lcnJvcnMuYW55KCkpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFsZXJ0IGFsZXJ0LWRhbmdlciBhbGVydC1kaXNtaXNzaWJsZVwiLGF0dHJzOntcInJvbGVcIjpcImFsZXJ0XCJ9fSxbKF92bS5kaXNtaXNzaWJsZSk/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiY2xvc2VcIixhdHRyczp7XCJ0eXBlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpcIkNsb3NlXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmRpc21pc3N9fSxbX2MoJ3NwYW4nLHthdHRyczp7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0sW192bS5fdihcIsOXXCIpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIixbKF92bS5mb3JtLmVycm9ycy5oYXMoJ2Vycm9yJykpP19jKCdkaXYnLHtkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLmZvcm0uZXJyb3JzLmdldCgnZXJyb3InKSl9fSk6X2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSldKV0sMik6X3ZtLl9lKCl9XG52YXIgQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3IudnVlXG4vKiBzY3JpcHQgKi9cblxuXG4vKiB0ZW1wbGF0ZSAqL1xuXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgQWxlcnRFcnJvcl9fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgQWxlcnRFcnJvcl9fX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIEFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcblxudmFyIEFsZXJ0RXJyb3JfQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBBbGVydEVycm9yLFxuICBBbGVydEVycm9yX3JlbmRlcixcbiAgQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMsXG4gIEFsZXJ0RXJyb3JfX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBBbGVydEVycm9yX19fdnVlX3N0eWxlc19fLFxuICBBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyxcbiAgQWxlcnRFcnJvcl9fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbXBvbmVudHNfQWxlcnRFcnJvciA9IChBbGVydEVycm9yX0NvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJDOi8vVXNlcnMvL090aW5zb2Z0Ly9Db2RlLy9naXRodWIvL3Zmb3JtLy9ub2RlX21vZHVsZXMvLy5jYWNoZS8vY2FjaGUtbG9hZGVyXCJ9IS4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEFsZXJ0RXJyb3JzID0gKHtcbiAgbmFtZTogJ2FsZXJ0LWVycm9ycycsXG4gIGV4dGVuZHM6IEFsZXJ0LFxuICBwcm9wczoge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdUaGVyZSB3ZXJlIHNvbWUgcHJvYmxlbXMgd2l0aCB5b3VyIGlucHV0LidcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00MjJhNjU5MVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxudmFyIEFsZXJ0RXJyb3JzX3JlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gKF92bS5mb3JtLmVycm9ycy5hbnkoKSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlXCIsYXR0cnM6e1wicm9sZVwiOlwiYWxlcnRcIn19LFsoX3ZtLmRpc21pc3NpYmxlKT9fYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJjbG9zZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOlwiQ2xvc2VcIn0sb246e1wiY2xpY2tcIjpfdm0uZGlzbWlzc319LFtfYygnc3Bhbicse2F0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSxbX3ZtLl92KFwiw5dcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS5tZXNzYWdlKT9fYygnZGl2Jyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCd1bCcsX3ZtLl9sKChfdm0uZm9ybS5lcnJvcnMuZmxhdHRlbigpKSxmdW5jdGlvbihlcnJvcil7cmV0dXJuIF9jKCdsaScse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhlcnJvcil9fSl9KSldKTpfdm0uX2UoKX1cbnZhciBBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIEFsZXJ0RXJyb3JzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQWxlcnRFcnJvcnNfQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBBbGVydEVycm9ycyxcbiAgQWxlcnRFcnJvcnNfcmVuZGVyLFxuICBBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMsXG4gIEFsZXJ0RXJyb3JzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgQWxlcnRFcnJvcnNfX192dWVfc3R5bGVzX18sXG4gIEFsZXJ0RXJyb3JzX19fdnVlX3Njb3BlSWRfXyxcbiAgQWxlcnRFcnJvcnNfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0FsZXJ0RXJyb3JzID0gKEFsZXJ0RXJyb3JzX0NvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJDOi8vVXNlcnMvL090aW5zb2Z0Ly9Db2RlLy9naXRodWIvL3Zmb3JtLy9ub2RlX21vZHVsZXMvLy5jYWNoZS8vY2FjaGUtbG9hZGVyXCJ9IS4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0U3VjY2Vzcy52dWVcbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnRTdWNjZXNzID0gKHtcbiAgbmFtZTogJ2FsZXJ0LXN1Y2Nlc3MnLFxuICBleHRlbmRzOiBBbGVydCxcbiAgcHJvcHM6IHtcbiAgICBtZXNzYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH1cbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTBhZmRiOGE4XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvQWxlcnRTdWNjZXNzLnZ1ZVxudmFyIEFsZXJ0U3VjY2Vzc19yZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5zdWNjZXNzZnVsKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlXCIsYXR0cnM6e1wicm9sZVwiOlwiYWxlcnRcIn19LFsoX3ZtLmRpc21pc3NpYmxlKT9fYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJjbG9zZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOlwiQ2xvc2VcIn0sb246e1wiY2xpY2tcIjpfdm0uZGlzbWlzc319LFtfYygnc3Bhbicse2F0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSxbX3ZtLl92KFwiw5dcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl90KFwiZGVmYXVsdFwiLFtfYygnZGl2Jyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KV0pXSwyKTpfdm0uX2UoKX1cbnZhciBBbGVydFN1Y2Nlc3Nfc3RhdGljUmVuZGVyRm5zID0gW11cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydFN1Y2Nlc3MudnVlXG4vKiBzY3JpcHQgKi9cblxuXG4vKiB0ZW1wbGF0ZSAqL1xuXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgQWxlcnRTdWNjZXNzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgQWxlcnRTdWNjZXNzX19fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQWxlcnRTdWNjZXNzX0NvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgQWxlcnRTdWNjZXNzLFxuICBBbGVydFN1Y2Nlc3NfcmVuZGVyLFxuICBBbGVydFN1Y2Nlc3Nfc3RhdGljUmVuZGVyRm5zLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18sXG4gIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9zY29wZUlkX18sXG4gIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbXBvbmVudHNfQWxlcnRTdWNjZXNzID0gKEFsZXJ0U3VjY2Vzc19Db21wb25lbnQuZXhwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2luZGV4LmpzXG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRm9ybVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNyY19Gb3JtOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJFcnJvcnNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBFcnJvcnNfRXJyb3JzOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJIYXNFcnJvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBvbmVudHNfSGFzRXJyb3I7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFsZXJ0RXJyb3JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjb21wb25lbnRzX0FsZXJ0RXJyb3I7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFsZXJ0RXJyb3JzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50c19BbGVydEVycm9yczsgfSk7XG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQWxlcnRTdWNjZXNzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50c19BbGVydFN1Y2Nlc3M7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzcmNfRm9ybTsgfSk7XG5cblxuXG5cblxuXG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdmZvcm0vZGlzdC92Zm9ybS5jb21tb24uanNcbi8vIG1vZHVsZSBpZCA9IDJnR01cbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMyAzNCAzNSAzNiAzNyAzOCA0MCA0MSA0MiA0MyA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCIsImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9taW5pbWl6ZSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWI4OGVhMDZlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01vZGFsTGF5b3V0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IG51bGxcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWI4OGVhMDZlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTW9kYWxMYXlvdXQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IDJ5clpcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwidnVlLWFwcFxcXCJdXSxcXFwicGx1Z2luc1xcXCI6W1xcXCJ0cmFuc2Zvcm0tb2JqZWN0LXJlc3Qtc3ByZWFkXFxcIixbXFxcInRyYW5zZm9ybS1ydW50aW1lXFxcIix7XFxcInBvbHlmaWxsXFxcIjpmYWxzZSxcXFwiaGVscGVyc1xcXCI6ZmFsc2V9XSxbXFxcInRyYW5zZm9ybS1pbXBvcnRzXFxcIix7XFxcInZ1ZXRpZnlcXFwiOntcXFwidHJhbnNmb3JtXFxcIjpcXFwidnVldGlmeS9lczUvY29tcG9uZW50cy8ke21lbWJlcn1cXFwiLFxcXCJwcmV2ZW50RnVsbEltcG9ydFxcXCI6dHJ1ZX19XV19IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vQ3JlYXRlQ2xpZW50LnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMmRlMzcwMWFcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9DcmVhdGVDbGllbnQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVDbGllbnQudnVlXG4vLyBtb2R1bGUgaWQgPSBTaUd6XG4vLyBtb2R1bGUgY2h1bmtzID0gNTgiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndi1hcHAnLHthdHRyczp7XCJzdGFuZGFsb25lXCI6XCJcIn19LFtfYygndi1jb250ZW50Jyx7c3RhdGljQ2xhc3M6XCJ3aGl0ZVwifSxbX2MoJ3YtY29udGFpbmVyJyx7c3RhdGljQ2xhc3M6XCJwYS0wIG1hLTBcIixhdHRyczp7XCJ0cmFuc2l0aW9uXCI6XCJzbGlkZS14LXRyYW5zaXRpb25cIixcImZsdWlkXCI6XCJcIn19LFtfYygndi1jYXJkJyx7YXR0cnM6e1wiZmxhdFwiOnRydWV9fSxbX3ZtLl90KFwidG9vbGJhclwiKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIildLDIpXSwxKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImZvb3RlclwiKV0sMildLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LWI4OGVhMDZlXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZVxuLy8gbW9kdWxlIGlkID0gZGdiSVxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDE4IDE5IDIwIDIxIDIyIDIzIDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5IDUwIDUxIDUyIDUzIDU0IDU1IDU2IDU3IDU4IDU5IDYwIDYxIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvKiB0aGlzIG1peGlucyBpcyByZXNwb25zaWJsZSBmb3IgY29uY2F0aW5hdGluZyBlcnJvciBtZXNzYWdlcyBmcm9tIHZmb3JtIGFuZCB2ZWUtdmFsaWRhdGUgICovXG4gIG1ldGhvZHM6IHtcbiAgICAvKiBlcnJvckJhZyBpcyByZWxhdGFlZCB0byB2ZWVWYWxpZGF0ZSBjb25maWcgbmFtZSovXG4gICAgLyogZm9ybSBpcyByZWxhdGVkIHRvIHZmb3JtICovXG4gICAgZXJyb3JNZXNzYWdlcyhmaWVsZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzLmNvbGxlY3QoZmllbGQpLmNvbmNhdCh0aGlzLmZvcm0uZXJyb3JzLm9ubHkoZmllbGQpKTtcbiAgICB9LFxuICAgIGhhc0Vycm9ycyhmaWVsZCkge1xuICAgICAgbGV0IGVycm9ycyA9IHRoaXMuZXJyb3JzXG4gICAgICAgIC5jb2xsZWN0KGZpZWxkKVxuICAgICAgICAuY29uY2F0KHRoaXMuZm9ybS5lcnJvcnMub25seShmaWVsZCkpO1xuICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvbWl4aW5zL3ZhbGlkYXRpb24tZXJyb3IuanMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnbW9kYWwtbGF5b3V0Jyx7c3RhdGljQ2xhc3M6XCJ3aGl0ZVwifSxbX2MoJ3YtY2FyZCcse2F0dHJzOntcImZsYXRcIjp0cnVlfX0sW19jKCd2LXRvb2xiYXInLHtzdGF0aWNDbGFzczpcInByaW1hcnlcIn0sW19jKCd2LWJ0bicse2F0dHJzOntcImZsYXRcIjpcIlwiLFwiaWNvblwiOlwiXCIsXCJjb2xvclwiOlwid2hpdGVcIn0sbmF0aXZlT246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5yZWRpcmVjdEJhY2soKX19fSxbX2MoJ3YtaWNvbicsW192bS5fdihcImFycm93X2JhY2tcIildKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1zcGFjZXInKSxfdm0uX3YoXCIgXCIpLF9jKCd2LXRvb2xiYXItdGl0bGUnLHtzdGF0aWNDbGFzczpcInRleHQteHMtY2VudGVyIHdoaXRlLS10ZXh0XCJ9LFtfdm0uX3YoXCJDbGllbnQgQ3JlYXRpb24gUGFnZVwiKV0pLF92bS5fdihcIiBcIiksX2MoJ3Ytc3BhY2VyJyksX3ZtLl92KFwiIFwiKSxfYygndi10b29sYmFyLWl0ZW1zJyxbX2MoJ3YtYnRuJyx7YXR0cnM6e1wibG9hZGluZ1wiOl92bS5mb3JtLmJ1c3ksXCJkaXNhYmxlZFwiOl92bS5lcnJvcnMuYW55KCkgfHwgX3ZtLmZvcm0uYnVzeSxcImZsYXRcIjpcIlwiLFwiY29sb3JcIjpcIndoaXRlXCJ9LG5hdGl2ZU9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc3VibWl0KCl9fX0sW192bS5fdihcIlxcbiAgICAgICAgICBTYXZlXFxuICAgICAgICAgIFwiKSxfYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwifX0sW192bS5fdihcInNhdmVcIildKV0sMSldLDEpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWxheW91dCcse2F0dHJzOntcInJvd1wiOlwiXCIsXCJ3cmFwXCI6XCJcIn19LFtfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwidmFsaWRhdGVcIixyYXdOYW1lOlwidi12YWxpZGF0ZVwiLHZhbHVlOih7IHJlcXVpcmVkOiB0cnVlIH0pLGV4cHJlc3Npb246XCJ7IHJlcXVpcmVkOiB0cnVlIH1cIn1dLGNsYXNzOnsgJ2Vycm9yLS10ZXh0JzogX3ZtLmhhc0Vycm9ycygnbmFtZScpIH0sYXR0cnM6e1wiZXJyb3ItbWVzc2FnZXNcIjpfdm0uZXJyb3JNZXNzYWdlcygnbmFtZScpLFwibGFiZWxcIjpcIkNsaWVudCBOYW1lXCIsXCJwcmVwZW5kLWljb25cIjpcImZhLXVzZXJcIixcImRhdGEtdnYtbmFtZVwiOlwibmFtZVwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLm5hbWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJuYW1lXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLm5hbWVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwidmFsaWRhdGVcIixyYXdOYW1lOlwidi12YWxpZGF0ZVwiLHZhbHVlOih7IGVtYWlsOiB0cnVlIH0pLGV4cHJlc3Npb246XCJ7IGVtYWlsOiB0cnVlIH1cIn1dLGNsYXNzOnsgJ2Vycm9yLS10ZXh0JzogX3ZtLmhhc0Vycm9ycygnZW1haWwnKSB9LGF0dHJzOntcImVycm9yLW1lc3NhZ2VzXCI6X3ZtLmVycm9yTWVzc2FnZXMoJ2VtYWlsJyksXCJsYWJlbFwiOlwiRW1haWxcIixcInByZXBlbmQtaWNvblwiOlwibWFpbFwiLFwiZGF0YS12di1uYW1lXCI6XCJlbWFpbFwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLmVtYWlsKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwiZW1haWxcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uZW1haWxcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2F0dHJzOntcImxhYmVsXCI6XCJQaG9uZVwiLFwicHJlcGVuZC1pY29uXCI6XCJwaG9uZVwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLnBob25lKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwicGhvbmVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0ucGhvbmVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2F0dHJzOntcImxhYmVsXCI6XCJBZGRyZXNzIDFcIixcInByZXBlbmQtaWNvblwiOlwibG9va3Nfb25lXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0uYWRkcmVzc18xKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwiYWRkcmVzc18xXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLmFkZHJlc3NfMVwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1wibGFiZWxcIjpcIkFkZHJlc3MgMlwiLFwicHJlcGVuZC1pY29uXCI6XCJsb29rc190d29cIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5hZGRyZXNzXzIpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJhZGRyZXNzXzJcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uYWRkcmVzc18yXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJsYWJlbFwiOlwiQ2l0eVwiLFwicHJlcGVuZC1pY29uXCI6XCJsb2NhdGlvbl9jaXR5XCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0uY2l0eSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcImNpdHlcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uY2l0eVwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1wibGFiZWxcIjpcIlN0YXRlXCIsXCJwcmVwZW5kLWljb25cIjpcIm1hcFwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLnN0YXRlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwic3RhdGVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uc3RhdGVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwidmFsaWRhdGVcIixyYXdOYW1lOlwidi12YWxpZGF0ZVwiLHZhbHVlOih7IHJlZ2V4OiAvXlxcZHs1fSg/OlstXFxzXVxcZHs0fSk/JC8gfSksZXhwcmVzc2lvbjpcInsgcmVnZXg6IC9eXFxcXGR7NX0oPzpbLVxcXFxzXVxcXFxkezR9KT8kLyB9XCJ9XSxjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ3ppcCcpIH0sYXR0cnM6e1wiZXJyb3ItbWVzc2FnZXNcIjpfdm0uZXJyb3JNZXNzYWdlcygnemlwJyksXCJsYWJlbFwiOlwiWmlwXCIsXCJwcmVwZW5kLWljb25cIjpcIm1hcmt1bnJlYWRfbWFpbGJveFwiLFwiZGF0YS12di1uYW1lXCI6XCJ6aXBcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS56aXApLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJ6aXBcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uemlwXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHRhcmVhJyx7YXR0cnM6e1wiY29sb3JcIjpcInRlYWxcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5ub3RlcyksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcIm5vdGVzXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLm5vdGVzXCJ9fSxbX2MoJ2Rpdicse2F0dHJzOntcInNsb3RcIjpcImxhYmVsXCJ9LHNsb3Q6XCJsYWJlbFwifSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgTm90ZXMgXCIpLF9jKCdzbWFsbCcsW192bS5fdihcIihvcHRpb25hbClcIildKV0pXSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LWJ0bicse2F0dHJzOntcImxvYWRpbmdcIjpfdm0uZm9ybS5idXN5LFwiZGlzYWJsZWRcIjpfdm0uZXJyb3JzLmFueSgpIHx8IF92bS5mb3JtLmJ1c3ksXCJibG9ja1wiOlwiXCIsXCJjb2xvclwiOlwiYWNjZW50XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc3VibWl0KCl9fX0sW192bS5fdihcIlxcbiAgICAgICAgICBTYXZlIFwiKSxfYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwifX0sW192bS5fdihcInNhdmVcIildKV0sMSldLDEpXSwxKV0sMSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTJkZTM3MDFhXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVDbGllbnQudnVlXG4vLyBtb2R1bGUgaWQgPSBseEg4XG4vLyBtb2R1bGUgY2h1bmtzID0gNTgiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/bWluaW1pemUhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1iODhlYTA2ZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Nb2RhbExheW91dC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjU3YmY0ZWE4XCIsIGNvbnRlbnQsIHRydWUsIHt9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYjg4ZWEwNmVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IHB3TEtcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxudmFyIGxpc3RUb1N0eWxlcyA9IHJlcXVpcmUoJy4vbGlzdFRvU3R5bGVzJylcblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgb3B0aW9ucyA9IG51bGxcbnZhciBzc3JJZEtleSA9ICdkYXRhLXZ1ZS1zc3ItaWQnXG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhcmVudElkLCBsaXN0LCBfaXNQcm9kdWN0aW9uLCBfb3B0aW9ucykge1xuICBpc1Byb2R1Y3Rpb24gPSBfaXNQcm9kdWN0aW9uXG5cbiAgb3B0aW9ucyA9IF9vcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbGlzdClcbiAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW11cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgICBkb21TdHlsZS5yZWZzLS1cbiAgICAgIG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKVxuICAgIH1cbiAgICBpZiAobmV3TGlzdCkge1xuICAgICAgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBuZXdMaXN0KVxuICAgICAgYWRkU3R5bGVzVG9Eb20oc3R5bGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXMgPSBbXVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldXG4gICAgICBpZiAoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZG9tU3R5bGUucGFydHNbal0oKVxuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcyAvKiBBcnJheTxTdHlsZU9iamVjdD4gKi8pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKytcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSlcbiAgICAgIH1cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgaWYgKGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA+IGl0ZW0ucGFydHMubGVuZ3RoKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLmxlbmd0aCA9IGl0ZW0ucGFydHMubGVuZ3RoXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIHN0eWxlc0luRG9tW2l0ZW0uaWRdID0geyBpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50ICgpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgc3R5bGVFbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnXG4gIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KVxuICByZXR1cm4gc3R5bGVFbGVtZW50XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gIHZhciB1cGRhdGUsIHJlbW92ZVxuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3R5bGVbJyArIHNzcklkS2V5ICsgJ349XCInICsgb2JqLmlkICsgJ1wiXScpXG5cbiAgaWYgKHN0eWxlRWxlbWVudCkge1xuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGFuZCBpbiBwcm9kdWN0aW9uIG1vZGUuXG4gICAgICAvLyBzaW1wbHkgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBub29wXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGhhcyBTU1Igc3R5bGVzIGJ1dCBpbiBkZXYgbW9kZS5cbiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBDaHJvbWUgY2FuJ3QgaGFuZGxlIHNvdXJjZSBtYXAgaW4gc2VydmVyLXJlbmRlcmVkXG4gICAgICAvLyBzdHlsZSB0YWdzIC0gc291cmNlIG1hcHMgaW4gPHN0eWxlPiBvbmx5IHdvcmtzIGlmIHRoZSBzdHlsZSB0YWcgaXNcbiAgICAgIC8vIGNyZWF0ZWQgYW5kIGluc2VydGVkIGR5bmFtaWNhbGx5LiBTbyB3ZSByZW1vdmUgdGhlIHNlcnZlciByZW5kZXJlZFxuICAgICAgLy8gc3R5bGVzIGFuZCBpbmplY3QgbmV3IG9uZXMuXG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgaWYgKGlzT2xkSUUpIHtcbiAgICAvLyB1c2Ugc2luZ2xldG9uIG1vZGUgZm9yIElFOS5cbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrK1xuICAgIHN0eWxlRWxlbWVudCA9IHNpbmdsZXRvbkVsZW1lbnQgfHwgKHNpbmdsZXRvbkVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKSlcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCBmYWxzZSlcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50LCBzdHlsZUluZGV4LCB0cnVlKVxuICB9IGVsc2Uge1xuICAgIC8vIHVzZSBtdWx0aS1zdHlsZS10YWcgbW9kZSBpbiBhbGwgb3RoZXIgY2FzZXNcbiAgICBzdHlsZUVsZW1lbnQgPSBjcmVhdGVTdHlsZUVsZW1lbnQoKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQpXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShvYmopXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmogLyogU3R5bGVPYmplY3RQYXJ0ICovKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcbiAgICAgICAgICBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuICAgICAgICAgIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgdGV4dFN0b3JlID0gW11cblxuICByZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudFxuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGVFbGVtZW50LCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzc1xuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKVxuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKVxuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGVFbGVtZW50LmNoaWxkTm9kZXNcbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSlcbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChjc3NOb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZUVsZW1lbnQsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzc1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWFcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXBcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKVxuICB9XG4gIGlmIChvcHRpb25zLnNzcklkKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShzc3JJZEtleSwgb2JqLmlkKVxuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCkge1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9qYXZhc2NyaXB0LWRlYnVnZ2luZ1xuICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIHNvdXJjZU1hcC5zb3VyY2VzWzBdICsgJyAqLydcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICcgKi8nXG4gIH1cblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzXG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpXG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKVxuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcbi8vIG1vZHVsZSBpZCA9IHJqajBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDE2IDE3IDE4IDE5IDIwIDIxIDIyIDIzIDI0IDI1IDI2IDI3IDI4IDI5IDMwIDMxIDMyIDMzIDM0IDM1IDM2IDM3IDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5IDUwIDUxIDUyIDUzIDU0IDU1IDU2IDU3IDU4IDU5IDYwIDYxIiwiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzXG4vLyBtb2R1bGUgaWQgPSB0VFZrXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMyAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsIjx0ZW1wbGF0ZT5cbiAgPG1vZGFsLWxheW91dCBjbGFzcz1cIndoaXRlXCI+XG4gICAgPHYtY2FyZCA6ZmxhdD1cInRydWVcIj5cbiAgICAgIDx2LXRvb2xiYXIgY2xhc3M9XCJwcmltYXJ5XCI+XG4gICAgICAgIDx2LWJ0biBcbiAgICAgICAgICBmbGF0IFxuICAgICAgICAgIGljb24gXG4gICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgQGNsaWNrLm5hdGl2ZT1cInJlZGlyZWN0QmFjaygpXCJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LWljb24+YXJyb3dfYmFjazwvdi1pY29uPlxuICAgICAgICA8L3YtYnRuPlxuICAgICAgICA8di1zcGFjZXIvPlxuICAgICAgICA8di10b29sYmFyLXRpdGxlIGNsYXNzPVwidGV4dC14cy1jZW50ZXIgd2hpdGUtLXRleHRcIj5DbGllbnQgQ3JlYXRpb24gUGFnZTwvdi10b29sYmFyLXRpdGxlPlxuICAgICAgICA8di1zcGFjZXIvPlxuICAgICAgICA8di10b29sYmFyLWl0ZW1zPlxuICAgICAgICAgIDwhLS0gSWYgVGhlcmUgaXMgbm8gQ2xpZW50IEFjY291bnQgTG9naW4gWWV0IFJlZGlyZWN0IHRvIEF1dGhlbnRpY2F0aW9uIFBhZ2UgLS0+XG4gICAgICAgICAgPHYtYnRuXG4gICAgICAgICAgICA6bG9hZGluZz1cImZvcm0uYnVzeVwiIFxuICAgICAgICAgICAgOmRpc2FibGVkPVwiZXJyb3JzLmFueSgpIHx8IGZvcm0uYnVzeVwiXG4gICAgICAgICAgICBmbGF0IFxuICAgICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiIFxuICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT1cInN1Ym1pdCgpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBTYXZlXG4gICAgICAgICAgICA8di1pY29uIHJpZ2h0PnNhdmU8L3YtaWNvbj5cbiAgICAgICAgICA8L3YtYnRuPlxuICAgICAgICA8L3YtdG9vbGJhci1pdGVtcz5cbiAgICAgIDwvdi10b29sYmFyPlxuICAgICAgPHYtbGF5b3V0IFxuICAgICAgICByb3cgXG4gICAgICAgIHdyYXBcbiAgICAgID5cbiAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICB4czEyXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtdmFsaWRhdGU9XCJ7IHJlcXVpcmVkOiB0cnVlIH1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0ubmFtZVwiXG4gICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZXM9XCJlcnJvck1lc3NhZ2VzKCduYW1lJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ25hbWUnKSB9XCJcbiAgICAgICAgICAgIGxhYmVsPVwiQ2xpZW50IE5hbWVcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwiZmEtdXNlclwiXG4gICAgICAgICAgICBkYXRhLXZ2LW5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPCEtLSA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXN3aXRjaFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uYWN0aXZlXCJcbiAgICAgICAgICAgIDpsYWJlbD1cImdldFN0YXR1cyhmb3JtLmFjdGl2ZSlcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PiAtLT5cbiAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICB4czEyIFxuICAgICAgICAgIG1kOCBcbiAgICAgICAgICBvZmZzZXQtbWQyXG4gICAgICAgID5cbiAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICB2LXZhbGlkYXRlPVwieyBlbWFpbDogdHJ1ZSB9XCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmVtYWlsXCJcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cImVycm9yTWVzc2FnZXMoJ2VtYWlsJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ2VtYWlsJykgfVwiXG4gICAgICAgICAgICBsYWJlbD1cIkVtYWlsXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cIm1haWxcIlxuICAgICAgICAgICAgZGF0YS12di1uYW1lPVwiZW1haWxcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLnBob25lXCJcbiAgICAgICAgICAgIGxhYmVsPVwiUGhvbmVcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwicGhvbmVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmFkZHJlc3NfMVwiXG4gICAgICAgICAgICBsYWJlbD1cIkFkZHJlc3MgMVwiXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJsb29rc19vbmVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmFkZHJlc3NfMlwiXG4gICAgICAgICAgICBsYWJlbD1cIkFkZHJlc3MgMlwiXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJsb29rc190d29cIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmNpdHlcIlxuICAgICAgICAgICAgbGFiZWw9XCJDaXR5XCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImxvY2F0aW9uX2NpdHlcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLnN0YXRlXCJcbiAgICAgICAgICAgIGxhYmVsPVwiU3RhdGVcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibWFwXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICB4czEyIFxuICAgICAgICAgIG1kOCBcbiAgICAgICAgICBvZmZzZXQtbWQyXG4gICAgICAgID5cbiAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICB2LXZhbGlkYXRlPVwieyByZWdleDogL15cXGR7NX0oPzpbLVxcc11cXGR7NH0pPyQvIH1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uemlwXCJcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cImVycm9yTWVzc2FnZXMoJ3ppcCcpXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgJ2Vycm9yLS10ZXh0JzogaGFzRXJyb3JzKCd6aXAnKSB9XCJcbiAgICAgICAgICAgIGxhYmVsPVwiWmlwXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cIm1hcmt1bnJlYWRfbWFpbGJveFwiXG4gICAgICAgICAgICBkYXRhLXZ2LW5hbWU9XCJ6aXBcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHRhcmVhXG4gICAgICAgICAgICB2LW1vZGVsPVwiZm9ybS5ub3Rlc1wiXG4gICAgICAgICAgICBjb2xvcj1cInRlYWxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgc2xvdD1cImxhYmVsXCI+XG4gICAgICAgICAgICAgIE5vdGVzIDxzbWFsbD4ob3B0aW9uYWwpPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdi10ZXh0YXJlYT5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtYnRuIFxuICAgICAgICAgICAgOmxvYWRpbmc9XCJmb3JtLmJ1c3lcIiBcbiAgICAgICAgICAgIDpkaXNhYmxlZD1cImVycm9ycy5hbnkoKSB8fCBmb3JtLmJ1c3lcIlxuICAgICAgICAgICAgYmxvY2tcbiAgICAgICAgICAgIGNvbG9yPVwiYWNjZW50XCJcbiAgICAgICAgICAgIEBjbGljaz1cInN1Ym1pdCgpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICBTYXZlIDx2LWljb24gcmlnaHQ+c2F2ZTwvdi1pY29uPlxuICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgPC92LWxheW91dD5cbiAgICA8L3YtY2FyZD5cbiAgPC9tb2RhbC1sYXlvdXQ+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IE1vZGFsTGF5b3V0IGZyb20gXCJMYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZVwiO1xuaW1wb3J0IHZhbGlkYXRpb25FcnJvciBmcm9tIFwiTWl4aW5zL3ZhbGlkYXRpb24tZXJyb3JcIjtcbmltcG9ydCB7IEZvcm0gfSBmcm9tIFwidmZvcm1cIjtcbmltcG9ydCBzd2FsIGZyb20gXCJzd2VldGFsZXJ0MlwiO1xuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgTW9kYWxMYXlvdXRcbiAgfSxcbiAgbWl4aW5zOiBbdmFsaWRhdGlvbkVycm9yXSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICAvKiBBbHdheXMgRGVjbGFyZSBZb3VyIEZvcm0gT2JqZWN0ICovXG4gICAgZm9ybTogbmV3IEZvcm0oe1xuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBlbWFpbDogbnVsbCxcbiAgICAgIHBob25lOiBudWxsLFxuICAgICAgYWRkcmVzc18xOiBudWxsLFxuICAgICAgYWRkcmVzc18yOiBudWxsLFxuICAgICAgY2l0eTogbnVsbCxcbiAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgemlwOiBudWxsLFxuICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgIG5vdGVzOiBudWxsXG4gICAgfSksXG4gIH0pLFxuICBtZXRob2RzOiB7XG4gICAgZ2V0U3RhdHVzKHN0YXR1cykge1xuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICByZXR1cm4gXCJTdGF0dXM6IEFjdGl2ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiU3RhdHVzOiBJbmFjdGl2ZVwiO1xuICAgICAgfVxuICAgIH0sXG4gICAgc3VibWl0KCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgdGhpcy4kdmFsaWRhdG9yLnZhbGlkYXRlQWxsKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgc2VsZi5jcmVhdGVDbGllbnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uTW9kYWwgPSBzd2FsLm1peGluKHtcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogXCJ2LWJ0biBibHVlLWdyZXkgIHN1YmhlYWRpbmcgd2hpdGUtLXRleHRcIixcbiAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRpb25Nb2RhbCh7XG4gICAgICAgICAgICB0aXRsZTogYFZhbGlkYXRpb24gRXJyb3JgLFxuICAgICAgICAgICAgaHRtbDogYDxwIGNsYXNzPVwidGl0bGVcIj5QbGVhc2UgRml4IEZvcm0gRXJyb3JzPC9wPmAsXG4gICAgICAgICAgICB0eXBlOiBcIndhcm5pbmdcIixcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIkJhY2tcIlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNyZWF0ZUNsaWVudCgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHNlbGYuZm9ybS5idXN5ID0gdHJ1ZTtcblxuICAgICAgc2VsZi5mb3JtXG4gICAgICAgIC5wb3N0KHJvdXRlKFwiYXBpLmNsaWVudC5jcmVhdGVcIikpXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICBzZWxmLiR2YWxpZGF0b3IucmVzZXQoKTtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzTW9kYWwgPSBzd2FsLm1peGluKHtcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogXCJ2LWJ0biBibHVlLWdyZXkgIHN1YmhlYWRpbmcgd2hpdGUtLXRleHRcIixcbiAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN1Y2Nlc3NNb2RhbCh7XG4gICAgICAgICAgICB0aXRsZTogXCJTdWNjZXNzIVwiLFxuICAgICAgICAgICAgaHRtbDogYDxwIGNsYXNzPVwidGl0bGVcIj5DbGllbnQgSGFzIEJlZW4gQ3JlYXRlZCE8L3A+YCxcbiAgICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2tcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGYuJG5leHRUaWNrKCgpID0+IHNlbGYuJHJvdXRlci5wdXNoKHsgbmFtZTogXCJjbGllbnRzXCIgfSkpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3JzID0+IHt9KTtcbiAgICB9LFxuICAgIHJlc2V0Rm9ybSgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHNlbGYuZm9ybSA9IG5ldyBGb3JtKHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgZW1haWw6IG51bGwsXG4gICAgICAgIHBob25lOiBudWxsLFxuICAgICAgICBhZGRyZXNzXzE6IG51bGwsXG4gICAgICAgIGFkZHJlc3NfMjogbnVsbCxcbiAgICAgICAgY2l0eTogbnVsbCxcbiAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgIHppcDogbnVsbCxcbiAgICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgICAgbm90ZXM6IG51bGxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVkaXJlY3RCYWNrKCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi4kbmV4dFRpY2soKCkgPT4gc2VsZi4kcm91dGVyLnB1c2goeyBuYW1lOiBcImNsaWVudHNcIiB9KSk7XG4gICAgfVxuICB9XG59O1xuPC9zY3JpcHQ+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVDbGllbnQudnVlIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudi1tZXNzYWdlc19fbWVzc2FnZXtjb2xvcjojZTU3MzczfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYjg4ZWEwNmVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IHpyN0hcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSJdLCJzb3VyY2VSb290IjoiIn0=