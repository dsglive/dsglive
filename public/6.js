webpackJsonp([6],{"1kS7":function(t,e){e.f=Object.getOwnPropertySymbols},"1zB9":function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-app",{attrs:{id:"inspire"}},[n("left-side-bar"),t._v(" "),n("app-nav-bar"),t._v(" "),n("v-content",{staticClass:"white",attrs:{transition:"slide-x-transition",fluid:"","pa-0":"","ma-0":""}},[t._t("default")],2)],1)},r=[];t.exports={render:n,staticRenderFns:r}},"2gGM":function(t,e,n){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function e(){return t.default}:function e(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="./",n(n.s=0)}({0:function(t,e,n){t.exports=n("lVK7")},OMN4:function(t,e){t.exports=n("mtWM")},lVK7:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("OMN4"),i=n.n(r);function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function t(e){return typeof e}:function t(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function s(t){if(null===t||"object"!==a(t))return t;var e=Array.isArray(t)?[]:{};return Object.keys(t).forEach(function(n){e[n]=s(t[n])}),e}function o(t){return Array.isArray(t)?t:[t]}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(){return(c=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function t(e){return typeof e}:function t(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function f(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function d(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function v(t,e,n){return e&&d(t.prototype,e),n&&d(t,n),t}var p=function(){function t(){f(this,t),this.errors={}}return v(t,[{key:"set",value:function t(e,n){"object"===u(e)?this.errors=e:this.set(c({},this.errors,l({},e,o(n))))}},{key:"all",value:function t(){return this.errors}},{key:"has",value:function t(e){return this.errors.hasOwnProperty(e)}},{key:"hasAny",value:function t(){for(var e=this,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return r.some(function(t){return e.has(t)})}},{key:"any",value:function t(){return Object.keys(this.errors).length>0}},{key:"get",value:function t(e){if(this.has(e))return this.getAll(e)[0]}},{key:"getAll",value:function t(e){return o(this.errors[e]||[])}},{key:"only",value:function t(){for(var e=this,n=[],r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return i.forEach(function(t){var r=e.get(t);r&&n.push(r)}),n}},{key:"flatten",value:function t(){return Object.values(this.errors).reduce(function(t,e){return t.concat(e)},[])}},{key:"clear",value:function t(e){var n=this,r={};e&&Object.keys(this.errors).forEach(function(t){t!==e&&(r[t]=n.errors[t])}),this.set(r)}}]),t}();function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function t(e){return typeof e}:function t(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function m(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _(){return(_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function b(t,e,n){return e&&y(t.prototype,e),n&&y(t,n),t}var x=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g(this,t),this.busy=!1,this.successful=!1,this.errors=new p,this.originalData=s(e),Object.assign(this,e)}return b(t,[{key:"fill",value:function t(e){var n=this;this.keys().forEach(function(t){n[t]=e[t]})}},{key:"data",value:function t(){var e=this;return this.keys().reduce(function(t,n){return _({},t,m({},n,e[n]))},{})}},{key:"keys",value:function e(){return Object.keys(this).filter(function(e){return!t.ignore.includes(e)})}},{key:"startProcessing",value:function t(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function t(){this.busy=!1,this.successful=!0}},{key:"clear",value:function t(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function e(){var n=this;Object.keys(this).filter(function(e){return!t.ignore.includes(e)}).forEach(function(t){n[t]=s(n.originalData[t])})}},{key:"get",value:function t(e){return this.submit("get",e)}},{key:"post",value:function t(e){return this.submit("post",e)}},{key:"patch",value:function t(e){return this.submit("patch",e)}},{key:"put",value:function t(e){return this.submit("put",e)}},{key:"delete",value:function t(e){return this.submit("delete",e)}},{key:"submit",value:function t(e,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var s="get"===e?{params:this.data()}:this.data();return new Promise(function(t,o){i.a.request(_({url:r.route(n),method:e,data:s},a)).then(function(e){r.finishProcessing(),t(e)}).catch(function(t){r.busy=!1,t.response&&r.errors.set(r.extractErrors(t.response)),o(t)})})}},{key:"extractErrors",value:function e(n){return n.data&&"object"===h(n.data)?n.data.errors?_({},n.data.errors):n.data.message?{error:n.data.message}:_({},n.data):{error:t.errorMessage}}},{key:"route",value:function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n;return t.routes.hasOwnProperty(n)&&(i=decodeURI(t.routes[n])),"object"!==h(r)&&(r={id:r}),Object.keys(r).forEach(function(t){i=i.replace("{".concat(t,"}"),r[t])}),i}},{key:"onKeydown",value:function t(e){e.target.name&&this.errors.clear(e.target.name)}}]),t}();x.routes={},x.errorMessage="Something went wrong. Please try again.",x.ignore=["busy","successful","errors","originalData"];var k=x,w,C,S;function A(t,e,n,r,i,a,s,o){var l=typeof(t=t||{}).default;"object"!==l&&"function"!==l||(t=t.default);var c="function"==typeof t?t.options:t,u;if(e&&(c.render=e,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),a&&(c._scopeId=a),s?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(s)},c._ssrRegister=u):i&&(u=o?function(){i.call(this,this.$root.$options.shadowRoot)}:i),u)if(c.functional){c._injectStyles=u;var f=c.render;c.render=function t(e,n){return u.call(n),f(e,n)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,u):[u]}return{exports:t,options:c}}var $=!1,O=null,j=null,T=null,U,B=A({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.form.errors.has(t.field)?n("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:t._s(t.form.errors.get(t.field))}}):t._e()},[],!1,null,null,null).exports,R={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function t(){this.dismissible&&this.form.clear()}}},E,F,P,D=!1,M=null,I=null,N=null,L,W=A({name:"alert-error",extends:R,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.form.errors.any()?n("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[t.dismissible?n("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:t.dismiss}},[n("span",{attrs:{"aria-hidden":"true"}},[t._v("×")])]):t._e(),t._v(" "),t._t("default",[t.form.errors.has("error")?n("div",{domProps:{innerHTML:t._s(t.form.errors.get("error"))}}):n("div",{domProps:{innerHTML:t._s(t.message)}})])],2):t._e()},[],!1,null,null,null).exports,V,q,H,z=!1,Z=null,G=null,K=null,Y,J=A({name:"alert-errors",extends:R,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.form.errors.any()?n("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[t.dismissible?n("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:t.dismiss}},[n("span",{attrs:{"aria-hidden":"true"}},[t._v("×")])]):t._e(),t._v(" "),t.message?n("div",{domProps:{innerHTML:t._s(t.message)}}):t._e(),t._v(" "),n("ul",t._l(t.form.errors.flatten(),function(e){return n("li",{domProps:{innerHTML:t._s(e)}})}))]):t._e()},[],!1,null,null,null).exports,Q,X,tt,et=!1,nt=null,rt=null,it=null,at,st=A({name:"alert-success",extends:R,props:{message:{type:String,default:""}}},function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.form.successful?n("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[t.dismissible?n("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:t.dismiss}},[n("span",{attrs:{"aria-hidden":"true"}},[t._v("×")])]):t._e(),t._v(" "),t._t("default",[n("div",{domProps:{innerHTML:t._s(t.message)}})])],2):t._e()},[],!1,null,null,null).exports;n.d(e,"Form",function(){return k}),n.d(e,"Errors",function(){return p}),n.d(e,"HasError",function(){return B}),n.d(e,"AlertError",function(){return W}),n.d(e,"AlertErrors",function(){return J}),n.d(e,"AlertSuccess",function(){return st}),n.d(e,"default",function(){return k})}})},"2xzx":function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-toolbar",{attrs:{color:"primary",fixed:"",app:""}},[n("v-toolbar-side-icon",{staticClass:"white--text",nativeOn:{click:function(e){e.stopPropagation(),t.toggleDrawer()}}}),t._v(" "),t.extension?n("v-toolbar-title",{staticClass:"text-xs-center ml-0 pl-3",class:t.$vuetify.breakpoint.width<=1264&&"pr-3",style:t.$vuetify.breakpoint.width>1264&&"width: 300px",attrs:{slot:"extension"},slot:"extension"},[t.showIcon?n("v-icon",{staticClass:"ml-3 hidden-md-and-down accent"},[t._v("\n      "+t._s(t.icon)+"\n    ")]):t._e(),t._v(" "),n("span",{staticClass:"hidden-md-and-down"},[n("span",{staticClass:"white--text"},[t._v(t._s(t.title))])])],1):n("v-toolbar-title",{staticClass:"text-xs-center"},[t.showIcon?n("v-icon",{staticClass:"ml-3 hidden-md-and-down accent"},[t._v("\n      "+t._s(t.icon)+"\n    ")]):t._e(),t._v(" "),n("span",{staticClass:"hidden-md-and-down"},[n("span",{staticClass:"white--text"},[t._v(t._s(t.title))])])],1),t._v(" "),n("v-spacer"),t._v(" "),t.showLogo?n("img",{staticClass:"hidden-md-and-up",attrs:{src:t.logo}}):t._e(),t._v(" "),n("v-spacer")],1)},r=[];t.exports={render:n,staticRenderFns:r}},"487u":function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("main-layout",[n("v-container",{attrs:{fluid:""}},[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{"d-flex":"",xs12:"",sm7:""}},[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{"d-flex":""}},[n("v-card",{attrs:{light:"",flat:""}},[n("v-card-title",[n("v-text-field",{attrs:{"append-icon":"search",label:"Search Users","single-line":"","hide-details":"",light:""},model:{value:t.search,callback:function(e){t.search=e},expression:"search"}})],1)],1)],1)],1)],1),t._v(" "),n("v-flex",{attrs:{"d-flex":"",xs12:"",sm5:"","child-flex":""}},[n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{staticClass:"white",attrs:{xs12:"","d-flex":""}},[n("v-btn",{attrs:{disabled:!t.$auth.check("admin"),block:"",color:"accent",dark:"",flat:""},on:{click:t.createUser}},[t._v("\n              Create New Account\n              "),n("v-icon",{attrs:{right:"",color:"accent"}},[t._v("\n                fa-user-plus\n              ")])],1)],1),t._v(" "),n("v-flex",{attrs:{xs12:"","d-flex":""}},[n("v-flex",{staticClass:"xs6 white"},[t.selected.length>0?n("v-btn",{attrs:{disabled:!t.$auth.check("admin"),block:"",color:"blue darken-4",dark:"",flat:""},on:{click:t.massActivate}},[n("v-icon",{attrs:{large:"",color:"blue darken-4"}},[t._v("\n                  link\n                ")]),t._v("\n                Activate Selected\n              ")],1):t._e()],1),t._v(" "),n("v-flex",{staticClass:"xs6 white"},[t.selected.length>0?n("v-btn",{attrs:{disabled:!t.$auth.check("admin"),block:"",flat:"",color:"error",dark:""},on:{click:t.massDeactivate}},[n("v-icon",{attrs:{large:"",color:"error"}},[t._v("\n                  link_off\n                ")]),t._v("\n                Deactivate Selected\n              ")],1):t._e()],1)],1)],1)],1)],1),t._v(" "),n("v-data-table",{attrs:{headers:t.headers,items:t.items,search:t.search,pagination:t.pagination,"select-all":"","item-key":"id",expand:""},on:{"update:pagination":function(e){t.pagination=e}},scopedSlots:t._u([{key:"headers",fn:function(e){return[n("tr",[n("th",[n("v-checkbox",{attrs:{"input-value":e.all,indeterminate:e.indeterminate,primary:"","hide-details":""},nativeOn:{click:function(e){return t.toggleAll(e)}}})],1),t._v(" "),t._l(e.headers,function(e){return n("th",{key:e.text,class:["column sortable",t.pagination.descending?"desc":"asc",e.value===t.pagination.sortBy?"name":"",{"text-xs-left":"left"===e.align,"text-xs-right":"right"===e.align,"text-xs-center":"center"===e.align},t.$vuetify.breakpoint.width>=600&&"title"],on:{click:function(n){t.changeSort(e.value)}}},[n("span",[n("v-icon",[t._v("arrow_upward")]),t._v("\n              "+t._s(e.text)+"\n            ")],1)])})],2)]}},{key:"items",fn:function(e){return[n("tr",[n("td",{staticClass:"title text-xs-left",staticStyle:{width:"5%"}},[n("v-checkbox",{attrs:{active:e.selected,"input-value":e.selected},on:{click:function(t){e.selected=!e.selected}}})],1),t._v(" "),n("td",{staticClass:"title text-xs-left",staticStyle:{width:"15%","margin-left":"0px","margin-right":"0px","padding-left":"0px","padding-right":"0px"}},[n("v-btn",{staticClass:"compress--icon",class:{"amber--text":e.expanded,amber:e.expanded,teal:!e.expanded,"teal--text":!e.expanded},attrs:{disabled:!t.$auth.check("admin"),light:"",flat:"",icon:""},on:{click:function(t){e.expanded=!e.expanded}}},[e.expanded?t._e():n("v-icon",[t._v("fa-expand")]),t._v(" "),e.expanded?n("v-icon",[t._v("fa-compress")]):t._e()],1),t._v(" "),n("v-btn",{staticClass:"compress--icon",attrs:{disabled:!t.$auth.check("admin"),flat:"",icon:"",color:"blue"},on:{click:function(n){t.editUser(e.item)}}},[n("v-icon",[t._v("fa-pencil")])],1),t._v(" "),n("v-btn",{staticClass:"compress--icon",attrs:{disabled:!t.$auth.check("admin"),flat:"",icon:"",color:"error"},on:{click:function(n){t.openDialog(e.item)}}},[n("v-icon",[t._v("fa-trash")])],1),t._v(" "),"customer"===e.item.roles[0]?n("v-btn",{staticClass:"compress--icon",attrs:{disabled:!t.$auth.check("admin"),flat:"",icon:"",color:"indigo lighten-2"},on:{click:function(n){t.viewClients(e.item)}}},[n("v-icon",[t._v("fa-users")])],1):t._e()],1),t._v(" "),n("td",{staticClass:"title text-xs-left accent--text"},[t._v("\n            "+t._s(e.item.name)+"\n          ")]),t._v(" "),n("td",{staticClass:"title text-xs-left accent--text"},[n("v-switch",{attrs:{label:t.getStatus(e.item.active)},on:{change:function(n){t.toggleStatus(e.item)}},model:{value:e.item.active,callback:function(n){t.$set(e.item,"active",n)},expression:"props.item.active"}})],1),t._v(" "),n("td",{staticClass:"title text-xs-left accent--text"},t._l(e.item.roles,function(r,i){return n("v-chip",{key:i,attrs:{dark:""}},[n("v-avatar",{class:{"amber lighten-2":"admin"===r&&e.item.id<1e3,primary:"admin"===r&&e.item.id>999,"white--text":!0,"deep-purple":"warehouse"===r,blue:"customer"===r}},[e.item.id<1e3?n("span",{staticClass:"headline"},[t._v("S")]):n("span",{staticClass:"headline"},[t._v(t._s(r.charAt(0).toUpperCase()))])]),t._v(" "),e.item.id<1e3?n("span",[t._v("Super Admin")]):n("span",[t._v(t._s(r))])],1)}))])]}},{key:"pageText",fn:function(e){var n=e.pageStart,r=e.pageStop;return[t._v("\n        From "+t._s(n)+" to "+t._s(r)+"\n      ")]}},{key:"expand",fn:function(e){return[n("v-container",{attrs:{fluid:""}},[n("v-card",{attrs:{light:"",flat:"","text-xs-center":""}},[n("v-card-media",{staticClass:"white--text blue-grey",attrs:{height:"75px"}},[n("v-container",{attrs:{"fill-height":"",fluid:""}},[n("v-layout",{attrs:{"fill-height":""}},[n("v-flex",{attrs:{xs12:"","align-end":"",flexbox:""}},[n("v-avatar",{attrs:{"text-xs-left":""}},[n("img",{attrs:{src:e.item.avatar,alt:e.item.name}})]),t._v(" "),n("span",{staticClass:"headline"},[t._v(t._s(e.item.name))])],1)],1)],1)],1),t._v(" "),n("v-card-title",[n("v-container",{attrs:{fluid:""}},[n("p",{staticClass:"title accent--text"},[t._v("\n                  Account Details\n                ")]),t._v(" "),n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{label:"Username","prepend-icon":"fa-at",light:"",readonly:""},model:{value:e.item.username,callback:function(n){t.$set(e.item,"username",n)},expression:"props.item.username"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.company_name,label:"Company Name",light:"",readonly:"","prepend-icon":"domain"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{label:"Email","prepend-icon":"fa-envelope",light:"",readonly:""},model:{value:e.item.email,callback:function(n){t.$set(e.item,"email",n)},expression:"props.item.email"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{label:"Phone",light:"",readonly:"","prepend-icon":"phone"},model:{value:e.item.phone,callback:function(n){t.$set(e.item,"phone",n)},expression:"props.item.phone"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.first_name,label:"First Name",light:"",readonly:"","prepend-icon":"person"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.last_name,label:"Last Name",light:"",readonly:"","prepend-icon":"people"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.address_1,label:"Address 1",light:"",readonly:"","prepend-icon":"looks_one"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.address_2,label:"Address 2",light:"",readonly:"","prepend-icon":"looks_two"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.city,label:"City",light:"",readonly:"","prepend-icon":"location_city"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.state,label:"State",light:"",readonly:"","prepend-icon":"map"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:"","px-1":""}},[n("v-text-field",{attrs:{value:e.item.zip,label:"Zip",light:"",readonly:"","prepend-icon":"markunread_mailbox"}})],1),t._v(" "),n("v-flex",{attrs:{xs6:""}},[n("v-switch",{attrs:{label:t.getStatus(e.item.active),readonly:""},model:{value:e.item.active,callback:function(n){t.$set(e.item,"active",n)},expression:"props.item.active"}})],1)],1),t._v(" "),n("v-layout",{attrs:{row:"",wrap:""}},[n("v-flex",{attrs:{xs12:""}},[n("v-autocomplete",{attrs:{items:t.roles,readonly:"",label:"Account Type",color:"primary",light:"",chips:"","prepend-icon":"fa-tags"},scopedSlots:t._u([{key:"selection",fn:function(e){return[n("v-chip",{attrs:{selected:e.selected,light:""}},[n("v-avatar",{staticClass:"blue-grey white--text"},[n("span",{staticClass:"headline"},[t._v(t._s(e.item.charAt(0).toUpperCase()))])]),t._v("\n                          "+t._s(e.item)+"\n                        ")],1)]}}]),model:{value:e.item.roles[0],callback:function(n){t.$set(e.item.roles,0,n)},expression:"props.item.roles[0]"}})],1),t._v(" "),n("v-flex",{attrs:{xs12:""}},[n("v-textarea",{attrs:{color:"primary",readonly:""},model:{value:e.item.notes,callback:function(n){t.$set(e.item,"notes",n)},expression:"props.item.notes"}},[n("div",{attrs:{slot:"label"},slot:"label"},[n("span",{staticClass:"title"},[t._v("Notes: ")])])])],1)],1)],1)],1)],1)],1)]}}]),model:{value:t.selected,callback:function(e){t.selected=e},expression:"selected"}},[n("template",{slot:"no-data"},[n("v-alert",{attrs:{value:!0,color:"blue-grey",icon:"warning"}},[t._v("\n          Opps!!! No User Yet!\n          "),n("v-btn",{attrs:{disabled:!t.$auth.check("admin"),color:"white",flat:"",dark:""},on:{click:t.createUser}},[t._v("\n            Create New User\n            "),n("v-icon",{attrs:{right:""}},[t._v("\n              fa-user-plus\n            ")])],1)],1)],1),t._v(" "),n("v-alert",{attrs:{slot:"no-results",value:!0,color:"blue-grey",icon:"warning"},slot:"no-results"},[t._v('\n        Your search for "'+t._s(t.search)+'" found no results.\n      ')])],2),t._v(" "),n("confirm",{attrs:{callback:t.confirmed(t.deleteUser),message:t.message}})],1)],1)},r=[];t.exports={render:n,staticRenderFns:r}},"5t+f":function(t,e,n){var r,i,a,s=!1,o=null,l=null,c=null,u=n("VU/8")(n("EU3A"),n("qd3n"),!1,null,null,null);t.exports=u.exports},"7/uR":function(t,e,n){function r(t){n("AbWS")}var i,a,s,o=!1,l,c,u=null,f=n("VU/8")(n("f+SC"),n("V3I1"),!1,r,"data-v-9d2d5a76",null);t.exports=f.exports},"9qyG":function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,".v-list__group__header__append-icon{color:#fff!important}",""])},AbWS:function(t,e,n){var r=n("Qkdk");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("2ab3e8dc",r,!0,{})},Dd8w:function(t,e,n){"use strict";e.__esModule=!0;var r,i=a(n("woOf"));function a(t){return t&&t.__esModule?t:{default:t}}e.default=i.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},EU3A:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("Dd8w"),i=n.n(r),a=n("7/uR"),s=n.n(a),o=n("NYxO"),l=n("PS5i"),c=n.n(l),u=n("deHX"),f=n.n(u),d,v=Object(o.b)("auth").mapState;e.default={components:{VLink:s.a,InventoryLinks:c.a,InvoiceLinks:f.a},data:function t(){return{drawer:!1}},computed:i()({},v({isAuthenticated:"isAuthenticated"})),created:function t(){var e=this;switch(this.$vuetify.breakpoint.name){case"xs":case"sm":return this.drawer=!1;case"md":case"lg":case"xl":return this.drawer=!0}},mounted:function t(){var e=this;Bus.$on("toggleDrawer",function(){e.drawer=!e.drawer})}}},EepW:function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-dialog",{attrs:{width:"500"},model:{value:t.dialog,callback:function(e){t.dialog=e},expression:"dialog"}},[n("v-card",[n("v-card-title",{staticClass:"headline primary",attrs:{dark:""}},[n("span",{staticClass:"white--text"},[t._v(t._s(t.title))])]),t._v(" "),n("v-card-text",[t._v("\n      "+t._s(t.message)+"\n    ")]),t._v(" "),n("v-divider"),t._v(" "),n("v-card-actions",[n("v-btn",{attrs:{flat:"",color:"secondary"},on:{click:function(e){t.dialog=!1}}},[n("v-icon",{attrs:{left:""}},[t._v("arrow_left")]),t._v("\n        Back\n      ")],1),t._v(" "),n("v-spacer"),t._v(" "),n("v-btn",{attrs:{color:"primary",flat:""},on:{click:function(e){t.confirm()}}},[t._v("\n        "+t._s(t.action)+"\n      ")])],1)],1)],1)},r=[];t.exports={render:n,staticRenderFns:r}},EpMA:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function t(){return{activeColor:"#4DB6AC",linkColor:"#fffff",items:[{action:"collections_bookmark",title:"Inventories",items:[{title:"All Unknown Report",href:"/reports/all-unknown-report",action:"fa-question-circle",auth:["admin"]},{title:"Unknown Customer",href:"/reports/unknown-customer",action:"supervised_user_circle",auth:["admin","warehouse"]},{title:"Unknown Client",href:"/reports/unknown-client",action:"fa-users",auth:["admin","warehouse","customer"]},{title:"Unknown Shipper",href:"/reports/unknown-shipper",action:"fa-ship",auth:["admin","warehouse"]},{title:"Damaged Report",href:"/reports/damaged",action:"broken_image",auth:["admin","warehouse","customer"]},{title:"Repaired Report",href:"/reports/repaired",action:"build",auth:["admin","warehouse","customer"]},{title:"Undelivered Report",href:"/reports/undelivered",action:"fa-truck",auth:["admin","warehouse","customer"]},{title:"Bin Report",href:"/reports/bin",action:"apps",auth:["admin"]},{title:"Customer Report",href:"/reports/customer",action:"local_library",auth:["admin"]},{title:"Client Report",href:"/reports/clients",action:"perm_contact_calendar",auth:["admin"]}]}]}},methods:{isActive:function t(e){return e.href===this.$route.path},loadview:function t(e){this.$router.push({path:""+e.href})}}}},JRPR:function(t,e,n){var r=n("jTAZ");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("19ca4adb",r,!0,{})},KUy4:function(t,e,n){function r(t){n("pxf6")}var i,a,s,o=!1,l,c,u=null,f=n("VU/8")(n("ah7C"),n("487u"),!1,r,"data-v-cf0c2cdc",null);t.exports=f.exports},N76W:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("ockC"),i=n.n(r),a=n("5t+f"),s=n.n(a);e.default={components:{AppNavBar:i.a,LeftSideBar:s.a}}},NpIQ:function(t,e){e.f={}.propertyIsEnumerable},PS5i:function(t,e,n){function r(t){n("oud2")}var i,a,s,o=!1,l,c=null,u=null,f=n("VU/8")(n("EpMA"),n("qkTt"),!1,r,null,null);t.exports=f.exports},Pu7c:function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,".compress--icon[data-v-cf0c2cdc]{margin-left:-5px;margin-right:-5px}",""])},Qkdk:function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,".styleAvatar[data-v-9d2d5a76]{position:relative;margin-left:-55px}",""])},R4wc:function(t,e,n){var r=n("kM2E");r(r.S+r.F,"Object",{assign:n("To3L")})},To3L:function(t,e,n){"use strict";var r=n("lktj"),i=n("1kS7"),a=n("NpIQ"),s=n("sB3e"),o=n("MU5D"),l=Object.assign;t.exports=!l||n("S82l")(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=l({},t)[n]||Object.keys(l({},e)).join("")!=r})?function t(e,n){for(var l=s(e),c=arguments.length,u=1,f=i.f,d=a.f;c>u;)for(var v=o(arguments[u++]),p=f?r(v).concat(f(v)):r(v),h=p.length,m=0,_;h>m;)d.call(v,_=p[m++])&&(l[_]=v[_]);return l}:l},UuFJ:function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.$auth.check("admin")?n("v-list",{staticClass:"blue-grey",attrs:{dark:""}},t._l(t.items,function(e){return n("v-list-group",{key:e.title,attrs:{"no-action":"","active-class":"accent--text"},model:{value:e.active,callback:function(n){t.$set(e,"active",n)},expression:"item.active"}},[n("v-list-tile",{attrs:{slot:"activator"},slot:"activator"},[n("v-list-tile-action",[n("v-icon",{attrs:{color:"white"}},[t._v(t._s(e.action))])],1),t._v(" "),n("v-list-tile-content",[n("v-list-tile-title",[t._v(t._s(e.title))])],1)],1),t._v(" "),t._l(e.items,function(e){return n("v-list-tile",{key:e.title,style:{color:t.isActive(e)?t.activeColor:t.linkColor},on:{click:function(n){t.loadview(e)}}},[n("v-list-tile-content",[n("v-list-tile-title",[t._v(t._s(e.title))])],1),t._v(" "),n("v-list-tile-action",[n("v-icon",{attrs:{color:t.isActive(e)?"teal":"white"}},[t._v(t._s(e.action))])],1)],1)})],2)})):t._e()},r=[];t.exports={render:n,staticRenderFns:r}},V3I1:function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-list-tile",{class:[{styleAvatar:t.avatarOn}],attrs:{avatar:t.avatarOn},nativeOn:{click:function(e){t.navigate(t.href)}}},[t.iconOn&&!t.avatarOn?n("v-list-tile-action",[n("v-icon",{style:{color:t.isActive?t.activeColor:t.iconColor,cursor:t.href?"pointer":""}},[t._v(t._s(t.icon))])],1):t._e(),t._v(" "),t.iconOn&&t.avatarOn?n("v-list-tile-avatar",[n("img",{attrs:{src:t.avatar,alt:""}})]):t._e(),t._v(" "),n("v-list-tile-content",[n("v-list-tile-title",{style:{color:t.isActive?t.activeColor:t.linkColor}},[n("span",{style:{cursor:t.href?"pointer":""}},[t._v(t._s(t.title))])])],1),t._v(" "),t.iconOn&&t.avatarOn?n("v-list-tile-action",[n("v-icon",{style:{color:t.isActive?t.activeColor:t.iconColor,cursor:t.href?"pointer":""}},[t._v(t._s(t.icon))])],1):t._e()],1)},r=[];t.exports={render:n,staticRenderFns:r}},V3tA:function(t,e,n){n("R4wc"),t.exports=n("FeBl").Object.assign},VA5K:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function t(){return{activeColor:"#4DB6AC",linkColor:"#fffff",items:[{action:"card_membership",title:"Invoices",items:[{title:"Generate Invoice",href:"/invoices/generate",action:"schedule"},{title:"Invoices",href:"/invoices",action:"all_inbox"},{title:"Weekly Report",href:"/reports/total-all-customer-invoice",action:"picture_as_pdf"},{title:"Customer Invoice Report",href:"/reports/customer-invoice-report",action:"perm_contact_calendar"},{title:"Client Invoice Report",href:"/reports/client-invoice-report",action:"perm_identity"}]}]}},methods:{isActive:function t(e){return e.href===this.$route.path},loadview:function t(e){this.$router.push({path:""+e.href})}}}},ah7C:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n("Xxa5"),i=n.n(r),a=n("exGp"),s=n.n(a),o=n("onlB"),l=n.n(o),c=n("gvVL"),u=n("2gGM"),f=n.n(u),d=n("e7x4"),v=n.n(d),p=n("uzl1"),h=n.n(p),m=n("q+8Z");e.default={components:{MainLayout:l.a,Confirm:h.a},mixins:[c.a,m.a],data:function t(){return{contentClass:{grey:!0,"lighten-4":!0,"accent--text":!0},dialog:!1,headers:[{text:"Actions",value:"actions",align:"left",sortable:!1},{text:"Name",value:"name",align:"left",sortable:!0},{text:"Status",value:"active",align:"left",sortable:!0},{text:"Roles",value:"roles",align:"left",sortable:!1}],items:[],selected:[],pagination:{sortBy:"name"},usersForm:new u.Form({}),toggleForm:new u.Form({toggle:!1,user_id:null}),search:"",roles:[],permissions:[],rolesForm:new u.Form({roles:[]}),deleteUserForm:new u.Form({user_id:null}),domain:window.location.hostname,message:"Warning! Deleting This User Record Has Some Repercusion To The Sytem, It Will Delete All Associating Clients At the Same Time Some Features That Reference To This User Record Will Break its Functionality Such As DSG, Logistics, Invoicing. Only Proceed If You Think There Will Be No Side Effect Of What You Will Be Doing!"}},watch:{items:{handler:function t(e){},deep:!0},roles:function t(e){},permissions:function t(e){}},mounted:function t(){var e=this;this.fetchRoles(),this.fetchUsers()},methods:{editUser:function t(e){vm.$router.push({name:"edit-user",params:{id:""+e.id}})},createUser:function t(){vm.$router.push({name:"create-user"})},toggleStatus:function t(e){var n=this,r;if(this.toggleForm.toggle=e.active,this.toggleForm.user_id=e.id,e.id<=1e3)return v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Oops! Forbidden Action!",html:'<p class="title">Cannot Modify Super Admin Account Type!</p>',type:"warning",confirmButtonText:"Back"}),void(e.active=!0);axios.post(route("api.user.toggleStatus"),this.toggleForm).then(function(t){console.log(t.data)}).catch(function(t){var e;v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Oops! Forbidden Action!",html:'<p class="title">'+t.response.data.message+"</p>",type:"warning",confirmButtonText:"Back"})})},getStatus:function t(e){return e?"Active":"Inactive"},fetchRoles:function(){var t=s()(i.a.mark(function t(){var e,n,r,a;return i.a.wrap(function t(i){for(;;)switch(i.prev=i.next){case 0:return e=this,i.prev=1,i.next=4,axios.get(route("api.roles.index"));case 4:n=i.sent,e.roles=n.data,i.next=14;break;case 8:i.prev=8,i.t0=i.catch(1),r=i.t0.errors,a=i.t0.message,r&&console.log("fetchRoles:errors",r),a&&console.log("fetchRoles:error-message",a);case 14:case"end":return i.stop()}},t,this,[[1,8]])}));function e(){return t.apply(this,arguments)}return e}(),fetchUsers:function(){var t=s()(i.a.mark(function t(){var e,n,r,a;return i.a.wrap(function t(i){for(;;)switch(i.prev=i.next){case 0:return(e=this).usersForm.busy=!0,i.prev=2,i.next=5,axios.post(route("api.user.index"),e.usersForm);case 5:n=i.sent,e.items=n.data.data,e.usersForm=new u.Form({}),i.next=17;break;case 10:i.prev=10,i.t0=i.catch(2),r=i.t0.errors,a=i.t0.message,r&&e.usersForm.errors.set(r),e.usersForm.busy=!1;case 17:case"end":return i.stop()}},t,this,[[2,10]])}));function e(){return t.apply(this,arguments)}return e}(),deleteUser:function t(e){var n=this;n.deleteUserForm.user_id=e.id;var r=_.findIndex(n.items,{id:e.id});axios.post(route("api.user.delete"),n.deleteUserForm).then(function(t){var e;!0===t.data.status&&(n.$delete(n.items,r),v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success",html:'<p class="title">User Deleted!</p>',type:"success",confirmButtonText:"Back"}))}).catch(function(t){var e;v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Oops! Forbidden Action!",html:'<p class="title">'+t.response.data.message+"</p>",type:"warning",confirmButtonText:"Back"})})},viewClients:function t(e){this.$router.push({name:"customer-clients",params:{customer:e.id}})},toProperCase:function t(e){var n;return e.replace(/_/g," ").replace(/\w\S*/g,function(t){return t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()})},massDeactivate:function(){var t=s()(i.a.mark(function t(){var e,n,r,a,s,o,l,c;return i.a.wrap(function t(i){for(;;)switch(i.prev=i.next){case 0:return e=this,n=_.map(e.selected,"id"),r=new u.Form({selected:n}),i.prev=3,i.next=6,axios.post(route("api.user.massDeactivate"),r);case 6:a=i.sent,s=a.data.updated,console.log(s),_.map(s,function(t){var n=_.findIndex(e.items,{id:t});e.items[n].active=!1}),(o=v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1}))({title:"Success",html:'<p class="title">'+a.data.message+"</p>",type:"success",confirmButtonText:"Back"}),i.next=20;break;case 14:i.prev=14,i.t0=i.catch(3),l=i.t0.errors,c=i.t0.message,l&&console.log(l),c&&console.log(c);case 20:case"end":return i.stop()}},t,this,[[3,14]])}));function e(){return t.apply(this,arguments)}return e}(),massActivate:function(){var t=s()(i.a.mark(function t(){var e,n,r,a,s,o,l,c;return i.a.wrap(function t(i){for(;;)switch(i.prev=i.next){case 0:return e=this,n=_.map(e.selected,"id"),r=new u.Form({selected:n}),i.prev=3,i.next=6,axios.post(route("api.user.massActivate"),r);case 6:a=i.sent,s=a.data.updated,console.log(s),_.map(s,function(t){var n=_.findIndex(e.items,{id:t});e.items[n].active=!0}),(o=v.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1}))({title:"Success",html:'<p class="title">'+a.data.message+"</p>",type:"success",confirmButtonText:"Back"}),i.next=20;break;case 14:i.prev=14,i.t0=i.catch(3),l=i.t0.errors,c=i.t0.message,l&&console.log(l),c&&console.log(c);case 20:case"end":return i.stop()}},t,this,[[3,14]])}));function e(){return t.apply(this,arguments)}return e}(),deleteSelected:function t(){var e=this,n=_.difference(this.items,this.selected);this.items=n,this.selected=[]},toggleAll:function t(){this.selected.length?this.selected=[]:this.selected=this.items.slice()},changeSort:function t(e){this.pagination.sortBy===e?this.pagination.descending=!this.pagination.descending:(this.pagination.sortBy=e,this.pagination.descending=!1)}}}},deHX:function(t,e,n){function r(t){n("juyK")}var i,a,s,o=!1,l,c=null,u=null,f=n("VU/8")(n("VA5K"),n("UuFJ"),!1,r,null,null);t.exports=f.exports},"f+SC":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{dark:{type:Boolean,default:function t(){return!1}},href:{type:String,required:!0},title:{type:String,required:!0},avatar:{type:String,default:function t(){return""}},icon:{type:String,default:function t(){return""}},iconColor:{type:String,default:function t(){return this.dark?"#fafafa":"#78909C"}},linkColor:{type:String,default:function t(){return this.dark?"#fafafa":"#e3b500"}},activeColor:{type:String,default:function t(){return"#f5c300"}}},computed:{isActive:function t(){return this.href===this.$route.path},isDark:function t(){return!0===this.dark},avatarOn:function t(){return!!this.avatar},iconOn:function t(){return!!this.icon}},methods:{navigate:function t(e){var n=this;this.isURL(e)?window.open(e):this.$router.push({path:""+e})},isURL:function t(e){var n,r=new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i");return e.length<2083&&r.test(e)}}}},fHhQ:function(t,e,n){var r=n("mpHJ");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("75b81cfe",r,!0,{})},g4we:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function t(){return{extension:!1,showLogo:!1,logo:"/img/logo.png",showIcon:!1,title:"DSG Live"}},created:function t(){var e=this;Bus.$on("header-extension-visible",function(t){e.extension=t})},methods:{toggleDrawer:function t(){Bus.$emit("toggleDrawer")}}}},gvVL:function(t,e,n){"use strict";e.a={methods:{errorMessages:function t(e){return this.errors.collect(e).concat(this.form.errors.only(e))},hasErrors:function t(e){var n;return this.errors.collect(e).concat(this.form.errors.only(e)).length>0}}}},jTAZ:function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,"",""])},juyK:function(t,e,n){var r=n("r8er");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("7fe0f36b",r,!0,{})},mpHJ:function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,"",""])},ockC:function(t,e,n){function r(t){n("JRPR")}var i,a,s,o=!1,l,c=null,u=null,f=n("VU/8")(n("g4we"),n("2xzx"),!1,r,null,null);t.exports=f.exports},onlB:function(t,e,n){var r,i,a,s=!1,o=null,l=null,c=null,u=n("VU/8")(n("N76W"),n("1zB9"),!1,null,null,null);t.exports=u.exports},oud2:function(t,e,n){var r=n("9qyG");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("ad00c2fe",r,!0,{})},pxf6:function(t,e,n){var r=n("Pu7c");"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);var i=n("rjj0")("3c6ffdcb",r,!0,{})},"q+8Z":function(t,e,n){"use strict";e.a={methods:{confirmed:function t(e){var n=this;return function(t){e(t)}},openDialog:function t(e){Bus.$emit("open-confirmation",e)}}}},qd3n:function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-navigation-drawer",{staticClass:"blue-grey",attrs:{clipped:t.$vuetify.breakpoint.width<=1264&&!0,fixed:"","hide-overlay":"",app:""},model:{value:t.drawer,callback:function(e){t.drawer=e},expression:"drawer"}},[n("v-list",{staticClass:"blue-grey",attrs:{dense:""}},[t.$auth.check("admin")?n("v-subheader",{staticClass:"white--text"},[t._v("Admin Area")]):t._e(),t._v(" "),t.$auth.check("warehouse")?n("v-subheader",{staticClass:"white--text"},[t._v("Warehouse Area")]):t._e(),t._v(" "),t.$auth.check("customer")?n("v-subheader",{staticClass:"white--text"},[t._v("Customer Area")]):t._e(),t._v(" "),t.$auth.check(["admin","customer","warehouse"])?n("v-link",{attrs:{title:"Dashboard",href:"/dashboard",icon:"fa-tachometer","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check(["admin"])?n("v-link",{attrs:{title:"Tutorials",href:"/tutorials",icon:"movie","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Users",href:"/users",icon:"supervised_user_circle","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Shippers",href:"/shippers",icon:"fa-ship","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Rates",href:"/rates",icon:"attach_money","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Bins",href:"/bins",icon:"view_module","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check(["warehouse","admin"])?n("v-link",{attrs:{title:"Warehouse",href:"/warehouse",icon:"location_city","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check(["admin","warehouse"])?n("v-link",{attrs:{title:"Receiving",href:"/receiving",icon:"receipt","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check(["admin","warehouse"])?n("v-link",{attrs:{title:"Archived",href:"/archived/dsg",icon:"archive","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),n("inventory-links"),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Tickets",href:"/tickets",icon:"confirmation_number","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Miscellaneous",href:"/miscellaneous",icon:"note_add","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check("admin")?n("v-link",{attrs:{title:"Payments",href:"/payments",icon:"attach_money","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),n("invoice-links"),t._v(" "),t.$auth.check(["customer"])?n("v-link",{attrs:{title:"Clients",href:"/clients",icon:"business_center","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check(["customer"])?n("v-link",{attrs:{title:"Invoices",href:"/invoices",icon:"all_inbox","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check()?n("v-link",{attrs:{title:"Settings",href:"/settings",icon:"fa-cogs","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e(),t._v(" "),t.$auth.check()?n("v-link",{attrs:{title:"Logout",href:"/logout",icon:"power_settings_new","link-color":"white","active-color":"#4db6ac","icon-color":"#fafafa"}}):t._e()],1)],1)},r=[];t.exports={render:n,staticRenderFns:r}},qkTt:function(t,e){var n=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-list",{staticClass:"blue-grey",attrs:{dark:""}},t._l(t.items,function(e){return n("v-list-group",{key:e.title,attrs:{"no-action":"","active-class":"accent--text"},model:{value:e.active,callback:function(n){t.$set(e,"active",n)},expression:"item.active"}},[n("v-list-tile",{attrs:{slot:"activator"},slot:"activator"},[n("v-list-tile-action",[n("v-icon",{attrs:{color:"white"}},[t._v(t._s(e.action))])],1),t._v(" "),n("v-list-tile-content",[n("v-list-tile-title",[t._v(t._s(e.title))])],1)],1),t._v(" "),t._l(e.items,function(e){return t.$auth.check(e.auth)?n("v-list-tile",{key:e.title,style:{color:t.isActive(e)?t.activeColor:t.linkColor},on:{click:function(n){t.loadview(e)}}},[n("v-list-tile-content",[n("v-list-tile-title",[t._v(t._s(e.title))])],1),t._v(" "),n("v-list-tile-action",[n("v-icon",{attrs:{color:t.isActive(e)?"teal":"white"}},[t._v(t._s(e.action))])],1)],1):t._e()})],2)}))},r=[];t.exports={render:n,staticRenderFns:r}},"r8/K":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{callback:{type:Function,required:!0},message:{type:String,default:function t(){return"Deleting This Dsg Record , Will Also Delete All Associated Data Attach To It Such As Images and Items. Also Note That Some Data In The System That Exist Which Reference To This Dsg Record Will Break its Functionality Such As Invoicing. Only Proceed If You Think There Will Be No Side Effect Of What You Will Be Doing!"}},title:{type:String,default:function t(){return"Are You Sure You Want To Delete This?"}},action:{type:String,default:function t(){return"Yes , I Understand"}}},data:function t(){return{dialog:!1,params:null}},mounted:function t(){var e=this;Bus.$on("open-confirmation",function(t){e.dialog=!0,e.params=t})},methods:{closeDialog:function t(){this.dialog=!1},confirm:function t(){this.callback&&(void 0!=this.params?(this.dialog=!1,this.callback(this.params)):(this.dialog=!1,this.callback()))}}}},r8er:function(t,e,n){(e=t.exports=n("FZ+f")(!1)).push([t.i,".v-list__group__header__append-icon{color:#fff!important}",""])},rjj0:function(t,e,n){var r="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!r)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i=n("tTVk"),a={},s=r&&(document.head||document.getElementsByTagName("head")[0]),o=null,l=0,c=!1,u=function(){},f=null,d="data-vue-ssr-id",v="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function p(t){for(var e=0;e<t.length;e++){var n=t[e],r=a[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(m(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{for(var s=[],i=0;i<n.parts.length;i++)s.push(m(n.parts[i]));a[n.id]={id:n.id,refs:1,parts:s}}}}function h(){var t=document.createElement("style");return t.type="text/css",s.appendChild(t),t}function m(t){var e,n,r=document.querySelector("style["+d+'~="'+t.id+'"]');if(r){if(c)return u;r.parentNode.removeChild(r)}if(v){var i=l++;r=o||(o=h()),e=y.bind(null,r,i,!1),n=y.bind(null,r,i,!0)}else r=h(),e=b.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function r(i){if(i){if(i.css===t.css&&i.media===t.media&&i.sourceMap===t.sourceMap)return;e(t=i)}else n()}}t.exports=function(t,e,n,r){c=n,f=r||{};var s=i(t,e);return p(s),function e(n){for(var r=[],o=0;o<s.length;o++){var l=s[o],c;(c=a[l.id]).refs--,r.push(c)}n?p(s=i(t,n)):s=[];for(var o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete a[c.id]}}}};var _=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")}),g;function y(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(e,i);else{var a=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(a,s[e]):t.appendChild(a)}}function b(t,e){var n=e.css,r=e.media,i=e.sourceMap;if(r&&t.setAttribute("media",r),f.ssrId&&t.setAttribute(d,e.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},tTVk:function(t,e){t.exports=function t(e,n){for(var r=[],i={},a=0;a<n.length;a++){var s=n[a],o=s[0],l,c,u,f={id:e+":"+a,css:s[1],media:s[2],sourceMap:s[3]};i[o]?i[o].parts.push(f):r.push(i[o]={id:o,parts:[f]})}return r}},uzl1:function(t,e,n){function r(t){n("fHhQ")}var i,a,s,o=!1,l,c=null,u=null,f=n("VU/8")(n("r8/K"),n("EepW"),!1,r,null,null);t.exports=f.exports},woOf:function(t,e,n){t.exports={default:n("V3tA"),__esModule:!0}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,