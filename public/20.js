webpackJsonp([20],{"0iHF":function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},"1LfK":function(e,t,r){var i,n,a,s=!1,o=null,l=null,c=null,u=r("VU/8")(r("Lm9M"),r("1pgq"),!1,null,null,null);e.exports=u.exports},"1Wvq":function(e,t,r){var i,n;i=this,n=function(){"use strict";var e=function e(t){var r=new XMLHttpRequest;return r.open(t.method||"GET",t.url),r.responseType="json",t.headers&&Object.keys(t.headers).forEach(function(e){r.setRequestHeader(e,t.headers[e])}),r},t=function e(t,r){return new Promise(function(e,i){t.onload=function(){if(t.status>=200&&t.status<300){var r;try{r=JSON.parse(t.response)}catch(e){r=t.response}e(r)}else i(t.response)},t.onerror=function(){return i(t.response)},t.send(JSON.stringify(r))})},r=function e(t,r){var i=new FormData;for(var n in r)i.append(n,r[n]);return new Promise(function(e,r){t.onload=function(){if(t.status>=200&&t.status<300){var i;try{i=JSON.parse(t.response)}catch(e){i=t.response}e(i)}else r(t.response)},t.onerror=function(){return r(t.response)},t.send(i)})};function i(r){var i=e(r);return t(i,r.body)}var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}();function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=function(){function t(e,r){a(this,t),this.file=e,this.options=r}return n(t,[{key:"createChunks",value:function e(){this.chunks=[];for(var t=0,r=this.chunkSize;t<this.fileSize;)this.chunks.push({blob:this.file.file.slice(t,r),startOffset:t,active:!1,retries:this.maxRetries}),r=(t=r)+this.chunkSize}},{key:"updateFileProgress",value:function e(){this.file.progress=this.progress}},{key:"pause",value:function e(){this.file.active=!1,this.stopChunks()}},{key:"stopChunks",value:function e(){this.chunksUploading.forEach(function(e){e.xhr.abort(),e.active=!1})}},{key:"resume",value:function e(){this.file.active=!0,this.startChunking()}},{key:"upload",value:function e(){var t=this;return this.promise=new Promise(function(e,r){t.resolve=e,t.reject=r}),this.start(),this.promise}},{key:"start",value:function e(){var t=this;i({method:"POST",headers:Object.assign({},this.headers,{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.startBody,{phase:"start",mime_type:this.fileType,size:this.fileSize,name:this.fileName})}).then(function(e){if("success"!==e.status)return t.file.response=e,t.reject("server");t.sessionId=e.data.session_id,t.chunkSize=e.data.end_offset,t.createChunks(),t.startChunking()}).catch(function(e){t.file.response=e,t.reject("server")})}},{key:"startChunking",value:function e(){for(var t=0;t<this.maxActiveChunks;t++)this.uploadNextChunk()}},{key:"uploadNextChunk",value:function e(){if(this.file.active){if(this.hasChunksToUpload)return this.uploadChunk(this.chunksToUpload[0]);if(0===this.chunksUploading.length)return this.finish()}}},{key:"uploadChunk",value:function t(i){var n=this;i.progress=0,i.active=!0,this.updateFileProgress(),i.xhr=e({method:"POST",headers:this.headers,url:this.action}),i.xhr.upload.addEventListener("progress",function(e){e.lengthComputable&&(i.progress=Math.round(e.loaded/e.total*100))},!1),r(i.xhr,Object.assign(this.uploadBody,{phase:"upload",session_id:this.sessionId,start_offset:i.startOffset,chunk:i.blob})).then(function(e){if(i.active=!1,"success"===e.status)i.uploaded=!0;else if(i.retries--<=0)return n.stopChunks(),n.reject("upload");n.uploadNextChunk()}).catch(function(){if(i.active=!1,i.retries--<=0)return n.stopChunks(),n.reject("upload");n.uploadNextChunk()})}},{key:"finish",value:function e(){var t=this;this.updateFileProgress(),i({method:"POST",headers:Object.assign({},this.headers,{"Content-Type":"application/json"}),url:this.action,body:Object.assign(this.finishBody,{phase:"finish",session_id:this.sessionId})}).then(function(e){if(t.file.response=e,"success"!==e.status)return t.reject("server");t.resolve(e)}).catch(function(e){t.file.response=e,t.reject("server")})}},{key:"maxRetries",get:function e(){return parseInt(this.options.maxRetries)}},{key:"maxActiveChunks",get:function e(){return parseInt(this.options.maxActive)}},{key:"fileType",get:function e(){return this.file.type}},{key:"fileSize",get:function e(){return this.file.size}},{key:"fileName",get:function e(){return this.file.name}},{key:"action",get:function e(){return this.options.action||null}},{key:"startBody",get:function e(){return this.options.startBody||{}}},{key:"uploadBody",get:function e(){return this.options.uploadBody||{}}},{key:"finishBody",get:function e(){return this.options.finishBody||{}}},{key:"headers",get:function e(){return this.options.headers||{}}},{key:"readyToUpload",get:function e(){return!!this.chunks}},{key:"progress",get:function e(){var t=this,r=this.chunksUploaded.length/this.chunks.length*100,i=this.chunksUploading.reduce(function(e,r){return e+(0|r.progress)/t.chunks.length},0);return Math.min(r+i,100)}},{key:"chunksToUpload",get:function e(){return this.chunks.filter(function(e){return!e.active&&!e.uploaded})}},{key:"hasChunksToUpload",get:function e(){return this.chunksToUpload.length>0}},{key:"chunksUploading",get:function e(){return this.chunks.filter(function(e){return!!e.xhr&&!!e.active})}},{key:"chunksUploaded",get:function e(){return this.chunks.filter(function(e){return!!e.uploaded})}}]),t}(),o={methods:{change:function e(t){this.$destroy(),this.$parent.addInputFile(t.target),new this.constructor({parent:this.$parent,el:this.$el})}}},l=o,c=function e(){var t=this,r=t.$createElement,i;return(t._self._c||r)("input",{attrs:{type:"file",name:t.$parent.name,id:t.$parent.inputId||t.$parent.name,accept:t.$parent.accept,capture:t.$parent.capture,webkitdirectory:t.$parent.directory&&t.$parent.features.directory,directory:t.$parent.directory&&t.$parent.features.directory,multiple:t.$parent.multiple&&t.$parent.features.html5},on:{change:t.change}})},u,d,p=void 0,m=void 0,f=void 0,v=!1;function h(e,t,r,i,n,a,s,o){var l=r||{};return l.render||(l.render=e.render,l.staticRenderFns=e.staticRenderFns,l._compiled=!0,n&&(l.functional=!0)),l._scopeId=i,l}function g(){var e=document.head||document.getElementsByTagName("head")[0],t=g.styles||(g.styles={}),r="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());return function i(n,a){if(!document.querySelector('style[data-vue-ssr-id~="'+n+'"]')){var s=r?a.media||"default":n,o=t[s]||(t[s]={ids:[],parts:[],element:void 0});if(!o.ids.includes(n)){var l=a.source,c=o.ids.length;if(o.ids.push(n),a.map&&(l+="\n/*# sourceURL="+a.map.sources[0]+" */",l+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a.map))))+" */"),r&&(o.element=o.element||document.querySelector("style[data-group="+s+"]")),!o.element){var u=o.element=document.createElement("style");u.type="text/css",a.media&&u.setAttribute("media",a.media),r&&(u.setAttribute("data-group",s),u.setAttribute("data-next-index","0")),e.appendChild(u)}if(r&&(c=parseInt(o.element.getAttribute("data-next-index")),o.element.setAttribute("data-next-index",c+1)),o.element.styleSheet)o.parts.push(l),o.element.styleSheet.cssText=o.parts.filter(Boolean).join("\n");else{var d=document.createTextNode(l),p=o.element.childNodes;p[c]&&o.element.removeChild(p[c]),p.length?o.element.insertBefore(d,p[c]):o.element.appendChild(d)}}}}}var _=h({render:c,staticRenderFns:[]},void 0,void 0===o?{}:o,void 0,!1,void 0,g,"undefined"!=typeof __vue_create_injector_ssr__?__vue_create_injector_ssr__:function(){}),y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function x(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}var k={headers:{},action:"",minSize:1048576,maxActive:3,maxRetries:5,handler:s},w={components:{InputFile:_},props:{inputId:{type:String},name:{type:String,default:"file"},accept:{type:String},capture:{},multiple:{type:Boolean},maximum:{type:Number,default:function e(){return this.multiple?0:1}},addIndex:{type:[Boolean,Number]},directory:{type:Boolean},postAction:{type:String},putAction:{type:String},customAction:{type:Function},headers:{type:Object,default:Object},data:{type:Object,default:Object},timeout:{type:Number,default:0},drop:{default:!1},dropDirectory:{type:Boolean,default:!0},size:{type:Number,default:0},extensions:{default:Array},value:{type:Array,default:Array},thread:{type:Number,default:1},chunkEnabled:{type:Boolean,default:!1},chunk:{type:Object,default:function e(){return k}}},data:function e(){return{files:this.value,features:{html5:!0,directory:!1,drag:!1},active:!1,dropActive:!1,uploading:0,destroy:!1}},mounted:function e(){var t=document.createElement("input");t.type="file",t.multiple=!0,window.FormData&&t.files?("boolean"!=typeof t.webkitdirectory&&"boolean"!=typeof t.directory||(this.features.directory=!0),this.features.html5&&void 0!==t.ondrop&&(this.features.drop=!0)):this.features.html5=!1,this.maps={},this.$nextTick(function(){this.$parent&&this.$parent.$forceUpdate(),this.watchDrop(this.drop)})},beforeDestroy:function e(){this.destroy=!0,this.active=!1},computed:{uploaded:function e(){for(var t=void 0,r=0;r<this.files.length;r++)if((t=this.files[r]).fileObject&&!t.error&&!t.success)return!1;return!0},chunkOptions:function e(){return Object.assign(k,this.chunk)},className:function e(){return["file-uploads",this.features.html5?"file-uploads-html5":"file-uploads-html4",this.features.directory&&this.directory?"file-uploads-directory":void 0,this.features.drop&&this.drop?"file-uploads-drop":void 0]}},watch:{active:function e(t){this.watchActive(t)},dropActive:function e(){this.$parent&&this.$parent.$forceUpdate()},drop:function e(t){this.watchDrop(t)},value:function e(t){if(this.files!==t){this.files=t;var r=this.maps;this.maps={};for(var i=0;i<this.files.length;i++){var n=this.files[i];this.maps[n.id]=n}for(var a in this.maps){var s=this.maps[a],o=r[a];s!==o&&this.emitFile(s,o)}for(var l in r)this.maps[l]||this.emitFile(void 0,r[l])}}},methods:{clear:function e(){if(this.files.length){var t=this.files;this.files=[],this.maps={},this.emitInput();for(var r=0;r<t.length;r++)this.emitFile(void 0,t[r])}return!0},get:function e(t){return!!t&&("object"===(void 0===t?"undefined":b(t))?this.maps[t.id]||!1:this.maps[t]||!1)},add:function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.addIndex,i=t,n=i instanceof Array;n||(i=[i]);for(var a=[],s=0;s<i.length;s++){var o=i[s];this.features.html5&&o instanceof Blob&&(o={file:o,size:o.size,name:o.webkitRelativePath||o.relativePath||o.name||"unknown",type:o.type});var l=!1;if(!1===o.fileObject||(o.fileObject?l=!0:"undefined"!=typeof Element&&o.el instanceof Element?l=!0:"undefined"!=typeof Blob&&o.file instanceof Blob&&(l=!0)),l&&((o=y({fileObject:!0,size:-1,name:"Filename",type:"",active:!1,error:"",success:!1,putAction:this.putAction,postAction:this.postAction,timeout:this.timeout},o,{response:{},progress:"0.00",speed:0})).data=y({},this.data,o.data?o.data:{}),o.headers=y({},this.headers,o.headers?o.headers:{})),o.id||(o.id=Math.random().toString(36).substr(2)),!this.emitFilter(o,void 0)){if(this.maximum>1&&a.length+this.files.length>=this.maximum)break;if(a.push(o),1===this.maximum)break}}if(!a.length)return!1;1===this.maximum&&this.clear();var c=void 0;!0===r||0===r?c=a.concat(this.files):r?(c=a.concat([])).splice(r,0,a):c=this.files.concat(a),this.files=c;for(var u=0;u<a.length;u++){var d=a[u];this.maps[d.id]=d}this.emitInput();for(var p=0;p<a.length;p++)this.emitFile(a[p],void 0);return n?a:a[0]},addInputFile:function e(t){var r=[];if(t.files)for(var i=0;i<t.files.length;i++){var n=t.files[i];r.push({size:n.size,name:n.webkitRelativePath||n.relativePath||n.name,type:n.type,file:n,el:t})}else{var a=t.value.replace(/\\/g,"/").split("/");r.push({name:a[a.length-1],el:t})}return this.add(r)},addDataTransfer:function e(t){var r=this,i=[];if(t.items&&t.items.length){for(var n=[],a=0;a<t.items.length;a++){var s=t.items[a];(s=s.getAsEntry?s.getAsEntry()||s.getAsFile():s.webkitGetAsEntry&&s.webkitGetAsEntry()||s.getAsFile())&&n.push(s)}return new Promise(function(e,t){var a;(function t(a){var s=n[a];if(!s||r.maximum>0&&i.length>=r.maximum)return e(r.add(i));r.getEntry(s).then(function(e){i.push.apply(i,x(e)),t(a+1)})})(0)})}if(t.files.length){for(var o=0;o<t.files.length&&(i.push(t.files[o]),!(this.maximum>0&&i.length>=this.maximum));o++);return Promise.resolve(this.add(i))}return Promise.resolve([])},getEntry:function e(t){var r=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return new Promise(function(e,n){if(t.isFile)t.file(function(t){e([{size:t.size,name:i+t.name,type:t.type,file:t}])});else if(t.isDirectory&&r.dropDirectory){var a=[],s=t.createReader(),o;(function n(){s.readEntries(function(s){var o;(function o(l){return!s[l]&&0===l||r.maximum>0&&a.length>=r.maximum?e(a):s[l]?void r.getEntry(s[l],i+t.name+"/").then(function(e){a.push.apply(a,x(e)),o(l+1)}):n()})(0)})})()}else e([])})},replace:function e(t,r){var i=this.get(t),n=this.get(r);if(!i||!n||i===n)return!1;var a=this.files.concat([]),s=a.indexOf(i),o=a.indexOf(n);return-1!==s&&-1!==o&&(a[s]=n,a[o]=i,this.files=a,this.emitInput(),!0)},remove:function e(t){var r=this.get(t);if(r){if(this.emitFilter(void 0,r))return!1;var i=this.files.concat([]),n=i.indexOf(r);if(-1===n)return console.error("remove",r),!1;i.splice(n,1),this.files=i,delete this.maps[r.id],this.emitInput(),this.emitFile(void 0,r)}return r},update:function e(t,r){var i=this.get(t);if(i){var n=y({},i,r);if(!i.fileObject||!i.active||n.active||n.error||n.success||(n.error="abort"),this.emitFilter(n,i))return!1;var a=this.files.concat([]),s=a.indexOf(i);return-1===s?(console.error("update",i),!1):(a.splice(s,1,n),this.files=a,delete this.maps[i.id],this.maps[n.id]=n,this.emitInput(),this.emitFile(n,i),n)}return!1},emitFilter:function e(t,r){var i=!1;return this.$emit("input-filter",t,r,function(){return i=!0}),i},emitFile:function e(t,r){this.$emit("input-file",t,r),!(t&&t.fileObject&&t.active)||r&&r.active?t&&t.fileObject&&t.active||!r||!r.fileObject||!r.active||this.uploading--:(this.uploading++,this.$nextTick(function(){var e=this;setTimeout(function(){e.upload(t).then(function(){(t=e.get(t))&&t.fileObject&&e.update(t,{active:!1,success:!t.error})}).catch(function(r){e.update(t,{active:!1,success:!1,error:r.code||r.error||r.message||r})})},parseInt(50*Math.random()+50,10))})),!this.active||Boolean(t)===Boolean(r)&&t.active===r.active||this.watchActive(!0)},emitInput:function e(){this.$emit("input",this.files)},upload:function e(t){var r=this.get(t);if(!r)return Promise.reject("not_exists");if(!r.fileObject)return Promise.reject("file_object");if(r.error)return Promise.reject(r.error);if(r.success)return Promise.resolve(r);var i=this.extensions;if(i&&(i.length||void 0===i.length)&&("object"===(void 0===i?"undefined":b(i))&&i instanceof RegExp||("string"==typeof i&&(i=i.split(",").map(function(e){return e.trim()}).filter(function(e){return e})),i=new RegExp("\\.("+i.join("|").replace(/\./g,"\\.")+")$","i")),-1===r.name.search(i)))return Promise.reject("extension");if(this.size>0&&r.size>=0&&r.size>this.size)return Promise.reject("size");if(this.customAction)return this.customAction(r,this);if(this.features.html5){if(this.shouldUseChunkUpload(r))return this.uploadChunk(r);if(r.putAction)return this.uploadPut(r);if(r.postAction)return this.uploadHtml5(r)}return r.postAction?this.uploadHtml4(r):Promise.reject("No action configured")},shouldUseChunkUpload:function e(t){return this.chunkEnabled&&!!this.chunkOptions.handler&&t.size>this.chunkOptions.minSize},uploadChunk:function e(t){var r=this.chunkOptions.handler;return t.chunk=new r(t,this.chunkOptions),t.chunk.upload()},uploadPut:function e(t){var r=[],i=void 0;for(var n in t.data)null!==(i=t.data[n])&&void 0!==i&&r.push(encodeURIComponent(n)+"="+encodeURIComponent(i));var a=r.length?(-1===t.putAction.indexOf("?")?"?":"&")+r.join("&"):"",s=new XMLHttpRequest;return s.open("PUT",t.putAction+a),this.uploadXhr(s,t,t.file)},uploadHtml5:function e(t){var r=new window.FormData,i=void 0;for(var n in t.data)(i=t.data[n])&&"object"===(void 0===i?"undefined":b(i))&&"function"!=typeof i.toString?i instanceof File?r.append(n,i,i.name):r.append(n,JSON.stringify(i)):null!==i&&void 0!==i&&r.append(n,i);r.append(this.name,t.file,t.file.filename||t.name);var a=new XMLHttpRequest;return a.open("POST",t.postAction),this.uploadXhr(a,t,r)},uploadXhr:function e(t,r,i){var n=this,a=r,s=0,o=0;t.upload.onprogress=function(e){if(a=n.get(a),e.lengthComputable&&a&&a.fileObject&&a.active){var t=Math.round(Date.now()/1e3);t!==s&&(s=t,a=n.update(a,{progress:(e.loaded/e.total*100).toFixed(2),speed:e.loaded-o}),o=e.loaded)}};var l=setInterval(function(){if(!(a=n.get(a))||!a.fileObject||a.success||a.error||!a.active){l&&(clearInterval(l),l=!1);try{t.abort(),t.timeout=1}catch(e){}}},100);return new Promise(function(e,r){var s=void 0,o=function i(o){if(!s){if(s=!0,l&&(clearInterval(l),l=!1),!(a=n.get(a)))return r("not_exists");if(!a.fileObject)return r("file_object");if(a.error)return r(a.error);if(!a.active)return r("abort");if(a.success)return e(a);var c={};switch(o.type){case"timeout":case"abort":c.error=o.type;break;case"error":t.status?t.status>=500?c.error="server":t.status>=400&&(c.error="denied"):c.error="network";break;default:t.status>=500?c.error="server":t.status>=400?c.error="denied":c.progress="100.00"}if(t.responseText){var u=t.getResponseHeader("Content-Type");u&&-1!==u.indexOf("/json")?c.response=JSON.parse(t.responseText):c.response=t.responseText}return(a=n.update(a,c)).error?r(a.error):e(a)}};for(var c in t.onload=o,t.onerror=o,t.onabort=o,t.ontimeout=o,a.timeout&&(t.timeout=a.timeout),a.headers)t.setRequestHeader(c,a.headers[c]);a=n.update(a,{xhr:t}),t.send(i)})},uploadHtml4:function e(t){var r=this,i=t,n=function e(t){27===t.keyCode&&t.preventDefault()},a=document.createElement("iframe");a.id="upload-iframe-"+i.id,a.name="upload-iframe-"+i.id,a.src="about:blank",a.setAttribute("style","width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;");var s=document.createElement("form");s.action=i.postAction,s.name="upload-form-"+i.id,s.setAttribute("method","POST"),s.setAttribute("target","upload-iframe-"+i.id),s.setAttribute("enctype","multipart/form-data");var o=void 0,l=void 0;for(var c in i.data)(o=i.data[c])&&"object"===(void 0===o?"undefined":b(o))&&"function"!=typeof o.toString&&(o=JSON.stringify(o)),null!==o&&void 0!==o&&((l=document.createElement("input")).type="hidden",l.name=c,l.value=o,s.appendChild(l));s.appendChild(i.el),document.body.appendChild(a).appendChild(s);var u=function e(){var t=void 0;try{a.contentWindow&&(t=a.contentWindow.document)}catch(e){}if(!t)try{t=a.contentDocument?a.contentDocument:a.document}catch(e){t=a.document}return t&&t.body?t.body.innerHTML:null};return new Promise(function(e,t){setTimeout(function(){if(!(i=r.update(i,{iframe:a})))return t("not_exists");var o=setInterval(function(){(i=r.get(i))&&i.fileObject&&!i.success&&!i.error&&i.active||(o&&(clearInterval(o),o=!1),a.onabort({type:i?"abort":"not_exists"}))},100),l=void 0,c=function a(s){if(!l){if(l=!0,o&&(clearInterval(o),o=!1),document.body.removeEventListener("keydown",n),!(i=r.get(i)))return t("not_exists");if(!i.fileObject)return t("file_object");if(i.error)return t(i.error);if(!i.active)return t("abort");if(i.success)return e(i);var c=u(),d={};switch(s.type){case"abort":d.error="abort";break;case"error":i.error?d.error=i.error:d.error=null===c?"network":"denied";break;default:i.error?d.error=i.error:null===d?d.error="network":d.progress="100.00"}if(null!==c){if(c&&"{"===c.substr(0,1)&&"}"===c.substr(c.length-1,1))try{c=JSON.parse(c)}catch(e){}d.response=c}return(i=r.update(i,d)).error?t(i.error):e(i)}};a.onload=c,a.onerror=c,a.onabort=c,document.body.addEventListener("keydown",n),s.submit()},50)}).then(function(e){return a.parentNode&&a.parentNode.removeChild(a),e}).catch(function(e){return a.parentNode&&a.parentNode.removeChild(a),e})},watchActive:function e(t){for(var r=void 0,i=0;r=this.files[i];)if(i++,r.fileObject)if(t&&!this.destroy){if(this.uploading>=this.thread||this.uploading&&!this.features.html5)break;r.active||r.error||r.success||this.update(r,{active:!0})}else r.active&&this.update(r,{active:!1});else;0===this.uploading&&(this.active=!1)},watchDrop:function e(t){var r=t;if(this.features.drop){if(this.dropElement)try{document.removeEventListener("dragenter",this.onDragenter,!1),document.removeEventListener("dragleave",this.onDragleave,!1),document.removeEventListener("drop",this.onDocumentDrop,!1),this.dropElement.removeEventListener("dragover",this.onDragover,!1),this.dropElement.removeEventListener("drop",this.onDrop,!1)}catch(e){}r?"string"==typeof r?r=document.querySelector(r)||this.$root.$el.querySelector(r):!0===r&&(r=this.$parent.$el):r=!1,this.dropElement=r,this.dropElement&&(document.addEventListener("dragenter",this.onDragenter,!1),document.addEventListener("dragleave",this.onDragleave,!1),document.addEventListener("drop",this.onDocumentDrop,!1),this.dropElement.addEventListener("dragover",this.onDragover,!1),this.dropElement.addEventListener("drop",this.onDrop,!1))}},onDragenter:function e(t){t.preventDefault(),this.dropActive||(this.dropActive=!0)},onDragleave:function e(t){t.preventDefault(),("HTML"===t.target.nodeName||t.target===t.explicitOriginalTarget||0===t.screenX&&0===t.screenY&&!t.fromElement&&t.offsetX<=0)&&(this.dropActive=!1)},onDragover:function e(t){t.preventDefault()},onDocumentDrop:function e(){this.dropActive=!1},onDrop:function e(t){t.preventDefault(),this.addDataTransfer(t.dataTransfer)}}},C=w,O=function e(){var t=this,r=t.$createElement,i=t._self._c||r;return i("label",{class:t.className},[t._t("default"),t._v(" "),i("input-file")],2)},j,S,A,E=void 0,$=void 0,U=!1;function D(e,t,r,i,n,a,s,o){var l=r||{};l.render||(l.render=e.render,l.staticRenderFns=e.staticRenderFns,l._compiled=!0,n&&(l.functional=!0)),l._scopeId=i;var c=void 0;if(t&&(c=function e(r){t.call(this,s(r))}),void 0!==c)if(l.functional){var u=l.render;l.render=function e(t,r){return c.call(r),u(t,r)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,c):[c]}return l}function M(){var e=document.head||document.getElementsByTagName("head")[0],t=M.styles||(M.styles={}),r="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());return function i(n,a){if(!document.querySelector('style[data-vue-ssr-id~="'+n+'"]')){var s=r?a.media||"default":n,o=t[s]||(t[s]={ids:[],parts:[],element:void 0});if(!o.ids.includes(n)){var l=a.source,c=o.ids.length;if(o.ids.push(n),a.map&&(l+="\n/*# sourceURL="+a.map.sources[0]+" */",l+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a.map))))+" */"),r&&(o.element=o.element||document.querySelector("style[data-group="+s+"]")),!o.element){var u=o.element=document.createElement("style");u.type="text/css",a.media&&u.setAttribute("media",a.media),r&&(u.setAttribute("data-group",s),u.setAttribute("data-next-index","0")),e.appendChild(u)}if(r&&(c=parseInt(o.element.getAttribute("data-next-index")),o.element.setAttribute("data-next-index",c+1)),o.element.styleSheet)o.parts.push(l),o.element.styleSheet.cssText=o.parts.filter(Boolean).join("\n");else{var d=document.createTextNode(l),p=o.element.childNodes;p[c]&&o.element.removeChild(p[c]),p.length?o.element.insertBefore(d,p[c]):o.element.appendChild(d)}}}}}var N=D({render:O,staticRenderFns:[]},function(e){e&&e("data-v-00c97c04_0",{source:"\n.file-uploads{overflow:hidden;position:relative;text-align:center;display:inline-block\n}\n.file-uploads.file-uploads-html4 input[type=file]{opacity:0;font-size:20em;z-index:1;top:0;left:0;right:0;bottom:0;position:absolute;width:100%;height:100%\n}\n.file-uploads.file-uploads-html5 input[type=file]{overflow:hidden;position:fixed;width:1px;height:1px;z-index:-1;opacity:0\n}",map:void 0,media:void 0})},void 0===w?{}:w,void 0,!1,void 0,M,"undefined"!=typeof __vue_create_injector_ssr__?__vue_create_injector_ssr__:function(){}),B=Object.freeze({default:N}),P,T;return B&&N||B},e.exports=n()},"1pgq":function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-container",{attrs:{fluid:""}},[r("v-layout",{attrs:{row:"",wrap:""}},[r("v-spacer"),e._v(" "),e.isOption?r("v-btn",{attrs:{flat:"",icon:"",color:"red darken-4"},nativeOn:{click:function(t){e.isOption=!e.isOption}}},[r("v-icon",[e._v("arrow_back")])],1):r("file-upload",{ref:"upload",staticClass:"v-btn v-btn--flat theme--dark blue--text mx-5 py-2",staticStyle:{cursor:"pointer"},attrs:{"post-action":e.postAction,"put-action":e.putAction,name:e.fileKey,extensions:e.extensions,accept:e.accept,multiple:e.multiple,directory:e.directory,size:e.size||0,thread:e.thread<1?1:e.thread>5?5:e.thread,headers:e.headers,data:e.data,drop:e.drop,"drop-directory":e.dropDirectory,"add-index":e.addIndex},on:{"input-filter":e.inputFilter,"input-file":e.inputFile},model:{value:e.files,callback:function(t){e.files=t},expression:"files"}},[e._v("\n      Choose Files\n    ")]),e._v(" "),e.isOption?e._e():r("v-btn",{attrs:{flat:"",icon:"",color:"amber lighten-2"},nativeOn:{click:function(t){e.isOption=!e.isOption}}},[r("v-icon",[e._v("fa-cog")])],1)],1),e._v(" "),e.isOption?e._e():r("v-data-table",{attrs:{headers:e.th,items:e.files,light:!0,"rows-per-page-items":e.perPageData,"no-data-text":"Click `Choose Files` Button To Upload Files."},scopedSlots:e._u([{key:"items",fn:function(t){return[r("td",{staticClass:"title text-xs-left primary--text"},[t.item.thumb?r("img",{attrs:{src:t.item.thumb,width:"40",height:"auto"}}):r("span",[e._v("No Image")])]),e._v(" "),r("td",{staticClass:"title text-xs-left primary--text"},[r("v-edit-dialog",{attrs:{large:"",lazy:""}},[r("span",{staticClass:"primary--text"},[e._v(e._s(e._f("truncate")(t.item.name,20)))]),e._v(" "),r("div",{staticClass:"mt-3 text-xs-center title primary--text",attrs:{slot:"input"},slot:"input"},[e._v("\n            Update Name\n          ")]),e._v(" "),r("v-text-field",{attrs:{slot:"input",rules:[e.maxInput],label:"Edit","single-line":"",counter:"",autofocus:""},slot:"input",model:{value:t.item.name,callback:function(r){e.$set(t.item,"name",r)},expression:"props.item.name"}})],1)],1),e._v(" "),r("td",{staticClass:"title text-xs-left primary--text"},[e._v(e._s(e._f("formatSize")(t.item.size)))]),e._v(" "),r("td",{staticClass:"title text-xs-left primary--text"},[t.item.active||"0.00"!==t.item.progress?r("v-progress-circular",{attrs:{size:45,width:5,rotate:360,value:e.progress(t.item.progress),color:"teal"}},[r("span",{staticClass:"caption"},[e._v(e._s(e.progress(t.item.progress)))])]):e._e()],1),e._v(" "),t.item.error?r("td",{staticClass:"title text-xs-left primary--text"},[e._v("\n        "+e._s(t.item.error)+"\n      ")]):t.item.success?r("td",{staticClass:"title text-xs-left primary--text"},[e._v("\n        success\n      ")]):t.item.active?r("td",{staticClass:"title text-xs-left primary--text"},[e._v("\n        active\n      ")]):r("td",{staticClass:"title text-xs-left primary--text"}),e._v(" "),r("td",{staticClass:"title text-xs-center primary--text"},[t.item.active?r("v-btn",{attrs:{flat:"",icon:"",color:"red darken-4"},nativeOn:{click:function(r){t.item.active&&e.$refs.upload.update(t.item,{error:"cancel"})}}},[r("v-icon",[e._v("fa-times")])],1):t.item.error&&"compressing"!==t.item.error&&e.$refs.upload.features.html5?r("v-btn",{attrs:{flat:"",icon:"",color:"info"},nativeOn:{click:function(r){e.$refs.upload.update(t.item,{active:!0,error:"",progress:"0.00"})}}},[r("v-icon",[e._v("fa-refresh")])],1):r("v-btn",{attrs:{flat:"",icon:"",color:"blue"},nativeOn:{click:function(r){!t.item.success&&"compressing"!==t.item.error&&e.$refs.upload.update(t.item,{active:!0})}}},[r("v-icon",[e._v("fa-upload")])],1),e._v(" "),r("v-btn",{attrs:{flat:"",icon:"",color:"red lighten-2"},nativeOn:{click:function(r){e.remove(t.item)}}},[r("v-icon",[e._v("fa-trash")])],1)],1)]}}])}),e._v(" "),e.isOption?e._e():r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{sm12:"",md6:""}},[r("v-btn",{directives:[{name:"show",rawName:"v-show",value:e.files.length>0,expression:"files.length > 0"}],attrs:{dark:"",block:"",flat:"",color:"teal lighten-2"},nativeOn:{click:function(t){e.$refs.upload.active=!0}}},[e._v("\n        Start Upload \n        "),r("v-icon",{attrs:{right:""}},[e._v("\n          play_arrow\n        ")])],1)],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md6:""}},[r("v-btn",{directives:[{name:"show",rawName:"v-show",value:e.$refs.upload&&e.$refs.upload.active,expression:"$refs.upload && $refs.upload.active"}],attrs:{dark:"",block:"",flat:"",color:"error"},nativeOn:{click:function(t){e.$refs.upload.active=!1}}},[e._v("\n        Stop Upload \n        "),r("v-icon",{attrs:{right:""}},[e._v("\n          stop\n        ")])],1),e._v(" "),e.$refs.upload&&!e.$refs.upload.active&&e.files.length>0?r("v-btn",{attrs:{dark:"",block:"",flat:"",color:"red lighten-2"},nativeOn:{click:function(t){e.files=[]}}},[e._v("\n        Remove All Files \n        "),r("v-icon",{attrs:{right:""}},[e._v("\n          fa-trash\n        ")])],1):e._e()],1)],1),e._v(" "),e.isOption?r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("mime-type"),"append-icon":"fa-file-code-o ",label:"Accept",color:"info",hint:"Allow upload mime type","persistent-hint":"","data-vv-name":"mime-type"},model:{value:e.accept,callback:function(t){e.accept=t},expression:"accept"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("extension"),"append-icon":"fa-cogs",label:"Extensions",color:"info",hint:"Allow upload file extension","persistent-hint":"","data-vv-name":"extension"},model:{value:e.extensions,callback:function(t){e.extensions=t},expression:"extensions"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{attrs:{light:!0,"append-icon":"http",label:"Put Url",color:"info",hint:"Disabled if Empty, After the shutdown, use the POST method to upload","persistent-hint":""},model:{value:e.putAction,callback:function(t){e.putAction=t},expression:"putAction"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("post-url"),"append-icon":"http",label:"Post Url",color:"info",hint:"Default Post URL","persistent-hint":"","data-vv-name":"post-url"},model:{value:e.postAction,callback:function(t){e.postAction=t},expression:"postAction"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required|numeric|min_value:1",expression:"'required|numeric|min_value:1'"}],attrs:{light:!0,"error-messages":e.errors.collect("thread"),"append-icon":"fa-cubes",label:"Thread",color:"info",hint:"Also upload the number of files at the same time (number of threads)","persistent-hint":"","data-vv-name":"thread"},model:{value:e.thread,callback:function(t){e.thread=t},expression:"thread"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("max-size"),"append-icon":"trending_up",label:"Max size",color:"info",hint:"Size Unit in byte","persistent-hint":"","data-vv-name":"max-size"},model:{value:e.size,callback:function(t){e.size=e._n(t)},expression:"size"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("min-size"),"append-icon":"trending_down",label:"Min size",color:"info",hint:"Size Unit in byte","persistent-hint":"","data-vv-name":"min-size"},model:{value:e.minSize,callback:function(t){e.minSize=e._n(t)},expression:"minSize"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],attrs:{light:!0,"error-messages":e.errors.collect("auto-compress"),"append-icon":"fa-compress",label:"Automatically compress",color:"info","data-vv-name":"auto-compress"},model:{value:e.autoCompress,callback:function(t){e.autoCompress=e._n(t)},expression:"autoCompress"}}),e._v(" "),e.autoCompress>0?r("p",{staticClass:"grey--text caption"},[e._v("\n        More than "+e._s(e._f("formatSize")(e.autoCompress))+" files are automatically compressed\n      ")]):r("p",{staticClass:"grey--text caption"},[e._v("\n        Set up automatic compression\n      ")])],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-checkbox",{attrs:{label:"Drag and drop upload: "+e.drop.toString(),light:""},model:{value:e.drop,callback:function(t){e.drop=t},expression:"drop"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-checkbox",{attrs:{label:"Not checked, filter the dragged folder: "+e.dropDirectory.toString(),light:""},model:{value:e.dropDirectory,callback:function(t){e.dropDirectory=t},expression:"dropDirectory"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:""}},[r("v-checkbox",{attrs:{label:"Automatically activate upload: "+e.uploadAuto.toString(),light:""},model:{value:e.uploadAuto,callback:function(t){e.uploadAuto=t},expression:"uploadAuto"}})],1)],1):e._e()],1)},i=[];e.exports={render:r,staticRenderFns:i}},"2gGM":function(e,t,r){e.exports=function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},r.n=function(e){var t=e&&e.__esModule?function t(){return e.default}:function t(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./",r(r.s=0)}({0:function(e,t,r){e.exports=r("lVK7")},OMN4:function(e,t){e.exports=r("mtWM")},lVK7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("OMN4"),n=r.n(i);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function s(e){if(null===e||"object"!==a(e))return e;var t=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(r){t[r]=s(e[r])}),t}function o(e){return Array.isArray(e)?e:[e]}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e}).apply(this,arguments)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function m(e,t,r){return t&&p(e.prototype,t),r&&p(e,r),e}var f=function(){function e(){d(this,e),this.errors={}}return m(e,[{key:"set",value:function e(t,r){"object"===u(t)?this.errors=t:this.set(c({},this.errors,l({},t,o(r))))}},{key:"all",value:function e(){return this.errors}},{key:"has",value:function e(t){return this.errors.hasOwnProperty(t)}},{key:"hasAny",value:function e(){for(var t=this,r=arguments.length,i=new Array(r),n=0;n<r;n++)i[n]=arguments[n];return i.some(function(e){return t.has(e)})}},{key:"any",value:function e(){return Object.keys(this.errors).length>0}},{key:"get",value:function e(t){if(this.has(t))return this.getAll(t)[0]}},{key:"getAll",value:function e(t){return o(this.errors[t]||[])}},{key:"only",value:function e(){for(var t=this,r=[],i=arguments.length,n=new Array(i),a=0;a<i;a++)n[a]=arguments[a];return n.forEach(function(e){var i=t.get(e);i&&r.push(i)}),r}},{key:"flatten",value:function e(){return Object.values(this.errors).reduce(function(e,t){return e.concat(t)},[])}},{key:"clear",value:function e(t){var r=this,i={};t&&Object.keys(this.errors).forEach(function(e){e!==t&&(i[e]=r.errors[e])}),this.set(i)}}]),e}();function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e}).apply(this,arguments)}function _(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function b(e,t,r){return t&&y(e.prototype,t),r&&y(e,r),e}var x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_(this,e),this.busy=!1,this.successful=!1,this.errors=new f,this.originalData=s(t),Object.assign(this,t)}return b(e,[{key:"fill",value:function e(t){var r=this;this.keys().forEach(function(e){r[e]=t[e]})}},{key:"data",value:function e(){var t=this;return this.keys().reduce(function(e,r){return g({},e,h({},r,t[r]))},{})}},{key:"keys",value:function t(){return Object.keys(this).filter(function(t){return!e.ignore.includes(t)})}},{key:"startProcessing",value:function e(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function e(){this.busy=!1,this.successful=!0}},{key:"clear",value:function e(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function t(){var r=this;Object.keys(this).filter(function(t){return!e.ignore.includes(t)}).forEach(function(e){r[e]=s(r.originalData[e])})}},{key:"get",value:function e(t){return this.submit("get",t)}},{key:"post",value:function e(t){return this.submit("post",t)}},{key:"patch",value:function e(t){return this.submit("patch",t)}},{key:"put",value:function e(t){return this.submit("put",t)}},{key:"delete",value:function e(t){return this.submit("delete",t)}},{key:"submit",value:function e(t,r){var i=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var s="get"===t?{params:this.data()}:this.data();return new Promise(function(e,o){n.a.request(g({url:i.route(r),method:t,data:s},a)).then(function(t){i.finishProcessing(),e(t)}).catch(function(e){i.busy=!1,e.response&&i.errors.set(i.extractErrors(e.response)),o(e)})})}},{key:"extractErrors",value:function t(r){return r.data&&"object"===v(r.data)?r.data.errors?g({},r.data.errors):r.data.message?{error:r.data.message}:g({},r.data):{error:e.errorMessage}}},{key:"route",value:function t(r){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r;return e.routes.hasOwnProperty(r)&&(n=decodeURI(e.routes[r])),"object"!==v(i)&&(i={id:i}),Object.keys(i).forEach(function(e){n=n.replace("{".concat(e,"}"),i[e])}),n}},{key:"onKeydown",value:function e(t){t.target.name&&this.errors.clear(t.target.name)}}]),e}();x.routes={},x.errorMessage="Something went wrong. Please try again.",x.ignore=["busy","successful","errors","originalData"];var k=x,w,C,O;function j(e,t,r,i,n,a,s,o){var l=typeof(e=e||{}).default;"object"!==l&&"function"!==l||(e=e.default);var c="function"==typeof e?e.options:e,u;if(t&&(c.render=t,c.staticRenderFns=r,c._compiled=!0),i&&(c.functional=!0),a&&(c._scopeId=a),s?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(s)},c._ssrRegister=u):n&&(u=o?function(){n.call(this,this.$root.$options.shadowRoot)}:n),u)if(c.functional){c._injectStyles=u;var d=c.render;c.render=function e(t,r){return u.call(r),d(t,r)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,u):[u]}return{exports:e,options:c}}var S=!1,A=null,E=null,$=null,U,D=j({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.has(e.field)?r("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:e._s(e.form.errors.get(e.field))}}):e._e()},[],!1,null,null,null).exports,M={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function e(){this.dismissible&&this.form.clear()}}},N,B,P,T=!1,q=null,I=null,R=null,F,z=j({name:"alert-error",extends:M,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[e.form.errors.has("error")?r("div",{domProps:{innerHTML:e._s(e.form.errors.get("error"))}}):r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports,L,H,V,K=!1,W=null,Y=null,G=null,J,X=j({name:"alert-errors",extends:M,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e.message?r("div",{domProps:{innerHTML:e._s(e.message)}}):e._e(),e._v(" "),r("ul",e._l(e.form.errors.flatten(),function(t){return r("li",{domProps:{innerHTML:e._s(t)}})}))]):e._e()},[],!1,null,null,null).exports,Z,Q,ee,te=!1,re=null,ie=null,ne=null,ae,se=j({name:"alert-success",extends:M,props:{message:{type:String,default:""}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.successful?r("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports;r.d(t,"Form",function(){return k}),r.d(t,"Errors",function(){return f}),r.d(t,"HasError",function(){return D}),r.d(t,"AlertError",function(){return z}),r.d(t,"AlertErrors",function(){return X}),r.d(t,"AlertSuccess",function(){return se}),r.d(t,"default",function(){return k})}})},"2yrZ":function(e,t,r){function i(e){r("pwLK")}var n,a=null,s,o=!1,l,c=null,u=null,d=r("VU/8")(null,r("dgbI"),!1,i,null,null);e.exports=d.exports},"3knJ":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("2yrZ"),n=r.n(i),a=r("gvVL"),s=r("2gGM"),o=r.n(s),l=r("e7x4"),c=r.n(l),u=r("Cr03"),d=r.n(u);t.default={components:{ModalLayout:n.a,Packages:d.a},mixins:[a.a],props:{id:{type:String,required:!0}},data:function e(){return{form:new s.Form({dsg_id:null,active:!1,client_id:null,client_name:null,customer_id:null,customer_name:null,shipper_id:null,shipper_name:null,received_by:null,received_by_name:null,written_by:null,written_by_name:null,inspected_by:null,inspected_by_name:null,located_by:null,located_by_name:null,total_pieces:0,total_cube:0,receiving_amount:0,date_processed:null,packages:[]}),po_no:null,date_received:null,bins:[],date_received_modal:!1,date_processed:null,date_processed_modal:!1,customers:[],clients:[],shippers:[],employees:[],packages:[],handling_rates:[],storage_rates:[],client_id:null,client_name:null,unknownClient:{active:!1,address_1:null,address_2:null,city:null,id:1,name:"Unknown Client",state:null,zip:null}}},watch:{po_no:{handler:function e(t){for(var r=this,i=this.packages.length,n=0;n<i;n++)this.packages[n].po_no=t},deep:!0},date_received:{handler:function e(t){for(var r=this,i=this.packages.length,n=0;n<i;n++)this.packages[n].date_received=t},deep:!0},date_processed:{handler:function e(t){for(var r=this,i=this.packages.length,n=0;n<i;n++)this.packages[n].date_processed=t;this.form.date_processed=t},deep:!0},bins:{handler:function e(t){},deep:!0},customers:{handler:function e(t){},deep:!0},shippers:{handler:function e(t){},deep:!0},employees:{handler:function e(t){},deep:!0},packages:{handler:function e(t){var r=this;this.form.total_pieces=t.length,this.updateTotalCube(),this.updateReceivingAmount()},deep:!0},"form.packages":{handler:function e(t){},deep:!0},"form.customer_id":{handler:function e(t){var r=this,i=this.packages.length,n=null,a=null;if(void 0!=t){var s=_.find(this.customers,function(e){return e.id===t});this.clients=s.clients,_.remove(this.clients,{id:1}),this.clients.unshift(this.unknownClient),this.form.customer_name=s.name,this.form.client_name=null,this.form.client_id=null,n=t,a=s.name}else this.clients=[],this.clients.push(this.unknownClient),this.form.customer_id=null,this.form.customer_name=null,this.form.client_name=null,this.form.client_id=null;for(var o=0;o<i;o++)this.packages[o].customer_id=n,this.packages[o].customer_name=a},deep:!1},"form.shipper_id":{handler:function e(t){var r=this,i=this.packages.length,n=null,a=null;if(void 0!=t){var s=_.find(this.shippers,function(e){return e.id===t});this.form.shipper_name=s.name,n=s.id,a=s.name}for(var o=0;o<i;o++)this.packages[o].shipper_id=n,this.packages[o].shipper_name=a},deep:!1},"form.client_name":{handler:function e(t){var r=this,i=this.packages.length,n=null,a=t;if(null!=t||void 0!=t){if(this.clients.length>0){var s=_.find(this.clients,function(e){return e.name==t});void 0!=s&&(this.form.client_name=s.name,this.form.client_id=s.id,n=s.id,a=s.name)}}else this.form.client_id=null,this.form.client_name=null;for(var o=0;o<i;o++)this.packages[o].client_id=n,this.packages[o].client_name=a},deep:!1},"form.received_by":{handler:function e(t){var r=this;if(null!=t||void 0!=t){if(this.employees.length>0){var i=_.find(this.employees,function(e){return e.id==t});void 0!=i&&(this.form.received_by=i.id,this.form.received_by_name=i.name)}}else this.form.received_by=null,this.form.received_by_name=null},deep:!1},"form.written_by":{handler:function e(t){var r=this;if(null!=t||void 0!=t){if(this.employees.length>0){var i=_.find(this.employees,function(e){return e.id==t});void 0!=i&&(this.form.written_by=i.id,this.form.written_by_name=i.name)}}else this.form.written_by=null,this.form.written_by_name=null},deep:!1},"form.inspected_by":{handler:function e(t){var r=this;if(null!=t||void 0!=t){if(this.employees.length>0){var i=_.find(this.employees,function(e){return e.id==t});void 0!=i&&(this.form.inspected_by=i.id,this.form.inspected_by_name=i.name)}}else this.form.inspected_by=null,this.form.inspected_by_name=null},deep:!1},"form.located_by":{handler:function e(t){var r=this;if(null!=t||void 0!=t){if(this.employees.length>0){var i=_.find(this.employees,function(e){return e.id==t});void 0!=i&&(this.form.located_by=i.id,this.form.located_by_name=i.name)}}else this.form.located_by=null,this.form.located_by_name=null},deep:!1}},created:function e(){this.getCustomers(),this.getShippers(),this.getEmployees(),this.getBins(),this.getHandlingRates(),this.getStorageRates(),this.date_received=moment().format("YYYY-MM-DD"),this.date_processed=moment().format("YYYY-MM-DD"),this.fetchDSG()},methods:{updateReceivingAmount:function e(){for(var t=this,r=this.packages.length,i=0,n=0;n<r;n++)i+=this.packages[n].handling_fee;this.form.receiving_amount=i},updateTotalCube:function e(){for(var t=this,r=this.packages.length,i=0,n=0;n<r;n++)i+=Number(this.packages[n].cube);this.form.total_cube=i},getHandlingRates:function e(){var t=this;axios.get(route("api.dsg.getHandlingRates")).then(function(e){t.handling_rates=e.data.rates})},getStorageRates:function e(){var t=this;axios.get(route("api.dsg.getStorageRates")).then(function(e){t.storage_rates=e.data.rates})},getBins:function e(){var t=this;axios.post(route("api.bin.index")).then(function(e){t.bins=e.data.data})},addNewPackage:function e(){var t=this;t.$validator.validateAll().then(function(e){var r;e?axios.post(route("api.package.add")).then(function(e){var r=e.data.data;r.date_received=t.date_received,r.date_processed=t.date_processed,r.po_no=t.po_no,r.customer_id=t.form.customer_id,r.customer_name=t.form.customer_name,r.client_id=t.form.client_id,r.client_name=t.form.client_name,r.shipper_id=t.form.shipper_id,r.shipper_name=t.form.shipper_name,t.packages.push(r),t.form.packages.push(r)}):c.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error",html:'<p class="title">Please Fix Form Errors</p>',type:"warning",confirmButtonText:"Back"})})},getEmployees:function e(){var t=this;axios.get(route("api.dsg.getEmployees")).then(function(e){t.employees=e.data.data})},getShippers:function e(){var t=this;axios.get(route("api.dsg.getShippers")).then(function(e){t.shippers=e.data.data})},getCustomers:function e(){var t=this;axios.get(route("api.dsg.getCustomers")).then(function(e){t.customers=e.data.data})},getStatus:function e(t){return t?"Status: Active":"Status: Inactive"},submit:function e(){var t=this;this.$validator.validateAll().then(function(e){var r;e?t.updateDsg():c.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error",html:'<p class="title">Please Fix Form Errors</p>',type:"warning",confirmButtonText:"Back"})})},updateDsg:function e(){var t=this;t.form.busy=!0,t.form.packages=t.packages,t.form.post(route("api.dsg.update",{dsg:t.id}),t.form).then(function(e){var r;t.$validator.reset(),c.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success!",html:'<p class="title">Receiving Has Been Updated!</p>',type:"success",confirmButtonText:"Ok"}),t.$nextTick(function(){return t.$router.push({name:"dsg"})})}).catch(function(e){var r;c.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error!",html:'<p class="title">Please Complete Form To Submit!</p>',type:"error",confirmButtonText:"Ok"}),t.form.busy=!1})},redirectBack:function e(){var t=this;t.$nextTick(function(){return t.$router.push({name:"unknown-reports"})})},fetchDSG:function e(){var t=this.id,r=this;axios.get(route("api.dsg.edit",{id:t})).then(function(e){var t=e.data.data;r.form.dsg_id=t.id,r.form.active=t.active,r.form.client_id=t.client_id,r.form.client_name=t.client_name,r.form.customer_id=t.customer_id,r.form.customer_name=t.customer_name,r.form.shipper_id=t.shipper_id,r.form.shipper_name=t.shipper_name,r.form.received_by=t.received_by,r.form.received_by_name=t.received_by_name,r.form.written_by=t.written_by,r.form.written_by_name=t.written_by_name,r.form.inspected_by=t.inspected_by,r.form.inspected_by_name=t.inspected_by_name,r.form.located_by=t.located_by,r.form.located_by_name=t.located_by_name,r.form.total_pieces=t.total_pieces,r.form.total_cube=t.total_cube,r.form.receiving_amount=t.receiving_amount,r.client_id=t.client_id,r.client_name=t.client_name,t.packages.length>0?(r.po_no=t.packages[0].po_no,r.date_received=t.packages[0].date_received,r.date_processed=t.packages[0].date_processed):(r.po_no=null,r.date_received=moment().format("YYYY-MM-DD"),r.date_processed=moment().format("YYYY-MM-DD")),r.packages=t.packages,r.client_name=t.client_name,r.client_id=t.client_id}),setTimeout(function(){r.form.client_name=r.client_name,r.form.client_id=r.client_id},1e3)}}}},"4vl6":function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-layout",{attrs:{row:"",wrap:"","pa-3":"","ma-3":""}},[r("v-card",[r("v-toolbar",{staticClass:"blue-grey"},[e.readonly?e._e():r("v-btn",{attrs:{flat:"",icon:"",color:"blue lighten-4"},nativeOn:{click:function(t){e.addNewPackage()}}},[r("v-icon",{attrs:{"x-large":""}},[e._v("add_circle")])],1),e._v(" "),e.readonly?e._e():r("v-btn",{attrs:{flat:"",icon:"",color:"green lighten-2"},nativeOn:{click:function(t){e.clonePackage()}}},[r("v-icon",{attrs:{"x-large":""}},[e._v("file_copy")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-md-center white--text"},[e._v("Item "+e._s(e.index))]),e._v(" "),r("v-spacer"),e._v(" "),e.readonly?e._e():r("v-btn",{attrs:{flat:"",icon:"",color:"red"},nativeOn:{click:function(t){e.deletePackage(e.item.id)}}},[r("v-icon",{attrs:{"x-large":""}},[e._v("close")])],1)],1),e._v(" "),r("v-container",{attrs:{fluid:"","grid-list-md":""}},[r("v-layout",{attrs:{row:"",wrap:"","pa-2":""}},[r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{attrs:{readonly:e.readonly,label:"Style No.","prepend-icon":"style",hint:"Optional","persistent-hint":""},model:{value:e.item.style_no,callback:function(t){e.$set(e.item,"style_no",t)},expression:"item.style_no"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".description")},attrs:{readonly:e.readonly,"error-messages":e.errorMessages("packages."+e.iteration+".description"),"data-vv-name":"`packages.${index}.description`",hint:"Required","persistent-hint":"",label:"Item Description"},model:{value:e.item.description,callback:function(t){e.$set(e.item,"description",t)},expression:"item.description"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{attrs:{readonly:e.readonly,label:"Length",suffix:"ft","prepend-icon":"keyboard_tab",hint:"Optional","persistent-hint":""},model:{value:e.item.length,callback:function(t){e.$set(e.item,"length",t)},expression:"item.length"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{attrs:{readonly:e.readonly,label:"Width",suffix:"ft","prepend-icon":"swap_horiz",hint:"Optional","persistent-hint":""},model:{value:e.item.width,callback:function(t){e.$set(e.item,"width",t)},expression:"item.width"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{attrs:{readonly:e.readonly,label:"Height",suffix:"ft","prepend-icon":"swap_vert",hint:"Optional","persistent-hint":""},model:{value:e.item.height,callback:function(t){e.$set(e.item,"height",t)},expression:"item.height"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".cube")},attrs:{"error-messages":e.errorMessages("packages."+e.iteration+".cube"),readonly:e.readonly,label:"Cube",suffix:"ft³","prepend-icon":"fa-cube","data-vv-name":"`packages.${iteration}.cube`",hint:"Required","persistent-hint":""},model:{value:e.item.cube,callback:function(t){e.$set(e.item,"cube",t)},expression:"item.cube"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".bin_id")},attrs:{items:e.bins,"error-messages":e.errorMessages("packages."+e.iteration+".bin_id"),readonly:e.readonly,"item-text":"code","item-value":"id",required:"",label:"Choose Bin",light:"","prepend-icon":"view_comfy","data-vv-name":"`packages.${iteration}.bin_id`",hint:"Choose Bin","persistent-hint":""},model:{value:e.item.bin_id,callback:function(t){e.$set(e.item,"bin_id",t)},expression:"item.bin_id"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".store_at")},attrs:{items:e.store_at,"error-messages":e.errorMessages("packages."+e.iteration+".store_at"),readonly:e.readonly,required:"",label:"Store At",light:"","prepend-icon":"dns","data-vv-name":"`packages.${iteration}.store_at`",hint:"Choose Store At","persistent-hint":""},model:{value:e.item.store_at,callback:function(t){e.$set(e.item,"store_at",t)},expression:"item.store_at"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".handling_type")},attrs:{items:e.handlingRates,"error-messages":e.errorMessages("packages."+e.iteration+".handling_type"),readonly:e.readonly,"item-text":"name","item-value":"id",required:"",label:"Choose Handling Note",light:"","prepend-icon":"receipt","data-vv-name":"`packages.${iteration}.handling_type`",hint:"Choose Handling Note","persistent-hint":""},model:{value:e.item.handling_type,callback:function(t){e.$set(e.item,"handling_type",t)},expression:"item.handling_type"}})],1),e._v(" "),r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-switch",{attrs:{readonly:e.readonly,label:e.getDamageStatus(e.item.damaged)},model:{value:e.item.damaged,callback:function(t){e.$set(e.item,"damaged",t)},expression:"item.damaged"}})],1),e._v(" "),e.item.damaged?r("v-flex",{attrs:{sm12:"",md4:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required: item.damaged",expression:"'required: item.damaged'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".damage_description")},attrs:{readonly:e.readonly,"error-messages":e.errorMessages("packages."+e.iteration+".damage_description"),hint:"Required If Marked As Damaged","data-vv-name":"`packages.${iteration}.damage_description`","persistent-hint":"",label:"Damaged Description"},model:{value:e.item.damage_description,callback:function(t){e.$set(e.item,"damage_description",t)},expression:"item.damage_description"}})],1):e._e()],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:"","pa-2":""}},[r("v-flex",{attrs:{sm12:"",md6:"","px-3":""}},[r("v-btn",{attrs:{block:"",color:"secondary",dark:""},on:{click:function(t){e.viewImages()}}},[e._v("\n            View Item Images\n            "),r("v-icon",{attrs:{right:""}},[e._v("\n              image\n            ")])],1),e._v(" "),e.readonly?e._e():r("v-btn",{attrs:{block:"",color:"blue",dark:""},on:{click:function(t){e.openPackageImagesModal()}}},[e._v("\n            Upload Package Images \n            "),r("v-icon",{attrs:{right:""}},[e._v("add_photo_alternate")])],1),e._v(" "),r("package-images-uploader",{attrs:{id:e.item.id,item:e.item}})],1),e._v(" "),e.item.damaged?r("v-flex",{attrs:{sm12:"",md6:"","px-3":""}},[r("v-btn",{attrs:{block:"",dark:"",color:"secondary"},on:{click:function(t){e.viewDamageImages()}}},[e._v("\n            View Damage Images\n            "),r("v-icon",{attrs:{right:""}},[e._v("\n              broken_image\n            ")])],1),e._v(" "),e.readonly?e._e():r("v-btn",{attrs:{block:"",color:"error",dark:""},on:{click:function(t){e.openDamagedImagesModal()}}},[e._v("\n            Upload Damaged Images "),r("v-icon",{attrs:{right:""}},[e._v("broken_image")])],1),e._v(" "),r("damaged-images-uploader",{attrs:{id:e.item.id,item:e.item}})],1):e._e()],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{sm12:"",md8:""}},[r("v-subheader",[e._v("\n            Notes:\n          ")]),e._v(" "),r("v-textarea",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("packages."+e.iteration+".notes")},attrs:{readonly:e.readonly,"error-messages":e.errorMessages("packages."+e.iteration+".notes"),counter:"",maxlength:"255","full-width":"",outline:"",hint:"Optional","data-vv-name":"`packages.${iteration}.notes`","persistent-hint":""},model:{value:e.item.notes,callback:function(t){e.$set(e.item,"notes",t)},expression:"item.notes"}})],1),e._v(" "),e.item.damaged?r("v-flex",{attrs:{sm12:"",md2:"","order-md2":""}},[r("v-subheader",[e._v("\n            Is Item Repaired?\n          ")]),e._v(" "),r("v-switch",{attrs:{readonly:e.readonly,label:e.getRepairedStatus(e.item.repaired)},model:{value:e.item.repaired,callback:function(t){e.$set(e.item,"repaired",t)},expression:"item.repaired"}})],1):e._e(),e._v(" "),e.item.repaired?r("v-flex",{attrs:{sm12:"",md2:""}},[r("v-subheader",[e._v("\n            When is it Repaired?\n          ")]),e._v(" "),r("v-text-field",{class:{"error--text":e.hasErrors("packages."+e.iteration+".date_repaired")},attrs:{readonly:e.readonly,"error-messages":e.errorMessages("packages."+e.iteration+".date_repaired"),label:"Date Repaired","prepend-icon":"event_note","data-vv-name":"`packages.${iteration}.date_repaired`"},on:{click:function(t){e.openDateRepairedModal()}},model:{value:e.item.date_repaired,callback:function(t){e.$set(e.item,"date_repaired",t)},expression:"item.date_repaired"}}),e._v(" "),r("v-dialog",{ref:"date_repaired_"+e.item.id,attrs:{"return-value":e.item.date_repaired,persistent:"",lazy:"","full-width":"",width:"290px"},on:{"update:returnValue":function(t){e.$set(e.item,"date_repaired",t)}},model:{value:e.date_repaired_modal,callback:function(t){e.date_repaired_modal=t},expression:"date_repaired_modal"}},[r("v-date-picker",{attrs:{disabled:e.readonly,scrollable:""},model:{value:e.item.date_repaired,callback:function(t){e.$set(e.item,"date_repaired",t)},expression:"item.date_repaired"}},[r("v-spacer"),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.date_repaired_modal=!1}}},[e._v("Cancel")]),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.save(e.item,e.item.date_repaired)}}},[e._v("OK")])],1)],1)],1):e._e()],1)],1),e._v(" "),r("images",{attrs:{id:""+e.item.id,images:e.item.package_images}}),e._v(" "),r("damage-images",{attrs:{id:""+e.item.id,images:e.item.damaged_images}})],1)],1)},i=[];e.exports={render:r,staticRenderFns:i}},"5erj":function(e,t,r){var i,n;i=this,n=function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t=e(function(e){!function(t){var r=t.HTMLCanvasElement&&t.HTMLCanvasElement.prototype,i=t.Blob&&function(){try{return Boolean(new Blob)}catch(e){return!1}}(),n=i&&t.Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(e){return!1}}(),a=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder,s=/^data:((.*?)(;charset=.*?)?)(;base64)?,/,o=(i||a)&&t.atob&&t.ArrayBuffer&&t.Uint8Array&&function(e){var t,r,o,l,c,u,d,p,m;if(!(t=e.match(s)))throw new Error("invalid data URI");for(r=t[2]?t[1]:"text/plain"+(t[3]||";charset=US-ASCII"),o=!!t[4],l=e.slice(t[0].length),c=o?atob(l):decodeURIComponent(l),u=new ArrayBuffer(c.length),d=new Uint8Array(u),p=0;p<c.length;p+=1)d[p]=c.charCodeAt(p);return i?new Blob([n?d:u],{type:r}):((m=new a).append(u),m.getBlob(r))};t.HTMLCanvasElement&&!r.toBlob&&(r.mozGetAsFile?r.toBlob=function(e,t,i){var n=this;setTimeout(function(){i&&r.toDataURL&&o?e(o(n.toDataURL(t,i))):e(n.mozGetAsFile("blob",t))})}:r.toDataURL&&o&&(r.toBlob=function(e,t,r){var i=this;setTimeout(function(){e(o(i.toDataURL(t,r)))})})),e.exports?e.exports=o:t.dataURLtoBlob=o}(window)}),r=Object.prototype.toString,i=function(e){return e instanceof Blob||"[object Blob]"===r.call(e)},n={checkOrientation:!0,maxWidth:1/0,maxHeight:1/0,minWidth:0,minHeight:0,width:void 0,height:void 0,quality:.8,mimeType:"auto",convertSize:5e6,success:null,error:null},a=/^image\/.+$/;function s(e){return a.test(e)}function o(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=s(e)?e.substr(6):"";return"jpeg"===r&&(r="jpg"),r&&t&&(r="."+r),r}var l=String.fromCharCode;function c(e,t,r){var i="",n=void 0;for(r+=t,n=t;n<r;n+=1)i+=l(e.getUint8(n));return i}var u,d=window.btoa;function p(e,t){var r=new Uint8Array(e),i=r.length,n="",a=void 0;for(a=0;a<i;a+=1)n+=l(r[a]);return"data:"+t+";base64,"+d(n)}function m(e){var t=new DataView(e),r=void 0,i=void 0,n=void 0,a=void 0;if(255===t.getUint8(0)&&216===t.getUint8(1))for(var s=t.byteLength,o=2;o<s;){if(255===t.getUint8(o)&&225===t.getUint8(o+1)){n=o;break}o+=1}if(n){var l,u=n+10;if("Exif"===c(t,n+4,4)){var d=t.getUint16(u);if(((i=18761===d)||19789===d)&&42===t.getUint16(u+2,i)){var p=t.getUint32(u+4,i);p>=8&&(a=u+p)}}}if(a){var m=t.getUint16(a,i),f=void 0,v=void 0;for(v=0;v<m;v+=1)if(f=a+12*v+2,274===t.getUint16(f,i)){f+=8,r=t.getUint16(f,i),t.setUint16(f,1,i);break}}return r}function f(e){var t=0,r=1,i=1;switch(e){case 2:r=-1;break;case 3:t=-180;break;case 4:i=-1;break;case 5:t=90,i=-1;break;case 6:t=90;break;case 7:t=90,r=-1;break;case 8:t=-90}return{rotate:t,scaleX:r,scaleY:i}}var v=function(){function e(e){this.value=e}function t(t){var r,i;function n(e,t){return new Promise(function(n,s){var o={key:e,arg:t,resolve:n,reject:s,next:null};i?i=i.next=o:(r=i=o,a(e,t))})}function a(r,i){try{var n=t[r](i),o=n.value;o instanceof e?Promise.resolve(o.value).then(function(e){a("next",e)},function(e){a("throw",e)}):s(n.done?"return":"normal",n.value)}catch(e){s("throw",e)}}function s(e,t){switch(e){case"return":r.resolve({value:t,done:!0});break;case"throw":r.reject(t);break;default:r.resolve({value:t,done:!1})}(r=r.next)?a(r.key,r.arg):i=null}this._invoke=n,"function"!=typeof t.return&&(this.return=void 0)}return"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)},{wrap:function(e){return function(){return new t(e.apply(this,arguments))}},await:function(t){return new e(t)}}}(),h=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},g=function(){function e(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,r,i){return r&&e(t.prototype,r),i&&e(t,i),t}}(),_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},y=window,b=y.ArrayBuffer,x=y.FileReader,k=window.URL||window.webkitURL,w=/\.\w+$/,C;return function(){function e(t,r){h(this,e),this.result=null,t&&this.compress(t,r)}return g(e,[{key:"compress",value:function e(r,a){var l=this,c=new Image;return a=_({},n,a),b||(a.checkOrientation=!1),new Promise(function(e,t){if(i(r)){var n=r.type;if(s(n))if(k||x){if(k&&!a.checkOrientation)e(k.createObjectURL(r));else if(x){var o=new x,l=a.checkOrientation&&"image/jpeg"===n;o.onload=function(t){var r,i=t.target.result;e(l?_({url:p(i,n)},f(m(i))):{url:i})},o.onabort=t,o.onerror=t,l?o.readAsArrayBuffer(r):o.readAsDataURL(r)}}else t(new Error("The current browser does not support image compression."));else t(new Error("The first argument must be an image File or Blob object."))}else t(new Error("The first argument must be a File or Blob object."))}).then(function(e){return new Promise(function(t,i){c.onload=function(){return t(_({},e,{naturalWidth:c.naturalWidth,naturalHeight:c.naturalHeight}))},c.onabort=i,c.onerror=i,c.alt=r.name,c.src=e.url})}).then(function(e){var i=e.naturalWidth,n=e.naturalHeight,o=e.rotate,l=void 0===o?0:o,u=e.scaleX,d=void 0===u?1:u,p=e.scaleY,m=void 0===p?1:p;return new Promise(function(e){var o=document.createElement("canvas"),u=o.getContext("2d"),p=i/n,f=Math.max(a.maxWidth,0)||1/0,v=Math.max(a.maxHeight,0)||1/0,h=Math.max(a.minWidth,0)||0,g=Math.max(a.minHeight,0)||0,_=i,y=n,b;if(f<1/0&&v<1/0?v*p>f?v=f/p:f=v*p:f<1/0?v=f/p:v<1/0&&(f=v*p),h>0&&g>0?g*p>h?g=h/p:h=g*p:h>0?g=h/p:g>0&&(h=g*p),a.width>0)y=(_=a.width)/p;else if(a.height>0){var x;_=(y=a.height)*p}var k=-(_=Math.min(Math.max(_,h),f))/2,w=-(y=Math.min(Math.max(y,g),v))/2,C=_,O=y;if(Math.abs(l)%180==90){var j={width:y,height:_};_=j.width,y=j.height}o.width=_,o.height=y,u.fillStyle="transparent",u.fillRect(0,0,_,y),u.save(),u.translate(_/2,y/2),u.rotate(l*Math.PI/180),u.scale(d,m),u.drawImage(c,Math.floor(k),Math.floor(w),Math.floor(C),Math.floor(O)),u.restore(),s(a.mimeType)||(a.mimeType=r.type),r.size>a.convertSize&&"image/png"===a.mimeType&&(a.mimeType="image/jpeg");var S=function t(r){e({naturalWidth:i,naturalHeight:n,result:r})};o.toBlob?o.toBlob(S,a.mimeType,a.quality):S(t(o.toDataURL(a.mimeType,a.quality)))})}).then(function(e){var t=e.naturalWidth,i=e.naturalHeight,n=e.result;if(k&&k.revokeObjectURL(c.src),n)if(n.size>r.size&&!(a.width>t||a.height>i||a.minWidth>t||a.minHeight>i))n=r;else{var s=new Date;n.lastModified=s.getTime(),n.lastModifiedDate=s,n.name=r.name,n.name&&n.type!==r.type&&(n.name=n.name.replace(w,o(n.type)))}else n=r;return l.result=n,a.success&&a.success(n),Promise.resolve(n)}).catch(function(e){if(!a.error)throw e;a.error(e)})}}]),e}()},e.exports=n()},BM37:function(e,t,r){function i(e){r("bJED")}var n,a,s,o=!1,l,c=null,u=null,d=r("VU/8")(r("v/Ja"),r("oE/I"),!1,i,null,null);e.exports=d.exports},COoG:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-dialog",{attrs:{fullscreen:"",transition:"dialog-bottom-transition"},model:{value:e.modal,callback:function(t){e.modal=t},expression:"modal"}},[r("v-card",{attrs:{light:!0}},[r("v-toolbar",{attrs:{color:"blue lighten-2"}},[r("v-btn",{staticClass:"white--text",attrs:{icon:""},on:{click:e.closeGalleryModal}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"white--text"},[e._v("Upload Images PID: "+e._s(e.id)+" ")]),e._v(" "),r("v-spacer")],1),e._v(" "),r("uploads",{attrs:{single:e.single,"post-url":e.postUrl,"file-key":e.fileKey,item:e.item}})],1)],1)},i=[];e.exports={render:r,staticRenderFns:i}},Cr03:function(e,t,r){function i(e){r("Ny8B")}var n,a,s,o=!1,l,c=null,u=null,d=r("VU/8")(r("tg1A"),r("4vl6"),!1,i,null,null);e.exports=d.exports},Da4K:function(e,t,r){function i(e){r("YVGI")}var n,a,s,o=!1,l,c=null,u=null,d=r("VU/8")(r("gDjt"),r("mFbT"),!1,i,null,null);e.exports=d.exports},EWKR:function(e,t,r){var i,n,a,s=!1,o=null,l=null,c=null,u=r("VU/8")(r("3knJ"),r("l+Hr"),!1,null,null,null);e.exports=u.exports},FwgM:function(e,t,r){var i=r("rtge");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("22bc7584",i,!0,{})},Lm9M:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("5erj"),n=r.n(i),a=r("1Wvq"),s=r.n(a);t.default={components:{FileUpload:s.a},props:{fileKey:{type:String,required:!0},putUrl:{type:String,default:""},postUrl:{type:String,required:!0},single:{type:Boolean,required:!0},item:{type:Object,required:!0}},data:function e(){return{th:[{text:"Thumb",value:"thumb",align:"left",sortable:!0},{text:"Name",value:"name",align:"left",sortable:!0},{text:"Size",value:"size",align:"left",sortable:!0},{text:"Progress",value:"progress",align:"left",sortable:!0},{text:"Status",value:"speed",align:"left",sortable:!0},{text:"Actions",align:"center",sortable:!1}],files:[],accept:"image/png,image/gif,image/jpeg,image/webp",extensions:"gif,jpg,jpeg,png,webp",minSize:1024,size:10485760,multiple:!0,directory:!1,drop:!0,dropDirectory:!0,addIndex:!1,thread:3,name:"file",postAction:"/uploads/post",putAction:"/uploads/put",headers:{"X-Csrf-Token":App.csrfToken,Authorization:""},data:{_csrf_token:App.csrfToken},autoCompress:1048576,uploadAuto:!1,isOption:!1,maxInput:function e(t){return t.length<=30||"Input too long!"},perPageData:[10,25,50,{text:"All",value:-1}]}},watch:{fileKey:function e(t){this.name=t}},mounted:function e(){this.postAction=this.postUrl?this.postUrl:"/uploads/post",this.putAction=this.putUrl?this.putUrl:null,this.headers.Authorization="Bearer "+vm.$auth.token(),!0===this.single?this.multiple=!1:this.multiple=!0},methods:{progress:function e(t){return Math.round(t)},remove:function e(t){this.$refs.upload.remove(t)},inputFilter:function e(t,r,i){var a=this;if(t&&!r){if(/(\/|^)(Thumbs\.db|desktop\.ini|\..+)$/.test(t.name))return i();if(/\.(php5?|html?|jsx?)$/i.test(t.name))return i();var s;if(t.file&&"image/"===t.type.substr(0,6)&&this.autoCompress>0&&this.autoCompress<t.size)t.error="compressing",new n.a(null,{convertSize:1/0,maxWidth:1024,maxHeight:1024}).compress(t.file).then(function(e){a.$refs.upload.update(t,{error:"",file:e,size:e.size,type:e.type})}).catch(function(e){a.$refs.upload.update(t,{error:e.message||"compress"})})}if(t&&(!r||t.file!==r.file)){t.blob="";var o=window.URL||window.webkitURL;o&&o.createObjectURL&&(t.blob=o.createObjectURL(t.file)),t.thumb="",t.blob&&"image/"===t.type.substr(0,6)&&(t.thumb=t.blob)}},inputFile:function e(t,r){if(t&&r&&(t.active&&!r.active&&t.size>=0&&this.minSize>0&&t.size<this.minSize&&this.$refs.upload.update(t,{error:"size"}),t.progress,r.progress,t.error&&r.error,t.success&&!r.success)){var i=t.response[this.fileKey];"damaged_images"===this.fileKey&&(null===this.item.damaged_images&&(this.item.damaged_images=[]),this.item.damaged_images.push(i)),"package_images"===this.fileKey&&(null===this.item.package_images&&(this.item.package_images=[]),this.item.package_images.push(i))}!t&&r&&r.success&&r.response.id,Boolean(t)===Boolean(r)&&r.error===t.error||this.uploadAuto&&!this.$refs.upload.active&&(this.$refs.upload.active=!0)}}}},N7NN:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-dialog",{attrs:{fullscreen:"",transition:"dialog-bottom-transition"},model:{value:e.modal,callback:function(t){e.modal=t},expression:"modal"}},[r("v-card",{attrs:{light:!0}},[r("v-toolbar",{attrs:{color:"primary"}},[r("v-btn",{staticClass:"white--text",attrs:{icon:""},on:{click:e.close}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"white--text"},[e._v("Item # "+e._s(e.id)+" Images")]),e._v(" "),r("v-spacer")],1),e._v(" "),e.images.length>0?r("v-container",{attrs:{fluid:""}},[r("v-layout",{attrs:{row:"",wrap:""}},e._l(e.images,function(t){return r("v-flex",{key:t,attrs:{xs12:"",md4:"","px-2":"","py-2":""}},[r("v-card-media",{attrs:{src:t,height:"250px",contain:""},on:{click:function(r){e.viewFullImage(t)}}})],1)}))],1):r("v-container",{attrs:{fluid:""}},[r("v-alert",{attrs:{value:!0,type:"info",color:"amber",icon:"warning",transition:"scale-transition",outline:""}},[e._v("\n        No Uploaded Images For This Item\n      ")])],1)],1)],1)},i=[];e.exports={render:r,staticRenderFns:i}},Ny8B:function(e,t,r){var i=r("pfLK");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("30577b17",i,!0,{})},OGqB:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{id:{type:String,required:!0},images:{type:Array,required:!0,default:function e(){return[]}}},data:function e(){return{modal:!1}},mounted:function e(){var t=this;Bus.$on("view-package-"+this.id+"-images",function(){t.modal=!0})},methods:{close:function e(){this.modal=!1},viewFullImage:function e(t){window.open(t)}}}},VBoa:function(e,t,r){function i(e){r("FwgM")}var n,a,s,o=!1,l,c=null,u=null,d=r("VU/8")(r("jk6W"),r("COoG"),!1,i,null,null);e.exports=d.exports},YVGI:function(e,t,r){var i=r("aCck");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("6be32da2",i,!0,{})},aCck:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},bJED:function(e,t,r){var i=r("l5fR");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("7be83c7f",i,!0,{})},dgbI:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-app",{attrs:{standalone:""}},[r("v-content",{staticClass:"white"},[r("v-container",{staticClass:"pa-0 ma-0",attrs:{transition:"slide-x-transition",fluid:""}},[r("v-card",{attrs:{flat:!0}},[e._t("toolbar"),e._v(" "),e._t("default")],2)],1),e._v(" "),e._t("footer")],2)],1)},i=[];e.exports={render:r,staticRenderFns:i}},fcHn:function(e,t,r){var i=r("0iHF");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("1fdae21f",i,!0,{})},gDjt:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{id:{type:String,required:!0},images:{type:Array,required:!0,default:function e(){return[]}}},data:function e(){return{modal:!1}},mounted:function e(){var t=this;Bus.$on("view-damaged-package-"+this.id+"-images",function(){t.modal=!0})},methods:{close:function e(){this.modal=!1},viewFullImage:function e(t){window.open(t)}}}},gvVL:function(e,t,r){"use strict";t.a={methods:{errorMessages:function e(t){return this.errors.collect(t).concat(this.form.errors.only(t))},hasErrors:function e(t){var r;return this.errors.collect(t).concat(this.form.errors.only(t)).length>0}}}},jk6W:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("1LfK"),n=r.n(i);t.default={components:{uploads:n.a},props:{id:{type:Number,required:!0},item:{type:Object,required:!0}},data:function e(){return{single:!1,modal:!1,fileKey:"package_images"}},computed:{postUrl:function e(){var t=this,r=this.id;return route("api.package.uploadPackageImages",{id:r})}},mounted:function e(){var t=this;Bus.$on("upload-package-images-"+this.item.id,function(){t.modal=!0})},methods:{closeGalleryModal:function e(){this.modal=!1}}}},"l+Hr":function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("modal-layout",{staticClass:"white"},[r("v-card",{attrs:{flat:!0}},[r("v-toolbar",{staticClass:"primary",attrs:{fixed:"",app:""}},[r("v-btn",{attrs:{flat:"",icon:"",color:"white"},nativeOn:{click:function(t){e.redirectBack()}}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-xs-center white--text"},[e._v("Update DSG# "+e._s(e.id))]),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-items",[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,flat:"",color:"white"},nativeOn:{click:function(t){e.submit()}}},[e._v("\n          Save\n          "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:"","my-0":"","py-0":"","mx-3":"","px-3":""}},[r("v-flex",{attrs:{xs12:"",lg4:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("customer")},attrs:{items:e.customers,"error-messages":e.errorMessages("customer"),"item-text":"name","item-value":"id",required:"",label:"Choose Customer",light:"",chips:"","prepend-icon":"supervised_user_circle","data-vv-name":"customer"},model:{value:e.form.customer_id,callback:function(t){e.$set(e.form,"customer_id",t)},expression:"form.customer_id"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg4:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("client")},attrs:{items:e.clients,"error-messages":e.errorMessages("client"),"item-text":"name","item-value":"name",chips:"",light:"",dense:"",required:"",label:"Choose Client or Type Name","prepend-icon":"fa-users","data-vv-name":"client"},model:{value:e.form.client_name,callback:function(t){e.$set(e.form,"client_name",t)},expression:"form.client_name"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg4:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("shipper")},attrs:{items:e.shippers,"error-messages":e.errorMessages("shipper"),"item-text":"name","item-value":"id",required:"",label:"Choose Shipper",light:"",chips:"","prepend-icon":"fa-ship","data-vv-name":"shipper"},model:{value:e.form.shipper_id,callback:function(t){e.$set(e.form,"shipper_id",t)},expression:"form.shipper_id"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("received_by")},attrs:{items:e.employees,"error-messages":e.errorMessages("received_by"),"item-text":"name","item-value":"id",required:"",label:"Received By",light:"",chips:"","prepend-icon":"how_to_reg","data-vv-name":"received_by"},model:{value:e.form.received_by,callback:function(t){e.$set(e.form,"received_by",t)},expression:"form.received_by"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("written_by")},attrs:{items:e.employees,"error-messages":e.errorMessages("written_by"),"item-text":"name","item-value":"id",required:"",label:"Written By",light:"",chips:"","prepend-icon":"local_library","data-vv-name":"written_by"},model:{value:e.form.written_by,callback:function(t){e.$set(e.form,"written_by",t)},expression:"form.written_by"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("inspected_by")},attrs:{items:e.employees,"error-messages":e.errorMessages("inspected_by"),"item-text":"name","item-value":"id",required:"",label:"Inspected By",light:"",chips:"","prepend-icon":"search","data-vv-name":"inspected_by"},model:{value:e.form.inspected_by,callback:function(t){e.$set(e.form,"inspected_by",t)},expression:"form.inspected_by"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg3:""}},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("located_by")},attrs:{items:e.employees,"error-messages":e.errorMessages("located_by"),"item-text":"name","item-value":"id",required:"",label:"Located By",light:"",chips:"","prepend-icon":"person_pin","data-vv-name":"located_by"},model:{value:e.form.located_by,callback:function(t){e.$set(e.form,"located_by",t)},expression:"form.located_by"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0},expression:"{ required: true }"}],class:{"error--text":e.hasErrors("po_no")},attrs:{"error-messages":e.errorMessages("po_no"),light:"",label:"PO No.","prepend-icon":"bookmark","data-vv-name":"po_no"},model:{value:e.po_no,callback:function(t){e.po_no=t},expression:"po_no"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-dialog",{ref:"date_received",attrs:{"return-value":e.date_received,persistent:"",lazy:"","full-width":"",width:"290px"},on:{"update:returnValue":function(t){e.date_received=t}},model:{value:e.date_received_modal,callback:function(t){e.date_received_modal=t},expression:"date_received_modal"}},[r("v-text-field",{attrs:{slot:"activator",label:"Date Received","prepend-icon":"event_available",readonly:""},slot:"activator",model:{value:e.date_received,callback:function(t){e.date_received=t},expression:"date_received"}}),e._v(" "),r("v-date-picker",{attrs:{scrollable:""},model:{value:e.date_received,callback:function(t){e.date_received=t},expression:"date_received"}},[r("v-spacer"),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.date_received_modal=!1}}},[e._v("Cancel")]),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.$refs.date_received.save(e.date_received)}}},[e._v("OK")])],1)],1)],1),e._v(" "),r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-dialog",{ref:"date_processed",attrs:{"return-value":e.date_processed,persistent:"",lazy:"","full-width":"",width:"290px"},on:{"update:returnValue":function(t){e.date_processed=t}},model:{value:e.date_processed_modal,callback:function(t){e.date_processed_modal=t},expression:"date_processed_modal"}},[r("v-text-field",{attrs:{slot:"activator",label:"Date Processed","prepend-icon":"event_note",readonly:""},slot:"activator",model:{value:e.date_processed,callback:function(t){e.date_processed=t},expression:"date_processed"}}),e._v(" "),r("v-date-picker",{attrs:{scrollable:""},model:{value:e.date_processed,callback:function(t){e.date_processed=t},expression:"date_processed"}},[r("v-spacer"),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.date_processed_modal=!1}}},[e._v("Cancel")]),e._v(" "),r("v-btn",{attrs:{flat:"",color:"primary"},on:{click:function(t){e.$refs.date_processed.save(e.date_processed)}}},[e._v("OK")])],1)],1)],1),e._v(" "),e.packages.length>0?r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-text-field",{attrs:{readonly:"",label:"Total Pieces","prepend-icon":"category"},model:{value:e.form.total_pieces,callback:function(t){e.$set(e.form,"total_pieces",t)},expression:"form.total_pieces"}})],1):e._e(),e._v(" "),e.packages.length>0?r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-text-field",{attrs:{readonly:"",label:"Total Cube","prepend-icon":"fa-cubes",suffix:"ft³"},model:{value:e.form.total_cube,callback:function(t){e.$set(e.form,"total_cube",t)},expression:"form.total_cube"}})],1):e._e(),e._v(" "),e.packages.length>0?r("v-flex",{attrs:{xs12:"",lg2:""}},[r("v-text-field",{attrs:{readonly:"","prepend-icon":"attach_money",label:"Receiving Amount",suffix:"USD"},model:{value:e.form.receiving_amount,callback:function(t){e.$set(e.form,"receiving_amount",t)},expression:"form.receiving_amount"}})],1):e._e()],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:"","my-0":"","py-0":"","mx-3":"","px-3":""}},[!e.packages.length>0?r("v-flex",{attrs:{xs12:""}},[r("v-btn",{staticClass:"white--text",attrs:{disabled:e.errors.any(),color:"blue-grey",block:""},on:{click:e.addNewPackage}},[e._v("\n          Add New Package "),r("v-icon",{attrs:{right:""}},[e._v("library_add")])],1)],1):e._e()],1),e._v(" "),e._l(e.packages,function(t,i){return r("packages",{key:i,attrs:{index:i+1,item:t,iteration:i,packages:e.packages,bins:e.bins,"handling-rates":e.handling_rates,"storage-rates":e.storage_rates,form:e.form}})})],2)],1)},i=[];e.exports={render:r,staticRenderFns:i}},l5fR:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},mFbT:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-dialog",{attrs:{fullscreen:"",transition:"dialog-bottom-transition"},model:{value:e.modal,callback:function(t){e.modal=t},expression:"modal"}},[r("v-card",{attrs:{light:!0}},[r("v-toolbar",{attrs:{color:"primary"}},[r("v-btn",{staticClass:"white--text",attrs:{icon:""},on:{click:e.close}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"white--text"},[e._v("Item # "+e._s(e.id)+" Damaged Images")]),e._v(" "),r("v-spacer")],1),e._v(" "),e.images.length>0?r("v-container",{attrs:{fluid:""}},[r("v-layout",{attrs:{row:"",wrap:""}},e._l(e.images,function(t){return r("v-flex",{key:t,attrs:{xs12:"",md4:"","px-2":"","py-2":""}},[r("v-card-media",{attrs:{src:t,height:"250px",contain:""},on:{click:function(r){e.viewFullImage(t)}}})],1)}))],1):r("v-container",{attrs:{fluid:""}},[r("v-alert",{attrs:{value:!0,type:"info",color:"amber",icon:"warning",transition:"scale-transition",outline:""}},[e._v("\n        No Uploaded Damaged Images For This Item\n      ")])],1)],1)],1)},i=[];e.exports={render:r,staticRenderFns:i}},nkjN:function(e,t,r){function i(e){r("fcHn")}var n,a,s,o=!1,l,c=null,u=null,d=r("VU/8")(r("OGqB"),r("N7NN"),!1,i,null,null);e.exports=d.exports},"oE/I":function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-dialog",{attrs:{fullscreen:"",transition:"dialog-bottom-transition"},model:{value:e.modal,callback:function(t){e.modal=t},expression:"modal"}},[r("v-card",{attrs:{light:!0}},[r("v-toolbar",{attrs:{color:"error"}},[r("v-btn",{staticClass:"white--text",attrs:{icon:""},on:{click:e.close}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"white--text"},[e._v("Upload Damaged Images PID: "+e._s(e.id))]),e._v(" "),r("v-spacer")],1),e._v(" "),r("uploads",{attrs:{single:e.single,"post-url":e.postUrl,"file-key":e.fileKey,item:e.item}})],1)],1)},i=[];e.exports={render:r,staticRenderFns:i}},pfLK:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},pwLK:function(e,t,r){var i=r("zr7H");"string"==typeof i&&(i=[[e.i,i,""]]),i.locals&&(e.exports=i.locals);var n=r("rjj0")("57bf4ea8",i,!0,{})},rjj0:function(e,t,r){var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var n=r("tTVk"),a={},s=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,l=0,c=!1,u=function(){},d=null,p="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function f(e){for(var t=0;t<e.length;t++){var r=e[t],i=a[r.id];if(i){i.refs++;for(var n=0;n<i.parts.length;n++)i.parts[n](r.parts[n]);for(;n<r.parts.length;n++)i.parts.push(h(r.parts[n]));i.parts.length>r.parts.length&&(i.parts.length=r.parts.length)}else{for(var s=[],n=0;n<r.parts.length;n++)s.push(h(r.parts[n]));a[r.id]={id:r.id,refs:1,parts:s}}}}function v(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function h(e){var t,r,i=document.querySelector("style["+p+'~="'+e.id+'"]');if(i){if(c)return u;i.parentNode.removeChild(i)}if(m){var n=l++;i=o||(o=v()),t=y.bind(null,i,n,!1),r=y.bind(null,i,n,!0)}else i=v(),t=b.bind(null,i),r=function(){i.parentNode.removeChild(i)};return t(e),function i(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else r()}}e.exports=function(e,t,r,i){c=r,d=i||{};var s=n(e,t);return f(s),function t(r){for(var i=[],o=0;o<s.length;o++){var l=s[o],c;(c=a[l.id]).refs--,i.push(c)}r?f(s=n(e,r)):s=[];for(var o=0;o<i.length;o++){var c;if(0===(c=i[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete a[c.id]}}}};var g=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")}),_;function y(e,t,r,i){var n=r?"":i.css;if(e.styleSheet)e.styleSheet.cssText=g(t,n);else{var a=document.createTextNode(n),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(a,s[t]):e.appendChild(a)}}function b(e,t){var r=t.css,i=t.media,n=t.sourceMap;if(i&&e.setAttribute("media",i),d.ssrId&&e.setAttribute(p,t.id),n&&(r+="\n/*# sourceURL="+n.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},rtge:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},tTVk:function(e,t){e.exports=function e(t,r){for(var i=[],n={},a=0;a<r.length;a++){var s=r[a],o=s[0],l,c,u,d={id:t+":"+a,css:s[1],media:s[2],sourceMap:s[3]};n[o]?n[o].parts.push(d):i.push(n[o]={id:o,parts:[d]})}return i}},tg1A:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("VBoa"),n=r.n(i),a=r("BM37"),s=r.n(a),o=r("gvVL"),l=r("nkjN"),c=r.n(l),u=r("Da4K"),d=r.n(u);t.default={components:{PackageImagesUploader:n.a,DamagedImagesUploader:s.a,Images:c.a,DamageImages:d.a},mixins:[o.a],props:{item:{type:Object,required:!0},packages:{type:Array,required:!0},bins:{type:Array,required:!0},handlingRates:{type:Array,required:!0},storageRates:{type:Array,required:!0},form:{type:Object,required:!0},readonly:{type:Boolean,default:!1},index:{type:Number,default:1},iteration:{type:Number,default:0}},data:function e(){return{store_at:["rack","floor"],date_repaired_modal:!1,date_repaired:null}},watch:{"item.length":function e(t){this.updatetotalCube()},"item.width":function e(t){this.updatetotalCube()},"item.height":function e(t){this.updatetotalCube()},"item.handling_type":function e(t){var r=this,i=_.find(this.handlingRates,function(e){return e.id===t});this.item.handling_fee=i.amount},"item.store_at":function e(t){var r=this,i=_.find(this.storageRates,function(e){var r=e.name,i;return(r=r.split(" ")[0].toLowerCase())===t});this.item.storage_fee=i.amount},"item.bin_id":{handler:function e(t){var r=this;if(null!=t||void 0!=t){if(this.bins.length>0){var i=_.find(this.bins,function(e){return e.id===t});void 0!=i&&(this.item.bin_name=i.code)}}else this.item.bin_name=null},deep:!1}},methods:{openDateRepairedModal:function e(){this.readonly||(this.date_repaired_modal=!0)},viewDamageImages:function e(){Bus.$emit("view-damaged-package-"+this.item.id+"-images")},viewImages:function e(){Bus.$emit("view-package-"+this.item.id+"-images")},clonePackage:function e(){var t=this;axios.post(route("api.package.add")).then(function(e){var r=e.data.data;r.dsg_id=t.item.dsg_id,r.date_received=t.item.date_received,r.date_processed=t.item.date_processed,r.client_id=t.item.client_id,r.client_name=t.item.client_name,r.customer_id=t.item.customer_id,r.customer_name=t.item.customer_name,r.shipper_id=t.item.shipper_id,r.shipper_name=t.item.shipper_name,r.bin_id=t.item.bin_id,r.bin_name=t.item.bin_name,r.po_no=t.item.po_no,r.style_no=t.item.style_no,r.length=t.item.length,r.width=t.item.width,r.height=t.item.height,r.cube=t.item.cube,r.damaged=t.item.damaged,r.damage_description=t.item.damage_description,r.repaired=t.item.repaired,r.date_repaired=t.item.date_repaired,r.handling_fee=t.item.handling_fee,r.handling_type=t.item.handling_type,r.store_at=t.item.store_at,r.storage_fee=t.item.storage_fee,r.description=t.item.description,t.packages.push(r),t.form.packages.push(r)})},addNewPackage:function e(){var t=this;axios.post(route("api.package.add")).then(function(e){var r=e.data.data;r.date_received=t.item.date_received,r.date_processed=t.item.date_processed,r.po_no=t.item.po_no,r.customer_id=t.form.customer_id,r.customer_name=t.form.customer_name,r.client_id=t.form.client_id,r.client_name=t.form.client_name,r.shipper_id=t.form.shipper_id,r.shipper_name=t.form.shipper_name,t.packages.push(r)})},updatetotalCube:function e(){var t=this.item.length*this.item.width*this.item.height;this.item.cube=Math.ceil((t/1728).toFixed(4))},save:function e(t,r){var i="date_repaired_"+t.id;this.$refs[i].save(r)},toggleModal:function e(t){this.date_repaired_modal=!this.date_repaired_modal},openPackageImagesModal:function e(){Bus.$emit("upload-package-images-"+this.item.id)},openDamagedImagesModal:function e(){Bus.$emit("upload-damaged-images-"+this.item.id)},deletePackage:function e(t){var r=this;axios.post(route("api.package.delete",{id:t})).then(function(){var e=_.findIndex(r.packages,{id:t});r.packages.splice(e,1)})},getStoreAt:function e(t){return t?"Store At: Floor":"Store At: Rack"},getDamageStatus:function e(t){return t?"Damaged: Yes":"Damaged: No"},getRepairedStatus:function e(t){return t?"Repaired: Yes":"Repaired: No"}}}},"v/Ja":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r("1LfK"),n=r.n(i);t.default={components:{uploads:n.a},props:{id:{type:Number,required:!0},item:{type:Object,required:!0}},data:function e(){return{single:!1,modal:!1,fileKey:"damaged_images"}},computed:{postUrl:function e(){var t=this,r=this.id;return route("api.package.uploadDamageImage",{id:r})}},mounted:function e(){var t=this;Bus.$on("upload-damaged-images-"+this.item.id,function(){t.modal=!0})},methods:{close:function e(){this.modal=!1}}}},zr7H:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".v-messages__message{color:#e57373}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,