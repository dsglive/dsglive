webpackJsonp([57],{"2gGM":function(e,t,r){e.exports=function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},r.n=function(e){var t=e&&e.__esModule?function t(){return e.default}:function t(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./",r(r.s=0)}({0:function(e,t,r){e.exports=r("lVK7")},OMN4:function(e,t){e.exports=r("mtWM")},lVK7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r("OMN4"),n=r.n(s);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function o(e){if(null===e||"object"!==a(e))return e;var t=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(r){t[r]=o(e[r])}),t}function i(e){return Array.isArray(e)?e:[e]}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e}).apply(this,arguments)}function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function m(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var p=function(){function e(){f(this,e),this.errors={}}return m(e,[{key:"set",value:function e(t,r){"object"===c(t)?this.errors=t:this.set(u({},this.errors,l({},t,i(r))))}},{key:"all",value:function e(){return this.errors}},{key:"has",value:function e(t){return this.errors.hasOwnProperty(t)}},{key:"hasAny",value:function e(){for(var t=this,r=arguments.length,s=new Array(r),n=0;n<r;n++)s[n]=arguments[n];return s.some(function(e){return t.has(e)})}},{key:"any",value:function e(){return Object.keys(this.errors).length>0}},{key:"get",value:function e(t){if(this.has(t))return this.getAll(t)[0]}},{key:"getAll",value:function e(t){return i(this.errors[t]||[])}},{key:"only",value:function e(){for(var t=this,r=[],s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];return n.forEach(function(e){var s=t.get(e);s&&r.push(s)}),r}},{key:"flatten",value:function e(){return Object.values(this.errors).reduce(function(e,t){return e.concat(t)},[])}},{key:"clear",value:function e(t){var r=this,s={};t&&Object.keys(this.errors).forEach(function(e){e!==t&&(s[e]=r.errors[e])}),this.set(s)}}]),e}();function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e}).apply(this,arguments)}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var r=0;r<t.length;r++){var s=t[r];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function x(e,t,r){return t&&_(e.prototype,t),r&&_(e,r),e}var g=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};b(this,e),this.busy=!1,this.successful=!1,this.errors=new p,this.originalData=o(t),Object.assign(this,t)}return x(e,[{key:"fill",value:function e(t){var r=this;this.keys().forEach(function(e){r[e]=t[e]})}},{key:"data",value:function e(){var t=this;return this.keys().reduce(function(e,r){return y({},e,h({},r,t[r]))},{})}},{key:"keys",value:function t(){return Object.keys(this).filter(function(t){return!e.ignore.includes(t)})}},{key:"startProcessing",value:function e(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function e(){this.busy=!1,this.successful=!0}},{key:"clear",value:function e(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function t(){var r=this;Object.keys(this).filter(function(t){return!e.ignore.includes(t)}).forEach(function(e){r[e]=o(r.originalData[e])})}},{key:"get",value:function e(t){return this.submit("get",t)}},{key:"post",value:function e(t){return this.submit("post",t)}},{key:"patch",value:function e(t){return this.submit("patch",t)}},{key:"put",value:function e(t){return this.submit("put",t)}},{key:"delete",value:function e(t){return this.submit("delete",t)}},{key:"submit",value:function e(t,r){var s=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var o="get"===t?{params:this.data()}:this.data();return new Promise(function(e,i){n.a.request(y({url:s.route(r),method:t,data:o},a)).then(function(t){s.finishProcessing(),e(t)}).catch(function(e){s.busy=!1,e.response&&s.errors.set(s.extractErrors(e.response)),i(e)})})}},{key:"extractErrors",value:function t(r){return r.data&&"object"===v(r.data)?r.data.errors?y({},r.data.errors):r.data.message?{error:r.data.message}:y({},r.data):{error:e.errorMessage}}},{key:"route",value:function t(r){var s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r;return e.routes.hasOwnProperty(r)&&(n=decodeURI(e.routes[r])),"object"!==v(s)&&(s={id:s}),Object.keys(s).forEach(function(e){n=n.replace("{".concat(e,"}"),s[e])}),n}},{key:"onKeydown",value:function e(t){t.target.name&&this.errors.clear(t.target.name)}}]),e}();g.routes={},g.errorMessage="Something went wrong. Please try again.",g.ignore=["busy","successful","errors","originalData"];var w=g,k,C,S;function E(e,t,r,s,n,a,o,i){var l=typeof(e=e||{}).default;"object"!==l&&"function"!==l||(e=e.default);var u="function"==typeof e?e.options:e,c;if(t&&(u.render=t,u.staticRenderFns=r,u._compiled=!0),s&&(u.functional=!0),a&&(u._scopeId=a),o?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=c):n&&(c=i?function(){n.call(this,this.$root.$options.shadowRoot)}:n),c)if(u.functional){u._injectStyles=c;var f=u.render;u.render=function e(t,r){return c.call(r),f(t,r)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,c):[c]}return{exports:e,options:u}}var $=!1,O=null,j=null,M=null,P,T=E({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.has(e.field)?r("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:e._s(e.form.errors.get(e.field))}}):e._e()},[],!1,null,null,null).exports,A={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function e(){this.dismissible&&this.form.clear()}}},N,U,q,L=!1,R=null,z=null,B=null,V,F=E({name:"alert-error",extends:A,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[e.form.errors.has("error")?r("div",{domProps:{innerHTML:e._s(e.form.errors.get("error"))}}):r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports,H,Z,I,D=!1,G=null,K=null,W=null,X,J=E({name:"alert-errors",extends:A,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e.message?r("div",{domProps:{innerHTML:e._s(e.message)}}):e._e(),e._v(" "),r("ul",e._l(e.form.errors.flatten(),function(t){return r("li",{domProps:{innerHTML:e._s(t)}})}))]):e._e()},[],!1,null,null,null).exports,Q,Y,ee,te=!1,re=null,se=null,ne=null,ae,oe=E({name:"alert-success",extends:A,props:{message:{type:String,default:""}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.successful?r("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports;r.d(t,"Form",function(){return w}),r.d(t,"Errors",function(){return p}),r.d(t,"HasError",function(){return T}),r.d(t,"AlertError",function(){return F}),r.d(t,"AlertErrors",function(){return J}),r.d(t,"AlertSuccess",function(){return oe}),r.d(t,"default",function(){return w})}})},"2yrZ":function(e,t,r){function s(e){r("pwLK")}var n,a=null,o,i=!1,l,u=null,c=null,f=r("VU/8")(null,r("dgbI"),!1,s,null,null);e.exports=f.exports},"7yII":function(e,t,r){var s,n,a,o=!1,i=null,l=null,u=null,c=r("VU/8")(r("Vt0v"),r("rnPZ"),!1,null,null,null);e.exports=c.exports},Vt0v:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r("Xxa5"),n=r.n(s),a=r("exGp"),o=r.n(a),i=r("2yrZ"),l=r.n(i),u=r("gvVL"),c=r("2gGM"),f=r.n(c),d=r("e7x4"),m=r.n(d);t.default={components:{ModalLayout:l.a},mixins:[u.a],data:function e(){return{form:new c.Form({username:null,active:!1,roles:[],password:null,password_confirmation:null,company_name:null,first_name:null,last_name:null,email:null,phone:null,address_1:null,address_2:null,city:null,state:null,zip:null,country:null,notes:null}),roles:[],password_visible:!1}},computed:{icon:function e(){return this.password_visible?"visibility":"visibility_off"}},mounted:function e(){var t=this;this.fetchRoles()},methods:{getStatus:function e(t){return t?"Status: Active":"Status: Inactive"},submit:function e(){var t=this;this.$validator.validateAll().then(function(e){var r;e?t.createUser():m.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Validation Error",html:'<p class="title">Please Fix Form Errors</p>',type:"warning",confirmButtonText:"Back"})})},createUser:function e(){var t=this;t.form.busy=!0,t.form.post(route("api.user.create"),t.form).then(function(e){var r;console.log(e.data),t.$validator.reset(),m.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success!",html:'<p class="title">User Has Been Created!</p>',type:"success",confirmButtonText:"Ok"}),t.$nextTick(function(){return t.$router.push({name:"users"})})}).catch(function(e){})},resetForm:function e(){var t=this;this.form=new c.Form({username:null,active:!1,roles:[],password:null,password_confirmation:null,company_name:null,first_name:null,last_name:null,email:null,phone:null,address_1:null,address_2:null,city:null,state:null,zip:null,country:null,notes:null})},fetchRoles:function(){var e=o()(n.a.mark(function e(){var t,r,s,a;return n.a.wrap(function e(n){for(;;)switch(n.prev=n.next){case 0:return t=this,n.prev=1,n.next=4,axios.get(route("api.roles.index"));case 4:r=n.sent,t.roles=r.data,n.next=14;break;case 8:n.prev=8,n.t0=n.catch(1),s=n.t0.errors,a=n.t0.message,s&&console.log("fetchRoles:errors",s),a&&console.log("fetchRoles:error-message",a);case 14:case"end":return n.stop()}},e,this,[[1,8]])}));function t(){return e.apply(this,arguments)}return t}(),redirectBack:function e(){var t=this;t.$nextTick(function(){return t.$router.push({name:"users"})})}}}},dgbI:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-app",{attrs:{standalone:""}},[r("v-content",{staticClass:"white"},[r("v-container",{staticClass:"pa-0 ma-0",attrs:{transition:"slide-x-transition",fluid:""}},[r("v-card",{attrs:{flat:!0}},[e._t("toolbar"),e._v(" "),e._t("default")],2)],1),e._v(" "),e._t("footer")],2)],1)},s=[];e.exports={render:r,staticRenderFns:s}},gvVL:function(e,t,r){"use strict";t.a={methods:{errorMessages:function e(t){return this.errors.collect(t).concat(this.form.errors.only(t))},hasErrors:function e(t){var r;return this.errors.collect(t).concat(this.form.errors.only(t)).length>0}}}},pwLK:function(e,t,r){var s=r("zr7H");"string"==typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var n=r("rjj0")("57bf4ea8",s,!0,{})},rjj0:function(e,t,r){var s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var n=r("tTVk"),a={},o=s&&(document.head||document.getElementsByTagName("head")[0]),i=null,l=0,u=!1,c=function(){},f=null,d="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function p(e){for(var t=0;t<e.length;t++){var r=e[t],s=a[r.id];if(s){s.refs++;for(var n=0;n<s.parts.length;n++)s.parts[n](r.parts[n]);for(;n<r.parts.length;n++)s.parts.push(h(r.parts[n]));s.parts.length>r.parts.length&&(s.parts.length=r.parts.length)}else{for(var o=[],n=0;n<r.parts.length;n++)o.push(h(r.parts[n]));a[r.id]={id:r.id,refs:1,parts:o}}}}function v(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function h(e){var t,r,s=document.querySelector("style["+d+'~="'+e.id+'"]');if(s){if(u)return c;s.parentNode.removeChild(s)}if(m){var n=l++;s=i||(i=v()),t=_.bind(null,s,n,!1),r=_.bind(null,s,n,!0)}else s=v(),t=x.bind(null,s),r=function(){s.parentNode.removeChild(s)};return t(e),function s(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else r()}}e.exports=function(e,t,r,s){u=r,f=s||{};var o=n(e,t);return p(o),function t(r){for(var s=[],i=0;i<o.length;i++){var l=o[i],u;(u=a[l.id]).refs--,s.push(u)}r?p(o=n(e,r)):o=[];for(var i=0;i<s.length;i++){var u;if(0===(u=s[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete a[u.id]}}}};var y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")}),b;function _(e,t,r,s){var n=r?"":s.css;if(e.styleSheet)e.styleSheet.cssText=y(t,n);else{var a=document.createTextNode(n),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function x(e,t){var r=t.css,s=t.media,n=t.sourceMap;if(s&&e.setAttribute("media",s),f.ssrId&&e.setAttribute(d,t.id),n&&(r+="\n/*# sourceURL="+n.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},rnPZ:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("modal-layout",{staticClass:"white"},[r("v-card",{attrs:{flat:!0}},[r("v-toolbar",{staticClass:"primary"},[r("v-btn",{attrs:{flat:"",icon:"",color:"white"},nativeOn:{click:function(t){e.redirectBack()}}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-xs-center white--text"},[e._v("User Creation Page")]),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-items",[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,flat:"",color:"white"},nativeOn:{click:function(t){e.submit()}}},[e._v("\n          Save\n          "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required|max:255|min:6|alpha_dash",expression:"'required|max:255|min:6|alpha_dash'"}],staticClass:"primary--text",class:{"error--text":e.hasErrors("username")},attrs:{"error-messages":e.errorMessages("username"),name:"username",label:"Username","data-vv-name":"username",counter:"255","prepend-icon":"fa-user"},model:{value:e.form.username,callback:function(t){e.$set(e.form,"username",t)},expression:"form.username"}})],1),e._v(" "),r("v-flex",{staticClass:"xs6 md4 offset-md2"},[r("v-autocomplete",{directives:[{name:"validate",rawName:"v-validate",value:"required",expression:"'required'"}],class:{"error--text":e.hasErrors("roles")},attrs:{items:e.roles,"error-messages":e.errorMessages("roles"),required:"",color:"blue-grey",label:"Select Account Type",light:"",chips:"",clearable:"","deletable-chips":"","prepend-icon":"fa-tags","data-vv-name":"roles"},model:{value:e.form.roles,callback:function(t){e.$set(e.form,"roles",t)},expression:"form.roles"}})],1),e._v(" "),r("v-flex",{staticClass:"xs6 md4"},[r("v-switch",{attrs:{label:e.getStatus(e.form.active),hint:"Note: Active User is Searchable On Warehouse/Receiving/Logistic Forms","persistent-hint":""},model:{value:e.form.active,callback:function(t){e.$set(e.form,"active",t)},expression:"form.active"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:"required|min:6|confirmed:confirmation",expression:"'required|min:6|confirmed:confirmation'"}],staticClass:"primary--text",class:{"error--text":e.hasErrors("password")},attrs:{"append-icon":e.icon,type:e.password_visible?"text":"password","error-messages":e.errorMessages("password"),name:"password",label:"Password","data-vv-name":"password","prepend-icon":"fa-key",counter:"255"},on:{"click:append":function(){return e.password_visible=!e.password_visible}},model:{value:e.form.password,callback:function(t){e.$set(e.form,"password",t)},expression:"form.password"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{ref:"confirmation",staticClass:"primary--text",class:{"error--text":e.hasErrors("password_confirmation")},attrs:{"append-icon":e.icon,type:e.password_visible?"text":"password","error-messages":e.errorMessages("password_confirmation"),name:"password_confirmation",label:"Confirm Password","prepend-icon":"fa-copy",counter:"255"},on:{"click:append":function(){return e.password_visible=!e.password_visible}},model:{value:e.form.password_confirmation,callback:function(t){e.$set(e.form,"password_confirmation",t)},expression:"form.password_confirmation"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{alpha_spaces:!0},expression:"{ alpha_spaces: true }"}],class:{"error--text":e.hasErrors("company_name")},attrs:{"error-messages":e.errorMessages("company_name"),label:"Company Name","prepend-icon":"domain","data-vv-name":"company_name"},model:{value:e.form.company_name,callback:function(t){e.$set(e.form,"company_name",t)},expression:"form.company_name"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{email:!0},expression:"{ email: true }"}],class:{"error--text":e.hasErrors("email")},attrs:{"error-messages":e.errorMessages("email"),label:"Email","prepend-icon":"mail","data-vv-name":"email"},model:{value:e.form.email,callback:function(t){e.$set(e.form,"email",t)},expression:"form.email"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0,regex:/^[a-zA-Z0-9 ]+$/},expression:"{ required: true, regex: /^[a-zA-Z0-9 ]+$/ }"}],class:{"error--text":e.hasErrors("first_name")},attrs:{"error-messages":e.errorMessages("first_name"),label:"First Name","prepend-icon":"person","data-vv-name":"first_name"},model:{value:e.form.first_name,callback:function(t){e.$set(e.form,"first_name",t)},expression:"form.first_name"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{required:!0,regex:/^[a-zA-Z0-9 ]+$/},expression:"{ required: true, regex: /^[a-zA-Z0-9 ]+$/ }"}],class:{"error--text":e.hasErrors("last_name")},attrs:{"error-messages":e.errorMessages("last_name"),label:"Last Name","prepend-icon":"people","data-vv-name":"last_name"},model:{value:e.form.last_name,callback:function(t){e.$set(e.form,"last_name",t)},expression:"form.last_name"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Phone","prepend-icon":"phone"},model:{value:e.form.phone,callback:function(t){e.$set(e.form,"phone",t)},expression:"form.phone"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Address 1","prepend-icon":"looks_one"},model:{value:e.form.address_1,callback:function(t){e.$set(e.form,"address_1",t)},expression:"form.address_1"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"Address 2","prepend-icon":"looks_two"},model:{value:e.form.address_2,callback:function(t){e.$set(e.form,"address_2",t)},expression:"form.address_2"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"City","prepend-icon":"location_city"},model:{value:e.form.city,callback:function(t){e.$set(e.form,"city",t)},expression:"form.city"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{attrs:{label:"State","prepend-icon":"map"},model:{value:e.form.state,callback:function(t){e.$set(e.form,"state",t)},expression:"form.state"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-text-field",{directives:[{name:"validate",rawName:"v-validate",value:{regex:/^\d{5}(?:[-\s]\d{4})?$/},expression:"{ regex: /^\\d{5}(?:[-\\s]\\d{4})?$/ }"}],class:{"error--text":e.hasErrors("zip")},attrs:{"error-messages":e.errorMessages("zip"),label:"Zip","prepend-icon":"markunread_mailbox","data-vv-name":"zip"},model:{value:e.form.zip,callback:function(t){e.$set(e.form,"zip",t)},expression:"form.zip"}})],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-textarea",{attrs:{color:"teal"},model:{value:e.form.notes,callback:function(t){e.$set(e.form,"notes",t)},expression:"form.notes"}},[r("div",{attrs:{slot:"label"},slot:"label"},[e._v("\n            Notes "),r("small",[e._v("(optional)")])])])],1),e._v(" "),r("v-flex",{attrs:{xs12:"",md8:"","offset-md2":""}},[r("v-btn",{attrs:{loading:e.form.busy,disabled:e.errors.any()||e.form.busy,block:"",color:"accent"},on:{click:function(t){e.submit()}}},[e._v("\n          Save "),r("v-icon",{attrs:{right:""}},[e._v("save")])],1)],1)],1)],1)],1)},s=[];e.exports={render:r,staticRenderFns:s}},tTVk:function(e,t){e.exports=function e(t,r){for(var s=[],n={},a=0;a<r.length;a++){var o=r[a],i=o[0],l,u,c,f={id:t+":"+a,css:o[1],media:o[2],sourceMap:o[3]};n[i]?n[i].parts.push(f):s.push(n[i]={id:i,parts:[f]})}return s}},zr7H:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".v-messages__message{color:#e57373}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZvcm0vZGlzdC92Zm9ybS5jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0NyZWF0ZVVzZXIudnVlIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0NyZWF0ZVVzZXIudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWU/MDg4NCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21peGlucy92YWxpZGF0aW9uLWVycm9yLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWU/YmNiZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvQ3JlYXRlVXNlci52dWU/MGNhNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWU/MTk2YiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIwIiwiT01ONCIsImxWSzciLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwidmFsdWUiLCJleHRlcm5hbF9fYXhpb3NfIiwiZXh0ZXJuYWxfX2F4aW9zX19kZWZhdWx0IiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJkZWVwQ29weSIsImNvcHkiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImFycmF5V3JhcCIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJFcnJvcnNfX3R5cGVvZiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkVycm9yc19FcnJvcnMiLCJFcnJvcnMiLCJlcnJvcnMiLCJzZXQiLCJmaWVsZCIsIm1lc3NhZ2VzIiwiYWxsIiwiaGFzIiwiaGFzQW55IiwiX3RoaXMiLCJfbGVuIiwiZmllbGRzIiwiX2tleSIsInNvbWUiLCJhbnkiLCJnZXRBbGwiLCJvbmx5IiwiX3RoaXMyIiwiX2xlbjIiLCJfa2V5MiIsIm1lc3NhZ2UiLCJwdXNoIiwiZmxhdHRlbiIsInZhbHVlcyIsInJlZHVjZSIsImEiLCJiIiwiY29uY2F0IiwiY2xlYXIiLCJfdGhpczMiLCJGb3JtX190eXBlb2YiLCJGb3JtX19kZWZpbmVQcm9wZXJ0eSIsIkZvcm1fX2V4dGVuZHMiLCJGb3JtX19jbGFzc0NhbGxDaGVjayIsIkZvcm1fX2RlZmluZVByb3BlcnRpZXMiLCJGb3JtX19jcmVhdGVDbGFzcyIsIkZvcm1fRm9ybSIsIkZvcm0iLCJkYXRhIiwidW5kZWZpbmVkIiwiYnVzeSIsInN1Y2Nlc3NmdWwiLCJvcmlnaW5hbERhdGEiLCJmaWxsIiwiZmlsdGVyIiwiaWdub3JlIiwiaW5jbHVkZXMiLCJzdGFydFByb2Nlc3NpbmciLCJmaW5pc2hQcm9jZXNzaW5nIiwicmVzZXQiLCJ1cmwiLCJzdWJtaXQiLCJwb3N0IiwicGF0Y2giLCJwdXQiLCJfZGVsZXRlIiwibWV0aG9kIiwiX3RoaXM0IiwiY29uZmlnIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0Iiwicm91dGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImVycm9yIiwiZXh0cmFjdEVycm9ycyIsImVycm9yTWVzc2FnZSIsInBhcmFtZXRlcnMiLCJyb3V0ZXMiLCJkZWNvZGVVUkkiLCJpZCIsInJlcGxhY2UiLCJvbktleWRvd24iLCJldmVudCIsInNyY19Gb3JtIiwiSGFzRXJyb3IiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwidHlwZSIsImRlZmF1bHQiLCJvcHRpb25zIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwicmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fIiwiX192dWVfc3R5bGVzX18iLCJfX3Z1ZV9zY29wZUlkX18iLCJfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fIiwiQ29tcG9uZW50IiwiY29tcG9uZW50c19IYXNFcnJvciIsImZvcm0iLCJyZXF1aXJlZCIsIlN0cmluZyIsIl92bSIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJkb21Qcm9wcyIsImlubmVySFRNTCIsIl9zIiwiX2UiLCJBbGVydCIsImRpc21pc3NpYmxlIiwiQm9vbGVhbiIsIm1ldGhvZHMiLCJkaXNtaXNzIiwiQWxlcnRFcnJvciIsIkFsZXJ0RXJyb3JfcmVuZGVyIiwiQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyIsIkFsZXJ0RXJyb3JfX192dWVfc3R5bGVzX18iLCJBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyIsIkFsZXJ0RXJyb3JfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydEVycm9yIiwiZXh0ZW5kcyIsImF0dHJzIiwicm9sZSIsImFyaWEtbGFiZWwiLCJvbiIsImNsaWNrIiwiYXJpYS1oaWRkZW4iLCJfdiIsIl90IiwiQWxlcnRFcnJvcnMiLCJBbGVydEVycm9yc19yZW5kZXIiLCJBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydEVycm9yc19fX3Z1ZV9zdHlsZXNfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydEVycm9yc19Db21wb25lbnQiLCJjb21wb25lbnRzX0FsZXJ0RXJyb3JzIiwiX2wiLCJBbGVydFN1Y2Nlc3MiLCJBbGVydFN1Y2Nlc3NfcmVuZGVyIiwiQWxlcnRTdWNjZXNzX3N0YXRpY1JlbmRlckZucyIsIkFsZXJ0U3VjY2Vzc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc2NvcGVJZF9fIiwiQWxlcnRTdWNjZXNzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydFN1Y2Nlc3NfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydFN1Y2Nlc3MiLCJpbmplY3RTdHlsZSIsIl9fdnVlX3NjcmlwdF9fIiwiX192dWVfdGVtcGxhdGVfXyIsImNvbXBvbmVudHMiLCJNb2RhbExheW91dCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9MYXlvdXRzX01vZGFsTGF5b3V0X3Z1ZV9fX2RlZmF1bHQiLCJtaXhpbnMiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfTWl4aW5zX3ZhbGlkYXRpb25fZXJyb3JfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF92Zm9ybV9fIiwidXNlcm5hbWUiLCJhY3RpdmUiLCJyb2xlcyIsInBhc3N3b3JkIiwicGFzc3dvcmRfY29uZmlybWF0aW9uIiwiY29tcGFueV9uYW1lIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImVtYWlsIiwicGhvbmUiLCJhZGRyZXNzXzEiLCJhZGRyZXNzXzIiLCJjaXR5Iiwic3RhdGUiLCJ6aXAiLCJjb3VudHJ5Iiwibm90ZXMiLCJwYXNzd29yZF92aXNpYmxlIiwiY29tcHV0ZWQiLCJpY29uIiwibW91bnRlZCIsInNlbGYiLCJmZXRjaFJvbGVzIiwiZ2V0U3RhdHVzIiwic3RhdHVzIiwiJHZhbGlkYXRvciIsInZhbGlkYXRlQWxsIiwicmVzdWx0IiwidmFsaWRhdGlvbk1vZGFsIiwiY3JlYXRlVXNlciIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9zd2VldGFsZXJ0Ml9fX2RlZmF1bHQiLCJtaXhpbiIsImNvbmZpcm1CdXR0b25DbGFzcyIsImJ1dHRvbnNTdHlsaW5nIiwidGl0bGUiLCJodG1sIiwiY29uZmlybUJ1dHRvblRleHQiLCJzdWNjZXNzTW9kYWwiLCJjb25zb2xlIiwibG9nIiwiJG5leHRUaWNrIiwiJHJvdXRlciIsInJlc2V0Rm9ybSIsIl9yZWYiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2hvbWVfdXJpYWhfU2l0ZXNfZHNnbGl2ZV9ub2RlX21vZHVsZXNfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX19kZWZhdWx0IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX19kZWZhdWx0IiwibWFyayIsIl9jYWxsZWUiLCJwYXlsb2FkIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsImF4aW9zIiwic2VudCIsInQwIiwic3RvcCIsInJlZGlyZWN0QmFjayIsInN0YW5kYWxvbmUiLCJ0cmFuc2l0aW9uIiwiZmx1aWQiLCJmbGF0IiwiZXJyb3JNZXNzYWdlcyIsImNvbGxlY3QiLCJoYXNFcnJvcnMiLCJjb250ZW50IiwibG9jYWxzIiwidXBkYXRlIiwiaGFzRG9jdW1lbnQiLCJkb2N1bWVudCIsIkRFQlVHIiwiRXJyb3IiLCJsaXN0VG9TdHlsZXMiLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwibm9vcCIsInNzcklkS2V5IiwiaXNPbGRJRSIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiaXRlbSIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsImFwcGx5VG9UYWciLCJ1cGRhdGVTdHlsZSIsIm5ld09iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFyZW50SWQiLCJsaXN0IiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImpvaW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJzZXRBdHRyaWJ1dGUiLCJzc3JJZCIsInNvdXJjZXMiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZmlyc3RDaGlsZCIsImNvbG9yIiwibmF0aXZlT24iLCIkZXZlbnQiLCJsb2FkaW5nIiwiZGlzYWJsZWQiLCJyaWdodCIsInJvdyIsInhzMTIiLCJtZDgiLCJvZmZzZXQtbWQyIiwiZGlyZWN0aXZlcyIsInJhd05hbWUiLCJleHByZXNzaW9uIiwiY2xhc3MiLCJlcnJvci0tdGV4dCIsImVycm9yLW1lc3NhZ2VzIiwibGFiZWwiLCJkYXRhLXZ2LW5hbWUiLCJjb3VudGVyIiwicHJlcGVuZC1pY29uIiwibW9kZWwiLCJjYWxsYmFjayIsIiQkdiIsIiRzZXQiLCJpdGVtcyIsImxpZ2h0IiwiY2hpcHMiLCJjbGVhcmFibGUiLCJkZWxldGFibGUtY2hpcHMiLCJoaW50IiwicGVyc2lzdGVudC1oaW50IiwiYXBwZW5kLWljb24iLCJjbGljazphcHBlbmQiLCJyZWYiLCJhbHBoYV9zcGFjZXMiLCJyZWdleCIsInNsb3QiLCJibG9jayIsIm5ld1N0eWxlcyIsInBhcnQiXSwibWFwcGluZ3Mi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QSxLQUFBNUIsRUFBQSxVQUFxR3NCLE9BQU9xTCxLQUFBLEdBQUFDLElBQUEsR0FBQUMsYUFBQSxNQUFvQzdNLEVBQUEsU0FBY3NCLE9BQU9pTCxRQUFBMU0sRUFBQUgsS0FBQS9FLEtBQUE2UixTQUFBM00sRUFBQXhILE9BQUFZLE9BQUE0RyxFQUFBSCxLQUFBL0UsS0FBQThULE1BQUEsR0FBQXJDLE1BQUEsVUFBaUczSyxJQUFLQyxNQUFBLFNBQUE0SyxHQUF5QnpNLEVBQUF2RSxhQUFldUUsRUFBQStCLEdBQUEscUJBQUE1QixFQUFBLFVBQTJDc0IsT0FBT21MLE1BQUEsTUFBWTVNLEVBQUErQixHQUFBLCtCQUNoelF4RSxLQUNBeEosRUFBQUMsU0FBa0JzSixTQUFBQyx1Q0NFbEJ4SixFQUFBQyxRQUFBLFNBQUFzVSxFQUFBdUMsRUFBQUMsR0FHQSxJQUZBLElBQUF6QixLQUNBd0YsS0FDQXhhLEVBQUEsRUFBaUJBLEVBQUF5VyxFQUFBdlQsT0FBaUJsRCxJQUFBLENBQ2xDLElBQUFpVixFQUFBd0IsRUFBQXpXLEdBQ0EySSxFQUFBc00sRUFBQSxHQUNBb0IsRUFDQUMsRUFDQUMsRUFDQWtFLEdBQ0E5UixHQUFBNk4sRUFBQSxJQUFBeFcsRUFDQXFXLElBTEFwQixFQUFBLEdBTUFxQixNQUxBckIsRUFBQSxHQU1Bc0IsVUFMQXRCLEVBQUEsSUFPQXVGLEVBQUE3UixHQUdBNlIsRUFBQTdSLEdBQUEwTSxNQUFBL1AsS0FBQW1WLEdBRkF6RixFQUFBMVAsS0FBQWtWLEVBQUE3UixJQUFtQ0EsS0FBQTBNLE9BQUFvRixLQUtuQyxPQUFBekYsMEJDekJBclYsRUFBQUQsRUFBQUMsUUFBQUcsRUFBQSxPQUFBQSxFQUFBLElBS0F3RixNQUFBNUYsRUFBQU0sRUFBQSxzQ0FBNkQiLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4vKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGk6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9cIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gMDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwibFZLN1wiKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJPTU40XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF4aW9zXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJsVks3XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19leHBvcnRzX18sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiYXhpb3NcIlxudmFyIGV4dGVybmFsX19heGlvc18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiT01ONFwiKTtcbnZhciBleHRlcm5hbF9fYXhpb3NfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX19heGlvc18pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy91dGlsLmpzXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKipcclxuICogRGVlcCBjb3B5IHRoZSBnaXZlbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXG5mdW5jdGlvbiBkZWVwQ29weShvYmopIHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBjb3B5ID0gQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjb3B5W2tleV0gPSBkZWVwQ29weShvYmpba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gY29weTtcbn1cbi8qKlxyXG4gKiBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGFuIGFycmF5LCB3cmFwIGl0IGluIG9uZS5cclxuICpcclxuICogQHBhcmFtICB7QW55fSB2YWx1ZVxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXG5cbmZ1bmN0aW9uIGFycmF5V3JhcCh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9FcnJvcnMuanNcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIEVycm9yc19fdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgRXJyb3JzX190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgRXJyb3JzX190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gRXJyb3JzX190eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblxuXG52YXIgRXJyb3JzX0Vycm9ycyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIG5ldyBlcnJvciBiYWcgaW5zdGFuY2UuXHJcbiAgICovXG4gIGZ1bmN0aW9uIEVycm9ycygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXJyb3JzKTtcblxuICAgIHRoaXMuZXJyb3JzID0ge307XG4gIH1cbiAgLyoqXHJcbiAgICogU2V0IHRoZSBlcnJvcnMgb2JqZWN0IG9yIGZpZWxkIGVycm9yIG1lc3NhZ2VzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBmaWVsZFxyXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfHVuZGVmaW5lZH0gbWVzc2FnZXNcclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhFcnJvcnMsIFt7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQoZmllbGQsIG1lc3NhZ2VzKSB7XG4gICAgICBpZiAoRXJyb3JzX190eXBlb2YoZmllbGQpID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLmVycm9ycyA9IGZpZWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXQoX2V4dGVuZHMoe30sIHRoaXMuZXJyb3JzLCBfZGVmaW5lUHJvcGVydHkoe30sIGZpZWxkLCBhcnJheVdyYXAobWVzc2FnZXMpKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGhlIGVycm9ycy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbGwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcnM7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZXJlIGlzIGFuIGVycm9yIGZvciB0aGUgZ2l2ZW4gZmllbGQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhcyhmaWVsZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzLmhhc093blByb3BlcnR5KGZpZWxkKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlcmUgYXJlIGFueSBlcnJvcnMgZm9yIHRoZSBnaXZlbiBmaWVsZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7Li4uU3RyaW5nfSBmaWVsZHNcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImhhc0FueVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNBbnkoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZmllbGRzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBmaWVsZHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWVsZHMuc29tZShmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhcyhmaWVsZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlcmUgYXJlIGFueSBlcnJvcnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYW55XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFueSgpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmVycm9ycykubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGZpcnN0IGVycm9yIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBmaWVsZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIFN0cmluZ30gZmllbGRcclxuICAgICAqIEByZXR1cm4ge1N0cmluZ3x1bmRlZmluZWR9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoZmllbGQpIHtcbiAgICAgIGlmICh0aGlzLmhhcyhmaWVsZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsKGZpZWxkKVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIHRoZSBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIGdpdmVuIGZpZWxkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZmllbGRcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsKGZpZWxkKSB7XG4gICAgICByZXR1cm4gYXJyYXlXcmFwKHRoaXMuZXJyb3JzW2ZpZWxkXSB8fCBbXSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBlcnJvciBtZXNzYWdlIGZvciB0aGUgZ2l2ZW4gZmllbGRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgey4uLlN0cmluZ30gZmllbGRzXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25seVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbmx5KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBtZXNzYWdlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZpZWxkcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBmaWVsZHNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gX3RoaXMyLmdldChmaWVsZCk7XG5cbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtZXNzYWdlcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIHRoZSBlcnJvcnMgaW4gYSBmbGF0IGFycmF5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJmbGF0dGVuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZsYXR0ZW4oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmVycm9ycykucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH0sIFtdKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBDbGVhciBvbmUgb3IgYWxsIGVycm9yIGZpZWxkcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IGZpZWxkXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKGZpZWxkKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGVycm9ycyA9IHt9O1xuXG4gICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5lcnJvcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGlmIChrZXkgIT09IGZpZWxkKSB7XG4gICAgICAgICAgICBlcnJvcnNba2V5XSA9IF90aGlzMy5lcnJvcnNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldChlcnJvcnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFcnJvcnM7XG59KCk7XG5cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvRm9ybS5qc1xuZnVuY3Rpb24gRm9ybV9fdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgRm9ybV9fdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IEZvcm1fX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBGb3JtX190eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBGb3JtX19kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIEZvcm1fX2V4dGVuZHMoKSB7IEZvcm1fX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gRm9ybV9fZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIEZvcm1fX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gRm9ybV9fZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIEZvcm1fX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgRm9ybV9fZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIEZvcm1fX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cblxuXG5cblxudmFyIEZvcm1fRm9ybSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZm9ybSBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG4gIGZ1bmN0aW9uIEZvcm0oKSB7XG4gICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgRm9ybV9fY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybSk7XG5cbiAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICB0aGlzLnN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICB0aGlzLmVycm9ycyA9IG5ldyBFcnJvcnNfRXJyb3JzKCk7XG4gICAgdGhpcy5vcmlnaW5hbERhdGEgPSBkZWVwQ29weShkYXRhKTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBGaWxsIGZvcm0gZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICovXG5cblxuICBGb3JtX19jcmVhdGVDbGFzcyhGb3JtLCBbe1xuICAgIGtleTogXCJmaWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbGwoZGF0YSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5rZXlzKCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBkYXRhW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmb3JtIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJkYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgcmV0dXJuIHRoaXMua2V5cygpLnJlZHVjZShmdW5jdGlvbiAoZGF0YSwga2V5KSB7XG4gICAgICAgIHJldHVybiBGb3JtX19leHRlbmRzKHt9LCBkYXRhLCBGb3JtX19kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBfdGhpczJba2V5XSkpO1xuICAgICAgfSwge30pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZvcm0gZGF0YSBrZXlzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJrZXlzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuICFGb3JtLmlnbm9yZS5pbmNsdWRlcyhrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHByb2Nlc3NpbmcgdGhlIGZvcm0uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFByb2Nlc3NpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRQcm9jZXNzaW5nKCkge1xuICAgICAgdGhpcy5lcnJvcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMuYnVzeSA9IHRydWU7XG4gICAgICB0aGlzLnN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluaXNoIHByb2Nlc3NpbmcgdGhlIGZvcm0uXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJmaW5pc2hQcm9jZXNzaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmlzaFByb2Nlc3NpbmcoKSB7XG4gICAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBmb3JtIGVycm9ycy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5lcnJvcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgZm9ybSBmaWVsZHMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gIUZvcm0uaWdub3JlLmluY2x1ZGVzKGtleSk7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXMzW2tleV0gPSBkZWVwQ29weShfdGhpczMub3JpZ2luYWxEYXRhW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBHRVQgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ2dldCcsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBQT1NUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHVybFxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJwb3N0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3QodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ3Bvc3QnLCB1cmwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJtaXQgdGhlIGZyb20gdmlhIGEgUEFUQ0ggcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBhdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdGNoKHVybCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3VibWl0KCdwYXRjaCcsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBQVVQgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwdXQodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ3B1dCcsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBERUxFVEUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRlbGV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKHVybCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3VibWl0KCdkZWxldGUnLCB1cmwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJtaXQgdGhlIGZvcm0gZGF0YSB2aWEgYW4gSFRUUCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBtZXRob2QgKGdldCwgcG9zdCwgcGF0Y2gsIHB1dClcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSAge09iamVjdH0gY29uZmlnIChheGlvcyBjb25maWcpXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN1Ym1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJtaXQobWV0aG9kLCB1cmwpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICAgIHRoaXMuc3RhcnRQcm9jZXNzaW5nKCk7XG4gICAgICB2YXIgZGF0YSA9IG1ldGhvZCA9PT0gJ2dldCcgPyB7XG4gICAgICAgIHBhcmFtczogdGhpcy5kYXRhKClcbiAgICAgIH0gOiB0aGlzLmRhdGEoKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGV4dGVybmFsX19heGlvc19fZGVmYXVsdC5hLnJlcXVlc3QoRm9ybV9fZXh0ZW5kcyh7XG4gICAgICAgICAgdXJsOiBfdGhpczQucm91dGUodXJsKSxcbiAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0sIGNvbmZpZykpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgX3RoaXM0LmZpbmlzaFByb2Nlc3NpbmcoKTtcblxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBfdGhpczQuYnVzeSA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGVycm9yLnJlc3BvbnNlKSB7XG4gICAgICAgICAgICBfdGhpczQuZXJyb3JzLnNldChfdGhpczQuZXh0cmFjdEVycm9ycyhlcnJvci5yZXNwb25zZSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4dHJhY3QgdGhlIGVycm9ycyBmcm9tIHRoZSByZXNwb25zZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IHJlc3BvbnNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0cmFjdEVycm9yc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0RXJyb3JzKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIXJlc3BvbnNlLmRhdGEgfHwgRm9ybV9fdHlwZW9mKHJlc3BvbnNlLmRhdGEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yOiBGb3JtLmVycm9yTWVzc2FnZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5lcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1fX2V4dGVuZHMoe30sIHJlc3BvbnNlLmRhdGEuZXJyb3JzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWVzc2FnZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVycm9yOiByZXNwb25zZS5kYXRhLm1lc3NhZ2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEZvcm1fX2V4dGVuZHMoe30sIHJlc3BvbnNlLmRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBuYW1lZCByb3V0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gbmFtZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJvdXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJvdXRlKG5hbWUpIHtcbiAgICAgIHZhciBwYXJhbWV0ZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciB1cmwgPSBuYW1lO1xuXG4gICAgICBpZiAoRm9ybS5yb3V0ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdXJsID0gZGVjb2RlVVJJKEZvcm0ucm91dGVzW25hbWVdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEZvcm1fX3R5cGVvZihwYXJhbWV0ZXJzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICBpZDogcGFyYW1ldGVyc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXCJ7XCIuY29uY2F0KGtleSwgXCJ9XCIpLCBwYXJhbWV0ZXJzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhciBlcnJvcnMgb24ga2V5ZG93bi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm9uS2V5ZG93blwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbktleWRvd24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQubmFtZSkge1xuICAgICAgICB0aGlzLmVycm9ycy5jbGVhcihldmVudC50YXJnZXQubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvcm07XG59KCk7XG5cbkZvcm1fRm9ybS5yb3V0ZXMgPSB7fTtcbkZvcm1fRm9ybS5lcnJvck1lc3NhZ2UgPSAnU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4uJztcbkZvcm1fRm9ybS5pZ25vcmUgPSBbJ2J1c3knLCAnc3VjY2Vzc2Z1bCcsICdlcnJvcnMnLCAnb3JpZ2luYWxEYXRhJ107XG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfRm9ybSA9IChGb3JtX0Zvcm0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJDOi8vVXNlcnMvL090aW5zb2Z0Ly9Db2RlLy9naXRodWIvL3Zmb3JtLy9ub2RlX21vZHVsZXMvLy5jYWNoZS8vY2FjaGUtbG9hZGVyXCJ9IS4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0hhc0Vycm9yLnZ1ZVxuLy9cbi8vXG4vL1xuLy9cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEhhc0Vycm9yID0gKHtcbiAgbmFtZTogJ2hhcy1lcnJvcicsXG4gIHByb3BzOiB7XG4gICAgZm9ybToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGZpZWxkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTQzODlhNmRkXCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvSGFzRXJyb3IudnVlXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiAoX3ZtLmZvcm0uZXJyb3JzLmhhcyhfdm0uZmllbGQpKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJoZWxwLWJsb2NrIGludmFsaWQtZmVlZGJhY2tcIixkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLmZvcm0uZXJyb3JzLmdldChfdm0uZmllbGQpKX19KTpfdm0uX2UoKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2NyaXB0RXhwb3J0cyA9IHNjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9IYXNFcnJvci52dWVcbi8qIHNjcmlwdCAqL1xuXG5cbi8qIHRlbXBsYXRlICovXG5cbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcblxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgSGFzRXJyb3IsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19IYXNFcnJvciA9IChDb21wb25lbnQuZXhwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvQWxlcnQuanNcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEFsZXJ0ID0gKHtcbiAgcHJvcHM6IHtcbiAgICBmb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgZGlzbWlzc2libGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGlzbWlzczogZnVuY3Rpb24gZGlzbWlzcygpIHtcbiAgICAgIGlmICh0aGlzLmRpc21pc3NpYmxlKSB7XG4gICAgICAgIHRoaXMuZm9ybS5jbGVhcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/e1wiY2FjaGVEaXJlY3RvcnlcIjpcIkM6Ly9Vc2Vycy8vT3RpbnNvZnQvL0NvZGUvL2dpdGh1Yi8vdmZvcm0vL25vZGVfbW9kdWxlcy8vLmNhY2hlLy9jYWNoZS1sb2FkZXJcIn0hLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvQWxlcnRFcnJvci52dWVcbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEFsZXJ0RXJyb3IgPSAoe1xuICBuYW1lOiAnYWxlcnQtZXJyb3InLFxuICBleHRlbmRzOiBBbGVydCxcbiAgcHJvcHM6IHtcbiAgICBtZXNzYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnVGhlcmUgd2VyZSBzb21lIHByb2JsZW1zIHdpdGggeW91ciBpbnB1dC4nXG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtZTczYWE3YzhcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9yLnZ1ZVxudmFyIEFsZXJ0RXJyb3JfcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiAoX3ZtLmZvcm0uZXJyb3JzLmFueSgpKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJhbGVydCBhbGVydC1kYW5nZXIgYWxlcnQtZGlzbWlzc2libGVcIixhdHRyczp7XCJyb2xlXCI6XCJhbGVydFwifX0sWyhfdm0uZGlzbWlzc2libGUpP19jKCdidXR0b24nLHtzdGF0aWNDbGFzczpcImNsb3NlXCIsYXR0cnM6e1widHlwZVwiOlwiYnV0dG9uXCIsXCJhcmlhLWxhYmVsXCI6XCJDbG9zZVwifSxvbjp7XCJjbGlja1wiOl92bS5kaXNtaXNzfX0sW19jKCdzcGFuJyx7YXR0cnM6e1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn19LFtfdm0uX3YoXCLDl1wiKV0pXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJkZWZhdWx0XCIsWyhfdm0uZm9ybS5lcnJvcnMuaGFzKCdlcnJvcicpKT9fYygnZGl2Jyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5mb3JtLmVycm9ycy5nZXQoJ2Vycm9yJykpfX0pOl9jKCdkaXYnLHtkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLm1lc3NhZ2UpfX0pXSldLDIpOl92bS5fZSgpfVxudmFyIEFsZXJ0RXJyb3Jfc3RhdGljUmVuZGVyRm5zID0gW11cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9yLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIEFsZXJ0RXJyb3JfX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIEFsZXJ0RXJyb3JfX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgQWxlcnRFcnJvcl9fX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBBbGVydEVycm9yX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5cbnZhciBBbGVydEVycm9yX0NvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgQWxlcnRFcnJvcixcbiAgQWxlcnRFcnJvcl9yZW5kZXIsXG4gIEFsZXJ0RXJyb3Jfc3RhdGljUmVuZGVyRm5zLFxuICBBbGVydEVycm9yX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgQWxlcnRFcnJvcl9fX3Z1ZV9zdHlsZXNfXyxcbiAgQWxlcnRFcnJvcl9fX3Z1ZV9zY29wZUlkX18sXG4gIEFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0FsZXJ0RXJyb3IgPSAoQWxlcnRFcnJvcl9Db21wb25lbnQuZXhwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz97XCJjYWNoZURpcmVjdG9yeVwiOlwiQzovL1VzZXJzLy9PdGluc29mdC8vQ29kZS8vZ2l0aHViLy92Zm9ybS8vbm9kZV9tb2R1bGVzLy8uY2FjaGUvL2NhY2hlLWxvYWRlclwifSEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9ycy52dWVcbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBBbGVydEVycm9ycyA9ICh7XG4gIG5hbWU6ICdhbGVydC1lcnJvcnMnLFxuICBleHRlbmRzOiBBbGVydCxcbiAgcHJvcHM6IHtcbiAgICBtZXNzYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnVGhlcmUgd2VyZSBzb21lIHByb2JsZW1zIHdpdGggeW91ciBpbnB1dC4nXG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNDIyYTY1OTFcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9ycy52dWVcbnZhciBBbGVydEVycm9yc19yZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5lcnJvcnMuYW55KCkpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFsZXJ0IGFsZXJ0LWRhbmdlciBhbGVydC1kaXNtaXNzaWJsZVwiLGF0dHJzOntcInJvbGVcIjpcImFsZXJ0XCJ9fSxbKF92bS5kaXNtaXNzaWJsZSk/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiY2xvc2VcIixhdHRyczp7XCJ0eXBlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpcIkNsb3NlXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmRpc21pc3N9fSxbX2MoJ3NwYW4nLHthdHRyczp7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0sW192bS5fdihcIsOXXCIpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChfdm0ubWVzc2FnZSk/X2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSxfYygndWwnLF92bS5fbCgoX3ZtLmZvcm0uZXJyb3JzLmZsYXR0ZW4oKSksZnVuY3Rpb24oZXJyb3Ipe3JldHVybiBfYygnbGknLHtkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoZXJyb3IpfX0pfSkpXSk6X3ZtLl9lKCl9XG52YXIgQWxlcnRFcnJvcnNfc3RhdGljUmVuZGVyRm5zID0gW11cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9ycy52dWVcbi8qIHNjcmlwdCAqL1xuXG5cbi8qIHRlbXBsYXRlICovXG5cbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgQWxlcnRFcnJvcnNfX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgQWxlcnRFcnJvcnNfX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgQWxlcnRFcnJvcnNfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcblxudmFyIEFsZXJ0RXJyb3JzX0NvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgQWxlcnRFcnJvcnMsXG4gIEFsZXJ0RXJyb3JzX3JlbmRlcixcbiAgQWxlcnRFcnJvcnNfc3RhdGljUmVuZGVyRm5zLFxuICBBbGVydEVycm9yc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIEFsZXJ0RXJyb3JzX19fdnVlX3N0eWxlc19fLFxuICBBbGVydEVycm9yc19fX3Z1ZV9zY29wZUlkX18sXG4gIEFsZXJ0RXJyb3JzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgY29tcG9uZW50c19BbGVydEVycm9ycyA9IChBbGVydEVycm9yc19Db21wb25lbnQuZXhwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz97XCJjYWNoZURpcmVjdG9yeVwiOlwiQzovL1VzZXJzLy9PdGluc29mdC8vQ29kZS8vZ2l0aHViLy92Zm9ybS8vbm9kZV9tb2R1bGVzLy8uY2FjaGUvL2NhY2hlLWxvYWRlclwifSEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydFN1Y2Nlc3MudnVlXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEFsZXJ0U3VjY2VzcyA9ICh7XG4gIG5hbWU6ICdhbGVydC1zdWNjZXNzJyxcbiAgZXh0ZW5kczogQWxlcnQsXG4gIHByb3BzOiB7XG4gICAgbWVzc2FnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0wYWZkYjhhOFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0U3VjY2Vzcy52dWVcbnZhciBBbGVydFN1Y2Nlc3NfcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiAoX3ZtLmZvcm0uc3VjY2Vzc2Z1bCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWxlcnQgYWxlcnQtc3VjY2VzcyBhbGVydC1kaXNtaXNzaWJsZVwiLGF0dHJzOntcInJvbGVcIjpcImFsZXJ0XCJ9fSxbKF92bS5kaXNtaXNzaWJsZSk/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiY2xvc2VcIixhdHRyczp7XCJ0eXBlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpcIkNsb3NlXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmRpc21pc3N9fSxbX2MoJ3NwYW4nLHthdHRyczp7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0sW192bS5fdihcIsOXXCIpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIixbX2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSldKV0sMik6X3ZtLl9lKCl9XG52YXIgQWxlcnRTdWNjZXNzX3N0YXRpY1JlbmRlckZucyA9IFtdXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvQWxlcnRTdWNjZXNzLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIEFsZXJ0U3VjY2Vzc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgQWxlcnRTdWNjZXNzX19fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBBbGVydFN1Y2Nlc3NfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcblxudmFyIEFsZXJ0U3VjY2Vzc19Db21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIEFsZXJ0U3VjY2VzcyxcbiAgQWxlcnRTdWNjZXNzX3JlbmRlcixcbiAgQWxlcnRTdWNjZXNzX3N0YXRpY1JlbmRlckZucyxcbiAgQWxlcnRTdWNjZXNzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgQWxlcnRTdWNjZXNzX19fdnVlX3N0eWxlc19fLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfc2NvcGVJZF9fLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0FsZXJ0U3VjY2VzcyA9IChBbGVydFN1Y2Nlc3NfQ29tcG9uZW50LmV4cG9ydHMpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9pbmRleC5qc1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkZvcm1cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzcmNfRm9ybTsgfSk7XG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRXJyb3JzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRXJyb3JzX0Vycm9yczsgfSk7XG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiSGFzRXJyb3JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjb21wb25lbnRzX0hhc0Vycm9yOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBbGVydEVycm9yXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50c19BbGVydEVycm9yOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBbGVydEVycm9yc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBvbmVudHNfQWxlcnRFcnJvcnM7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFsZXJ0U3VjY2Vzc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBvbmVudHNfQWxlcnRTdWNjZXNzOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gc3JjX0Zvcm07IH0pO1xuXG5cblxuXG5cblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Zmb3JtL2Rpc3QvdmZvcm0uY29tbW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyZ0dNXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMgMzQgMzUgMzYgMzcgMzggNDAgNDEgNDIgNDMgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1iODhlYTA2ZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Nb2RhbExheW91dC52dWVcIilcbn1cbnZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSBudWxsXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1iODhlYTA2ZVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL01vZGFsTGF5b3V0LnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2xheW91dHMvTW9kYWxMYXlvdXQudnVlXG4vLyBtb2R1bGUgaWQgPSAyeXJaXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMTggMTkgMjAgMjEgMjIgMjMgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAgNjEiLCJ2YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcInZ1ZS1hcHBcXFwiXV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV0sW1xcXCJ0cmFuc2Zvcm0taW1wb3J0c1xcXCIse1xcXCJ2dWV0aWZ5XFxcIjp7XFxcInRyYW5zZm9ybVxcXCI6XFxcInZ1ZXRpZnkvZXM1L2NvbXBvbmVudHMvJHttZW1iZXJ9XFxcIixcXFwicHJldmVudEZ1bGxJbXBvcnRcXFwiOnRydWV9fV1dfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0NyZWF0ZVVzZXIudnVlXCIpXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi00MDQ4ZjhhYVxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL0NyZWF0ZVVzZXIudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gbnVsbFxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBfX3Z1ZV9zY3JpcHRfXyxcbiAgX192dWVfdGVtcGxhdGVfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcG9uZW50LmV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DcmVhdGVVc2VyLnZ1ZVxuLy8gbW9kdWxlIGlkID0gN3lJSVxuLy8gbW9kdWxlIGNodW5rcyA9IDU3IiwiPHRlbXBsYXRlPlxuICA8bW9kYWwtbGF5b3V0IGNsYXNzPVwid2hpdGVcIj5cbiAgICA8di1jYXJkIDpmbGF0PVwidHJ1ZVwiPlxuICAgICAgPHYtdG9vbGJhciBjbGFzcz1cInByaW1hcnlcIj5cbiAgICAgICAgPHYtYnRuIFxuICAgICAgICAgIGZsYXQgXG4gICAgICAgICAgaWNvbiBcbiAgICAgICAgICBjb2xvcj1cIndoaXRlXCJcbiAgICAgICAgICBAY2xpY2submF0aXZlPVwicmVkaXJlY3RCYWNrKClcIlxuICAgICAgICA+XG4gICAgICAgICAgPHYtaWNvbj5hcnJvd19iYWNrPC92LWljb24+XG4gICAgICAgIDwvdi1idG4+XG4gICAgICAgIDx2LXNwYWNlci8+XG4gICAgICAgIDx2LXRvb2xiYXItdGl0bGUgY2xhc3M9XCJ0ZXh0LXhzLWNlbnRlciB3aGl0ZS0tdGV4dFwiPlVzZXIgQ3JlYXRpb24gUGFnZTwvdi10b29sYmFyLXRpdGxlPlxuICAgICAgICA8di1zcGFjZXIvPlxuICAgICAgICA8di10b29sYmFyLWl0ZW1zPlxuICAgICAgICAgIDwhLS0gSWYgVGhlcmUgaXMgbm8gVXNlciBBY2NvdW50IExvZ2luIFlldCBSZWRpcmVjdCB0byBBdXRoZW50aWNhdGlvbiBQYWdlIC0tPlxuICAgICAgICAgIDx2LWJ0blxuICAgICAgICAgICAgOmxvYWRpbmc9XCJmb3JtLmJ1c3lcIiBcbiAgICAgICAgICAgIDpkaXNhYmxlZD1cImVycm9ycy5hbnkoKSB8fCBmb3JtLmJ1c3lcIlxuICAgICAgICAgICAgZmxhdCBcbiAgICAgICAgICAgIGNvbG9yPVwid2hpdGVcIiBcbiAgICAgICAgICAgIEBjbGljay5uYXRpdmU9XCJzdWJtaXQoKVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgU2F2ZVxuICAgICAgICAgICAgPHYtaWNvbiByaWdodD5zYXZlPC92LWljb24+XG4gICAgICAgICAgPC92LWJ0bj5cbiAgICAgICAgPC92LXRvb2xiYXItaXRlbXM+XG4gICAgICA8L3YtdG9vbGJhcj5cbiAgICAgIDx2LWxheW91dCBcbiAgICAgICAgcm93IFxuICAgICAgICB3cmFwXG4gICAgICA+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi12YWxpZGF0ZT1cIidyZXF1aXJlZHxtYXg6MjU1fG1pbjo2fGFscGhhX2Rhc2gnXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLnVzZXJuYW1lXCJcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cImVycm9yTWVzc2FnZXMoJ3VzZXJuYW1lJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ3VzZXJuYW1lJykgfVwiXG4gICAgICAgICAgICBjbGFzcz1cInByaW1hcnktLXRleHRcIlxuICAgICAgICAgICAgbmFtZT1cInVzZXJuYW1lXCJcbiAgICAgICAgICAgIGxhYmVsPVwiVXNlcm5hbWVcIlxuICAgICAgICAgICAgZGF0YS12di1uYW1lPVwidXNlcm5hbWVcIlxuICAgICAgICAgICAgY291bnRlcj1cIjI1NVwiXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJmYS11c2VyXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3YtZmxleD5cblxuICAgICAgICA8di1mbGV4IGNsYXNzPVwieHM2IG1kNCBvZmZzZXQtbWQyXCI+XG4gICAgICAgICAgPHYtYXV0b2NvbXBsZXRlXG4gICAgICAgICAgICB2LXZhbGlkYXRlPVwiJ3JlcXVpcmVkJ1wiXG4gICAgICAgICAgICA6aXRlbXM9XCJyb2xlc1wiXG4gICAgICAgICAgICB2LW1vZGVsPVwiZm9ybS5yb2xlc1wiXG4gICAgICAgICAgICA6ZXJyb3ItbWVzc2FnZXM9XCJlcnJvck1lc3NhZ2VzKCdyb2xlcycpXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgJ2Vycm9yLS10ZXh0JzogaGFzRXJyb3JzKCdyb2xlcycpIH1cIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIGNvbG9yPVwiYmx1ZS1ncmV5XCJcbiAgICAgICAgICAgIGxhYmVsPVwiU2VsZWN0IEFjY291bnQgVHlwZVwiXG4gICAgICAgICAgICBsaWdodFxuICAgICAgICAgICAgY2hpcHNcbiAgICAgICAgICAgIGNsZWFyYWJsZVxuICAgICAgICAgICAgZGVsZXRhYmxlLWNoaXBzXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJmYS10YWdzXCJcbiAgICAgICAgICAgIGRhdGEtdnYtbmFtZT1cInJvbGVzXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPHYtZmxleCBjbGFzcz1cInhzNiBtZDRcIj5cbiAgICAgICAgICA8di1zd2l0Y2hcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmFjdGl2ZVwiXG4gICAgICAgICAgICA6bGFiZWw9XCJnZXRTdGF0dXMoZm9ybS5hY3RpdmUpXCJcbiAgICAgICAgICAgIGhpbnQ9XCJOb3RlOiBBY3RpdmUgVXNlciBpcyBTZWFyY2hhYmxlIE9uIFdhcmVob3VzZS9SZWNlaXZpbmcvTG9naXN0aWMgRm9ybXNcIlxuICAgICAgICAgICAgcGVyc2lzdGVudC1oaW50XG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi12YWxpZGF0ZT1cIidyZXF1aXJlZHxtaW46Nnxjb25maXJtZWQ6Y29uZmlybWF0aW9uJ1wiXG4gICAgICAgICAgICB2LW1vZGVsPVwiZm9ybS5wYXNzd29yZFwiXG4gICAgICAgICAgICA6YXBwZW5kLWljb249XCJpY29uXCJcbiAgICAgICAgICAgIDp0eXBlPVwiIXBhc3N3b3JkX3Zpc2libGUgPyAncGFzc3dvcmQnIDogJ3RleHQnXCJcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cImVycm9yTWVzc2FnZXMoJ3Bhc3N3b3JkJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ3Bhc3N3b3JkJykgfVwiXG4gICAgICAgICAgICBjbGFzcz1cInByaW1hcnktLXRleHRcIlxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGxhYmVsPVwiUGFzc3dvcmRcIlxuICAgICAgICAgICAgZGF0YS12di1uYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwiZmEta2V5XCJcbiAgICAgICAgICAgIGNvdW50ZXI9XCIyNTVcIlxuICAgICAgICAgICAgQGNsaWNrOmFwcGVuZD1cIigpID0+IChwYXNzd29yZF92aXNpYmxlID0gIXBhc3N3b3JkX3Zpc2libGUpXCJcbiAgICAgICAgICAvPlxuICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICB4czEyIFxuICAgICAgICAgIG1kOCBcbiAgICAgICAgICBvZmZzZXQtbWQyXG4gICAgICAgID5cbiAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICByZWY9XCJjb25maXJtYXRpb25cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0ucGFzc3dvcmRfY29uZmlybWF0aW9uXCJcbiAgICAgICAgICAgIDphcHBlbmQtaWNvbj1cImljb25cIlxuICAgICAgICAgICAgOnR5cGU9XCIhcGFzc3dvcmRfdmlzaWJsZSA/ICdwYXNzd29yZCcgOiAndGV4dCdcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwiZXJyb3JNZXNzYWdlcygncGFzc3dvcmRfY29uZmlybWF0aW9uJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ3Bhc3N3b3JkX2NvbmZpcm1hdGlvbicpIH1cIlxuICAgICAgICAgICAgY2xhc3M9XCJwcmltYXJ5LS10ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJwYXNzd29yZF9jb25maXJtYXRpb25cIlxuICAgICAgICAgICAgbGFiZWw9XCJDb25maXJtIFBhc3N3b3JkXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImZhLWNvcHlcIlxuICAgICAgICAgICAgY291bnRlcj1cIjI1NVwiXG4gICAgICAgICAgICBAY2xpY2s6YXBwZW5kPVwiKCkgPT4gKHBhc3N3b3JkX3Zpc2libGUgPSAhcGFzc3dvcmRfdmlzaWJsZSlcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTJcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi12YWxpZGF0ZT1cInsgYWxwaGFfc3BhY2VzOiB0cnVlIH1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uY29tcGFueV9uYW1lXCJcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cImVycm9yTWVzc2FnZXMoJ2NvbXBhbnlfbmFtZScpXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgJ2Vycm9yLS10ZXh0JzogaGFzRXJyb3JzKCdjb21wYW55X25hbWUnKSB9XCJcbiAgICAgICAgICAgIGxhYmVsPVwiQ29tcGFueSBOYW1lXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImRvbWFpblwiXG4gICAgICAgICAgICBkYXRhLXZ2LW5hbWU9XCJjb21wYW55X25hbWVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtdmFsaWRhdGU9XCJ7IGVtYWlsOiB0cnVlIH1cIlxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uZW1haWxcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwiZXJyb3JNZXNzYWdlcygnZW1haWwnKVwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7ICdlcnJvci0tdGV4dCc6IGhhc0Vycm9ycygnZW1haWwnKSB9XCJcbiAgICAgICAgICAgIGxhYmVsPVwiRW1haWxcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibWFpbFwiXG4gICAgICAgICAgICBkYXRhLXZ2LW5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi12YWxpZGF0ZT1cInsgcmVxdWlyZWQ6IHRydWUsIHJlZ2V4OiAvXlthLXpBLVowLTkgXSskLyB9XCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLmZpcnN0X25hbWVcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwiZXJyb3JNZXNzYWdlcygnZmlyc3RfbmFtZScpXCJcbiAgICAgICAgICAgIDpjbGFzcz1cInsgJ2Vycm9yLS10ZXh0JzogaGFzRXJyb3JzKCdmaXJzdF9uYW1lJykgfVwiXG4gICAgICAgICAgICBsYWJlbD1cIkZpcnN0IE5hbWVcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwicGVyc29uXCJcbiAgICAgICAgICAgIGRhdGEtdnYtbmFtZT1cImZpcnN0X25hbWVcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtdmFsaWRhdGU9XCJ7IHJlcXVpcmVkOiB0cnVlLCByZWdleDogL15bYS16QS1aMC05IF0rJC8gfVwiXG4gICAgICAgICAgICB2LW1vZGVsPVwiZm9ybS5sYXN0X25hbWVcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwiZXJyb3JNZXNzYWdlcygnbGFzdF9uYW1lJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ2xhc3RfbmFtZScpIH1cIlxuICAgICAgICAgICAgbGFiZWw9XCJMYXN0IE5hbWVcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwicGVvcGxlXCJcbiAgICAgICAgICAgIGRhdGEtdnYtbmFtZT1cImxhc3RfbmFtZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0ucGhvbmVcIlxuICAgICAgICAgICAgbGFiZWw9XCJQaG9uZVwiXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJwaG9uZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uYWRkcmVzc18xXCJcbiAgICAgICAgICAgIGxhYmVsPVwiQWRkcmVzcyAxXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImxvb2tzX29uZVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uYWRkcmVzc18yXCJcbiAgICAgICAgICAgIGxhYmVsPVwiQWRkcmVzcyAyXCJcbiAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImxvb2tzX3R3b1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uY2l0eVwiXG4gICAgICAgICAgICBsYWJlbD1cIkNpdHlcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibG9jYXRpb25fY2l0eVwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgdi1tb2RlbD1cImZvcm0uc3RhdGVcIlxuICAgICAgICAgICAgbGFiZWw9XCJTdGF0ZVwiXG4gICAgICAgICAgICBwcmVwZW5kLWljb249XCJtYXBcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdi1mbGV4PlxuICAgICAgICA8di1mbGV4IFxuICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgbWQ4IFxuICAgICAgICAgIG9mZnNldC1tZDJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgIHYtdmFsaWRhdGU9XCJ7IHJlZ2V4OiAvXlxcZHs1fSg/OlstXFxzXVxcZHs0fSk/JC8gfVwiXG4gICAgICAgICAgICB2LW1vZGVsPVwiZm9ybS56aXBcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwiZXJyb3JNZXNzYWdlcygnemlwJylcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyAnZXJyb3ItLXRleHQnOiBoYXNFcnJvcnMoJ3ppcCcpIH1cIlxuICAgICAgICAgICAgbGFiZWw9XCJaaXBcIlxuICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibWFya3VucmVhZF9tYWlsYm94XCJcbiAgICAgICAgICAgIGRhdGEtdnYtbmFtZT1cInppcFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgeHMxMiBcbiAgICAgICAgICBtZDggXG4gICAgICAgICAgb2Zmc2V0LW1kMlxuICAgICAgICA+XG4gICAgICAgICAgPHYtdGV4dGFyZWFcbiAgICAgICAgICAgIHYtbW9kZWw9XCJmb3JtLm5vdGVzXCJcbiAgICAgICAgICAgIGNvbG9yPVwidGVhbFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdiBzbG90PVwibGFiZWxcIj5cbiAgICAgICAgICAgICAgTm90ZXMgPHNtYWxsPihvcHRpb25hbCk8L3NtYWxsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC92LXRleHRhcmVhPlxuICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICB4czEyIFxuICAgICAgICAgIG1kOCBcbiAgICAgICAgICBvZmZzZXQtbWQyXG4gICAgICAgID5cbiAgICAgICAgICA8di1idG4gXG4gICAgICAgICAgICA6bG9hZGluZz1cImZvcm0uYnVzeVwiIFxuICAgICAgICAgICAgOmRpc2FibGVkPVwiZXJyb3JzLmFueSgpIHx8IGZvcm0uYnVzeVwiXG4gICAgICAgICAgICBibG9ja1xuICAgICAgICAgICAgY29sb3I9XCJhY2NlbnRcIlxuICAgICAgICAgICAgQGNsaWNrPVwic3VibWl0KClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIFNhdmUgPHYtaWNvbiByaWdodD5zYXZlPC92LWljb24+XG4gICAgICAgICAgPC92LWJ0bj5cbiAgICAgICAgPC92LWZsZXg+XG4gICAgICA8L3YtbGF5b3V0PlxuICAgIDwvdi1jYXJkPlxuICA8L21vZGFsLWxheW91dD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgTW9kYWxMYXlvdXQgZnJvbSBcIkxheW91dHMvTW9kYWxMYXlvdXQudnVlXCI7XG5pbXBvcnQgdmFsaWRhdGlvbkVycm9yIGZyb20gXCJNaXhpbnMvdmFsaWRhdGlvbi1lcnJvclwiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCJ2Zm9ybVwiO1xuaW1wb3J0IHN3YWwgZnJvbSBcInN3ZWV0YWxlcnQyXCI7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICBNb2RhbExheW91dFxuICB9LFxuICBtaXhpbnM6IFt2YWxpZGF0aW9uRXJyb3JdLFxuICBkYXRhOiAoKSA9PiAoe1xuICAgIC8qIEFsd2F5cyBEZWNsYXJlIFlvdXIgRm9ybSBPYmplY3QgKi9cbiAgICBmb3JtOiBuZXcgRm9ybSh7XG4gICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICByb2xlczogW10sXG4gICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgIHBhc3N3b3JkX2NvbmZpcm1hdGlvbjogbnVsbCxcbiAgICAgIGNvbXBhbnlfbmFtZTogbnVsbCxcbiAgICAgIGZpcnN0X25hbWU6IG51bGwsXG4gICAgICBsYXN0X25hbWU6IG51bGwsXG4gICAgICBlbWFpbDogbnVsbCxcbiAgICAgIHBob25lOiBudWxsLFxuICAgICAgYWRkcmVzc18xOiBudWxsLFxuICAgICAgYWRkcmVzc18yOiBudWxsLFxuICAgICAgY2l0eTogbnVsbCxcbiAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgemlwOiBudWxsLFxuICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgIG5vdGVzOiBudWxsXG4gICAgfSksXG4gICAgcm9sZXM6IFtdLFxuICAgIHBhc3N3b3JkX3Zpc2libGU6IGZhbHNlXG4gIH0pLFxuICBjb21wdXRlZDoge1xuICAgIGljb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzd29yZF92aXNpYmxlID8gXCJ2aXNpYmlsaXR5XCIgOiBcInZpc2liaWxpdHlfb2ZmXCI7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBzZWxmLmZldGNoUm9sZXMoKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFN0YXR1cyhzdGF0dXMpIHtcbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIFwiU3RhdHVzOiBBY3RpdmVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIlN0YXR1czogSW5hY3RpdmVcIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN1Ym1pdCgpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuJHZhbGlkYXRvci52YWxpZGF0ZUFsbCgpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHNlbGYuY3JlYXRlVXNlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25Nb2RhbCA9IHN3YWwubWl4aW4oe1xuICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiBcInYtYnRuIGJsdWUtZ3JleSAgc3ViaGVhZGluZyB3aGl0ZS0tdGV4dFwiLFxuICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGlvbk1vZGFsKHtcbiAgICAgICAgICAgIHRpdGxlOiBgVmFsaWRhdGlvbiBFcnJvcmAsXG4gICAgICAgICAgICBodG1sOiBgPHAgY2xhc3M9XCJ0aXRsZVwiPlBsZWFzZSBGaXggRm9ybSBFcnJvcnM8L3A+YCxcbiAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiQmFja1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY3JlYXRlVXNlcigpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHNlbGYuZm9ybS5idXN5ID0gdHJ1ZTtcblxuICAgICAgc2VsZi5mb3JtXG4gICAgICAgIC5wb3N0KHJvdXRlKFwiYXBpLnVzZXIuY3JlYXRlXCIpLCBzZWxmLmZvcm0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICBzZWxmLiR2YWxpZGF0b3IucmVzZXQoKTtcbiAgICAgICAgICBjb25zdCBzdWNjZXNzTW9kYWwgPSBzd2FsLm1peGluKHtcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogXCJ2LWJ0biBibHVlLWdyZXkgIHN1YmhlYWRpbmcgd2hpdGUtLXRleHRcIixcbiAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN1Y2Nlc3NNb2RhbCh7XG4gICAgICAgICAgICB0aXRsZTogXCJTdWNjZXNzIVwiLFxuICAgICAgICAgICAgaHRtbDogYDxwIGNsYXNzPVwidGl0bGVcIj5Vc2VyIEhhcyBCZWVuIENyZWF0ZWQhPC9wPmAsXG4gICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxmLiRuZXh0VGljaygoKSA9PiBzZWxmLiRyb3V0ZXIucHVzaCh7IG5hbWU6IFwidXNlcnNcIiB9KSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvcnMgPT4ge30pO1xuICAgIH0sXG4gICAgcmVzZXRGb3JtKCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5mb3JtID0gbmV3IEZvcm0oe1xuICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgcm9sZXM6IFtdLFxuICAgICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgICAgcGFzc3dvcmRfY29uZmlybWF0aW9uOiBudWxsLFxuICAgICAgICBjb21wYW55X25hbWU6IG51bGwsXG4gICAgICAgIGZpcnN0X25hbWU6IG51bGwsXG4gICAgICAgIGxhc3RfbmFtZTogbnVsbCxcbiAgICAgICAgZW1haWw6IG51bGwsXG4gICAgICAgIHBob25lOiBudWxsLFxuICAgICAgICBhZGRyZXNzXzE6IG51bGwsXG4gICAgICAgIGFkZHJlc3NfMjogbnVsbCxcbiAgICAgICAgY2l0eTogbnVsbCxcbiAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgIHppcDogbnVsbCxcbiAgICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgICAgbm90ZXM6IG51bGxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYXN5bmMgZmV0Y2hSb2xlcygpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCBheGlvcy5nZXQocm91dGUoXCJhcGkucm9sZXMuaW5kZXhcIikpO1xuICAgICAgICBzZWxmLnJvbGVzID0gcGF5bG9hZC5kYXRhO1xuICAgICAgfSBjYXRjaCAoeyBlcnJvcnMsIG1lc3NhZ2UgfSkge1xuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmZXRjaFJvbGVzOmVycm9yc1wiLCBlcnJvcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJmZXRjaFJvbGVzOmVycm9yLW1lc3NhZ2VcIiwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlZGlyZWN0QmFjaygpIHtcbiAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgIHNlbGYuJG5leHRUaWNrKCgpID0+IHNlbGYuJHJvdXRlci5wdXNoKHsgbmFtZTogXCJ1c2Vyc1wiIH0pKTtcbiAgICB9XG4gIH1cbn07XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0NyZWF0ZVVzZXIudnVlIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3YtYXBwJyx7YXR0cnM6e1wic3RhbmRhbG9uZVwiOlwiXCJ9fSxbX2MoJ3YtY29udGVudCcse3N0YXRpY0NsYXNzOlwid2hpdGVcIn0sW19jKCd2LWNvbnRhaW5lcicse3N0YXRpY0NsYXNzOlwicGEtMCBtYS0wXCIsYXR0cnM6e1widHJhbnNpdGlvblwiOlwic2xpZGUteC10cmFuc2l0aW9uXCIsXCJmbHVpZFwiOlwiXCJ9fSxbX2MoJ3YtY2FyZCcse2F0dHJzOntcImZsYXRcIjp0cnVlfX0sW192bS5fdChcInRvb2xiYXJcIiksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0sMSksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJmb290ZXJcIildLDIpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1iODhlYTA2ZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IGRnYklcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLyogdGhpcyBtaXhpbnMgaXMgcmVzcG9uc2libGUgZm9yIGNvbmNhdGluYXRpbmcgZXJyb3IgbWVzc2FnZXMgZnJvbSB2Zm9ybSBhbmQgdmVlLXZhbGlkYXRlICAqL1xuICBtZXRob2RzOiB7XG4gICAgLyogZXJyb3JCYWcgaXMgcmVsYXRhZWQgdG8gdmVlVmFsaWRhdGUgY29uZmlnIG5hbWUqL1xuICAgIC8qIGZvcm0gaXMgcmVsYXRlZCB0byB2Zm9ybSAqL1xuICAgIGVycm9yTWVzc2FnZXMoZmllbGQpIHtcbiAgICAgIHJldHVybiB0aGlzLmVycm9ycy5jb2xsZWN0KGZpZWxkKS5jb25jYXQodGhpcy5mb3JtLmVycm9ycy5vbmx5KGZpZWxkKSk7XG4gICAgfSxcbiAgICBoYXNFcnJvcnMoZmllbGQpIHtcbiAgICAgIGxldCBlcnJvcnMgPSB0aGlzLmVycm9yc1xuICAgICAgICAuY29sbGVjdChmaWVsZClcbiAgICAgICAgLmNvbmNhdCh0aGlzLmZvcm0uZXJyb3JzLm9ubHkoZmllbGQpKTtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21peGlucy92YWxpZGF0aW9uLWVycm9yLmpzIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP21pbmltaXplIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtYjg4ZWEwNmVcXFwiLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJoYXNJbmxpbmVDb25maWdcXFwiOnRydWV9IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vTW9kYWxMYXlvdXQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI1N2JmNGVhOFwiLCBjb250ZW50LCB0cnVlLCB7fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP21pbmltaXplIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LWI4OGVhMDZlXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2xheW91dHMvTW9kYWxMYXlvdXQudnVlXG4vLyBtb2R1bGUgaWQgPSBwd0xLXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMTggMTkgMjAgMjEgMjIgMjMgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAgNjEiLCIvKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4gIE1vZGlmaWVkIGJ5IEV2YW4gWW91IEB5eXg5OTA4MDNcbiovXG5cbnZhciBoYXNEb2N1bWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcblxuaWYgKHR5cGVvZiBERUJVRyAhPT0gJ3VuZGVmaW5lZCcgJiYgREVCVUcpIHtcbiAgaWYgKCFoYXNEb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAndnVlLXN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50LiAnICtcbiAgICBcIlVzZSB7IHRhcmdldDogJ25vZGUnIH0gaW4geW91ciBXZWJwYWNrIGNvbmZpZyB0byBpbmRpY2F0ZSBhIHNlcnZlci1yZW5kZXJpbmcgZW52aXJvbm1lbnQuXCJcbiAgKSB9XG59XG5cbnZhciBsaXN0VG9TdHlsZXMgPSByZXF1aXJlKCcuL2xpc3RUb1N0eWxlcycpXG5cbi8qXG50eXBlIFN0eWxlT2JqZWN0ID0ge1xuICBpZDogbnVtYmVyO1xuICBwYXJ0czogQXJyYXk8U3R5bGVPYmplY3RQYXJ0PlxufVxuXG50eXBlIFN0eWxlT2JqZWN0UGFydCA9IHtcbiAgY3NzOiBzdHJpbmc7XG4gIG1lZGlhOiBzdHJpbmc7XG4gIHNvdXJjZU1hcDogP3N0cmluZ1xufVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0gey8qXG4gIFtpZDogbnVtYmVyXToge1xuICAgIGlkOiBudW1iZXIsXG4gICAgcmVmczogbnVtYmVyLFxuICAgIHBhcnRzOiBBcnJheTwob2JqPzogU3R5bGVPYmplY3RQYXJ0KSA9PiB2b2lkPlxuICB9XG4qL31cblxudmFyIGhlYWQgPSBoYXNEb2N1bWVudCAmJiAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdKVxudmFyIHNpbmdsZXRvbkVsZW1lbnQgPSBudWxsXG52YXIgc2luZ2xldG9uQ291bnRlciA9IDBcbnZhciBpc1Byb2R1Y3Rpb24gPSBmYWxzZVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxudmFyIG9wdGlvbnMgPSBudWxsXG52YXIgc3NySWRLZXkgPSAnZGF0YS12dWUtc3NyLWlkJ1xuXG4vLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbi8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcbnZhciBpc09sZElFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL21zaWUgWzYtOV1cXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXG4vLyBtb2R1bGUgaWQgPSByamowXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNCAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMyAzNCAzNSAzNiAzNyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdtb2RhbC1sYXlvdXQnLHtzdGF0aWNDbGFzczpcIndoaXRlXCJ9LFtfYygndi1jYXJkJyx7YXR0cnM6e1wiZmxhdFwiOnRydWV9fSxbX2MoJ3YtdG9vbGJhcicse3N0YXRpY0NsYXNzOlwicHJpbWFyeVwifSxbX2MoJ3YtYnRuJyx7YXR0cnM6e1wiZmxhdFwiOlwiXCIsXCJpY29uXCI6XCJcIixcImNvbG9yXCI6XCJ3aGl0ZVwifSxuYXRpdmVPbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnJlZGlyZWN0QmFjaygpfX19LFtfYygndi1pY29uJyxbX3ZtLl92KFwiYXJyb3dfYmFja1wiKV0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LXNwYWNlcicpLF92bS5fdihcIiBcIiksX2MoJ3YtdG9vbGJhci10aXRsZScse3N0YXRpY0NsYXNzOlwidGV4dC14cy1jZW50ZXIgd2hpdGUtLXRleHRcIn0sW192bS5fdihcIlVzZXIgQ3JlYXRpb24gUGFnZVwiKV0pLF92bS5fdihcIiBcIiksX2MoJ3Ytc3BhY2VyJyksX3ZtLl92KFwiIFwiKSxfYygndi10b29sYmFyLWl0ZW1zJyxbX2MoJ3YtYnRuJyx7YXR0cnM6e1wibG9hZGluZ1wiOl92bS5mb3JtLmJ1c3ksXCJkaXNhYmxlZFwiOl92bS5lcnJvcnMuYW55KCkgfHwgX3ZtLmZvcm0uYnVzeSxcImZsYXRcIjpcIlwiLFwiY29sb3JcIjpcIndoaXRlXCJ9LG5hdGl2ZU9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc3VibWl0KCl9fX0sW192bS5fdihcIlxcbiAgICAgICAgICBTYXZlXFxuICAgICAgICAgIFwiKSxfYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwifX0sW192bS5fdihcInNhdmVcIildKV0sMSldLDEpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWxheW91dCcse2F0dHJzOntcInJvd1wiOlwiXCIsXCJ3cmFwXCI6XCJcIn19LFtfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwidmFsaWRhdGVcIixyYXdOYW1lOlwidi12YWxpZGF0ZVwiLHZhbHVlOigncmVxdWlyZWR8bWF4OjI1NXxtaW46NnxhbHBoYV9kYXNoJyksZXhwcmVzc2lvbjpcIidyZXF1aXJlZHxtYXg6MjU1fG1pbjo2fGFscGhhX2Rhc2gnXCJ9XSxzdGF0aWNDbGFzczpcInByaW1hcnktLXRleHRcIixjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ3VzZXJuYW1lJykgfSxhdHRyczp7XCJlcnJvci1tZXNzYWdlc1wiOl92bS5lcnJvck1lc3NhZ2VzKCd1c2VybmFtZScpLFwibmFtZVwiOlwidXNlcm5hbWVcIixcImxhYmVsXCI6XCJVc2VybmFtZVwiLFwiZGF0YS12di1uYW1lXCI6XCJ1c2VybmFtZVwiLFwiY291bnRlclwiOlwiMjU1XCIsXCJwcmVwZW5kLWljb25cIjpcImZhLXVzZXJcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS51c2VybmFtZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcInVzZXJuYW1lXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLnVzZXJuYW1lXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse3N0YXRpY0NsYXNzOlwieHM2IG1kNCBvZmZzZXQtbWQyXCJ9LFtfYygndi1hdXRvY29tcGxldGUnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInZhbGlkYXRlXCIscmF3TmFtZTpcInYtdmFsaWRhdGVcIix2YWx1ZTooJ3JlcXVpcmVkJyksZXhwcmVzc2lvbjpcIidyZXF1aXJlZCdcIn1dLGNsYXNzOnsgJ2Vycm9yLS10ZXh0JzogX3ZtLmhhc0Vycm9ycygncm9sZXMnKSB9LGF0dHJzOntcIml0ZW1zXCI6X3ZtLnJvbGVzLFwiZXJyb3ItbWVzc2FnZXNcIjpfdm0uZXJyb3JNZXNzYWdlcygncm9sZXMnKSxcInJlcXVpcmVkXCI6XCJcIixcImNvbG9yXCI6XCJibHVlLWdyZXlcIixcImxhYmVsXCI6XCJTZWxlY3QgQWNjb3VudCBUeXBlXCIsXCJsaWdodFwiOlwiXCIsXCJjaGlwc1wiOlwiXCIsXCJjbGVhcmFibGVcIjpcIlwiLFwiZGVsZXRhYmxlLWNoaXBzXCI6XCJcIixcInByZXBlbmQtaWNvblwiOlwiZmEtdGFnc1wiLFwiZGF0YS12di1uYW1lXCI6XCJyb2xlc1wifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLnJvbGVzKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwicm9sZXNcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0ucm9sZXNcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7c3RhdGljQ2xhc3M6XCJ4czYgbWQ0XCJ9LFtfYygndi1zd2l0Y2gnLHthdHRyczp7XCJsYWJlbFwiOl92bS5nZXRTdGF0dXMoX3ZtLmZvcm0uYWN0aXZlKSxcImhpbnRcIjpcIk5vdGU6IEFjdGl2ZSBVc2VyIGlzIFNlYXJjaGFibGUgT24gV2FyZWhvdXNlL1JlY2VpdmluZy9Mb2dpc3RpYyBGb3Jtc1wiLFwicGVyc2lzdGVudC1oaW50XCI6XCJcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5hY3RpdmUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJhY3RpdmVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uYWN0aXZlXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInZhbGlkYXRlXCIscmF3TmFtZTpcInYtdmFsaWRhdGVcIix2YWx1ZTooJ3JlcXVpcmVkfG1pbjo2fGNvbmZpcm1lZDpjb25maXJtYXRpb24nKSxleHByZXNzaW9uOlwiJ3JlcXVpcmVkfG1pbjo2fGNvbmZpcm1lZDpjb25maXJtYXRpb24nXCJ9XSxzdGF0aWNDbGFzczpcInByaW1hcnktLXRleHRcIixjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ3Bhc3N3b3JkJykgfSxhdHRyczp7XCJhcHBlbmQtaWNvblwiOl92bS5pY29uLFwidHlwZVwiOiFfdm0ucGFzc3dvcmRfdmlzaWJsZSA/ICdwYXNzd29yZCcgOiAndGV4dCcsXCJlcnJvci1tZXNzYWdlc1wiOl92bS5lcnJvck1lc3NhZ2VzKCdwYXNzd29yZCcpLFwibmFtZVwiOlwicGFzc3dvcmRcIixcImxhYmVsXCI6XCJQYXNzd29yZFwiLFwiZGF0YS12di1uYW1lXCI6XCJwYXNzd29yZFwiLFwicHJlcGVuZC1pY29uXCI6XCJmYS1rZXlcIixcImNvdW50ZXJcIjpcIjI1NVwifSxvbjp7XCJjbGljazphcHBlbmRcIjpmdW5jdGlvbiAoKSB7IHJldHVybiAoX3ZtLnBhc3N3b3JkX3Zpc2libGUgPSAhX3ZtLnBhc3N3b3JkX3Zpc2libGUpOyB9fSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLnBhc3N3b3JkKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwicGFzc3dvcmRcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0ucGFzc3dvcmRcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse3JlZjpcImNvbmZpcm1hdGlvblwiLHN0YXRpY0NsYXNzOlwicHJpbWFyeS0tdGV4dFwiLGNsYXNzOnsgJ2Vycm9yLS10ZXh0JzogX3ZtLmhhc0Vycm9ycygncGFzc3dvcmRfY29uZmlybWF0aW9uJykgfSxhdHRyczp7XCJhcHBlbmQtaWNvblwiOl92bS5pY29uLFwidHlwZVwiOiFfdm0ucGFzc3dvcmRfdmlzaWJsZSA/ICdwYXNzd29yZCcgOiAndGV4dCcsXCJlcnJvci1tZXNzYWdlc1wiOl92bS5lcnJvck1lc3NhZ2VzKCdwYXNzd29yZF9jb25maXJtYXRpb24nKSxcIm5hbWVcIjpcInBhc3N3b3JkX2NvbmZpcm1hdGlvblwiLFwibGFiZWxcIjpcIkNvbmZpcm0gUGFzc3dvcmRcIixcInByZXBlbmQtaWNvblwiOlwiZmEtY29weVwiLFwiY291bnRlclwiOlwiMjU1XCJ9LG9uOntcImNsaWNrOmFwcGVuZFwiOmZ1bmN0aW9uICgpIHsgcmV0dXJuIChfdm0ucGFzc3dvcmRfdmlzaWJsZSA9ICFfdm0ucGFzc3dvcmRfdmlzaWJsZSk7IH19LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0ucGFzc3dvcmRfY29uZmlybWF0aW9uKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwicGFzc3dvcmRfY29uZmlybWF0aW9uXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLnBhc3N3b3JkX2NvbmZpcm1hdGlvblwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7ZGlyZWN0aXZlczpbe25hbWU6XCJ2YWxpZGF0ZVwiLHJhd05hbWU6XCJ2LXZhbGlkYXRlXCIsdmFsdWU6KHsgYWxwaGFfc3BhY2VzOiB0cnVlIH0pLGV4cHJlc3Npb246XCJ7IGFscGhhX3NwYWNlczogdHJ1ZSB9XCJ9XSxjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ2NvbXBhbnlfbmFtZScpIH0sYXR0cnM6e1wiZXJyb3ItbWVzc2FnZXNcIjpfdm0uZXJyb3JNZXNzYWdlcygnY29tcGFueV9uYW1lJyksXCJsYWJlbFwiOlwiQ29tcGFueSBOYW1lXCIsXCJwcmVwZW5kLWljb25cIjpcImRvbWFpblwiLFwiZGF0YS12di1uYW1lXCI6XCJjb21wYW55X25hbWVcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5jb21wYW55X25hbWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJjb21wYW55X25hbWVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0uY29tcGFueV9uYW1lXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInZhbGlkYXRlXCIscmF3TmFtZTpcInYtdmFsaWRhdGVcIix2YWx1ZTooeyBlbWFpbDogdHJ1ZSB9KSxleHByZXNzaW9uOlwieyBlbWFpbDogdHJ1ZSB9XCJ9XSxjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ2VtYWlsJykgfSxhdHRyczp7XCJlcnJvci1tZXNzYWdlc1wiOl92bS5lcnJvck1lc3NhZ2VzKCdlbWFpbCcpLFwibGFiZWxcIjpcIkVtYWlsXCIsXCJwcmVwZW5kLWljb25cIjpcIm1haWxcIixcImRhdGEtdnYtbmFtZVwiOlwiZW1haWxcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5lbWFpbCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcImVtYWlsXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLmVtYWlsXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInZhbGlkYXRlXCIscmF3TmFtZTpcInYtdmFsaWRhdGVcIix2YWx1ZTooeyByZXF1aXJlZDogdHJ1ZSwgcmVnZXg6IC9eW2EtekEtWjAtOSBdKyQvIH0pLGV4cHJlc3Npb246XCJ7IHJlcXVpcmVkOiB0cnVlLCByZWdleDogL15bYS16QS1aMC05IF0rJC8gfVwifV0sY2xhc3M6eyAnZXJyb3ItLXRleHQnOiBfdm0uaGFzRXJyb3JzKCdmaXJzdF9uYW1lJykgfSxhdHRyczp7XCJlcnJvci1tZXNzYWdlc1wiOl92bS5lcnJvck1lc3NhZ2VzKCdmaXJzdF9uYW1lJyksXCJsYWJlbFwiOlwiRmlyc3QgTmFtZVwiLFwicHJlcGVuZC1pY29uXCI6XCJwZXJzb25cIixcImRhdGEtdnYtbmFtZVwiOlwiZmlyc3RfbmFtZVwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLmZpcnN0X25hbWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJmaXJzdF9uYW1lXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLmZpcnN0X25hbWVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwidmFsaWRhdGVcIixyYXdOYW1lOlwidi12YWxpZGF0ZVwiLHZhbHVlOih7IHJlcXVpcmVkOiB0cnVlLCByZWdleDogL15bYS16QS1aMC05IF0rJC8gfSksZXhwcmVzc2lvbjpcInsgcmVxdWlyZWQ6IHRydWUsIHJlZ2V4OiAvXlthLXpBLVowLTkgXSskLyB9XCJ9XSxjbGFzczp7ICdlcnJvci0tdGV4dCc6IF92bS5oYXNFcnJvcnMoJ2xhc3RfbmFtZScpIH0sYXR0cnM6e1wiZXJyb3ItbWVzc2FnZXNcIjpfdm0uZXJyb3JNZXNzYWdlcygnbGFzdF9uYW1lJyksXCJsYWJlbFwiOlwiTGFzdCBOYW1lXCIsXCJwcmVwZW5kLWljb25cIjpcInBlb3BsZVwiLFwiZGF0YS12di1uYW1lXCI6XCJsYXN0X25hbWVcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5sYXN0X25hbWUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJsYXN0X25hbWVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcImZvcm0ubGFzdF9uYW1lXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJsYWJlbFwiOlwiUGhvbmVcIixcInByZXBlbmQtaWNvblwiOlwicGhvbmVcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5waG9uZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcInBob25lXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLnBob25lXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJsYWJlbFwiOlwiQWRkcmVzcyAxXCIsXCJwcmVwZW5kLWljb25cIjpcImxvb2tzX29uZVwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLmFkZHJlc3NfMSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcImFkZHJlc3NfMVwiLCAkJHYpfSxleHByZXNzaW9uOlwiZm9ybS5hZGRyZXNzXzFcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2F0dHJzOntcImxhYmVsXCI6XCJBZGRyZXNzIDJcIixcInByZXBlbmQtaWNvblwiOlwibG9va3NfdHdvXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0uYWRkcmVzc18yKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwiYWRkcmVzc18yXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLmFkZHJlc3NfMlwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1wibGFiZWxcIjpcIkNpdHlcIixcInByZXBlbmQtaWNvblwiOlwibG9jYXRpb25fY2l0eVwifSxtb2RlbDp7dmFsdWU6KF92bS5mb3JtLmNpdHkpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJjaXR5XCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLmNpdHlcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCIsXCJtZDhcIjpcIlwiLFwib2Zmc2V0LW1kMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2F0dHJzOntcImxhYmVsXCI6XCJTdGF0ZVwiLFwicHJlcGVuZC1pY29uXCI6XCJtYXBcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZm9ybS5zdGF0ZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5mb3JtLCBcInN0YXRlXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLnN0YXRlXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzMTJcIjpcIlwiLFwibWQ4XCI6XCJcIixcIm9mZnNldC1tZDJcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcInZhbGlkYXRlXCIscmF3TmFtZTpcInYtdmFsaWRhdGVcIix2YWx1ZTooeyByZWdleDogL15cXGR7NX0oPzpbLVxcc11cXGR7NH0pPyQvIH0pLGV4cHJlc3Npb246XCJ7IHJlZ2V4OiAvXlxcXFxkezV9KD86Wy1cXFxcc11cXFxcZHs0fSk/JC8gfVwifV0sY2xhc3M6eyAnZXJyb3ItLXRleHQnOiBfdm0uaGFzRXJyb3JzKCd6aXAnKSB9LGF0dHJzOntcImVycm9yLW1lc3NhZ2VzXCI6X3ZtLmVycm9yTWVzc2FnZXMoJ3ppcCcpLFwibGFiZWxcIjpcIlppcFwiLFwicHJlcGVuZC1pY29uXCI6XCJtYXJrdW5yZWFkX21haWxib3hcIixcImRhdGEtdnYtbmFtZVwiOlwiemlwXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0uemlwKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLmZvcm0sIFwiemlwXCIsICQkdil9LGV4cHJlc3Npb246XCJmb3JtLnppcFwifX0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi10ZXh0YXJlYScse2F0dHJzOntcImNvbG9yXCI6XCJ0ZWFsXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZvcm0ubm90ZXMpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZm9ybSwgXCJub3Rlc1wiLCAkJHYpfSxleHByZXNzaW9uOlwiZm9ybS5ub3Rlc1wifX0sW19jKCdkaXYnLHthdHRyczp7XCJzbG90XCI6XCJsYWJlbFwifSxzbG90OlwibGFiZWxcIn0sW192bS5fdihcIlxcbiAgICAgICAgICAgIE5vdGVzIFwiKSxfYygnc21hbGwnLFtfdm0uX3YoXCIob3B0aW9uYWwpXCIpXSldKV0pXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcIm1kOFwiOlwiXCIsXCJvZmZzZXQtbWQyXCI6XCJcIn19LFtfYygndi1idG4nLHthdHRyczp7XCJsb2FkaW5nXCI6X3ZtLmZvcm0uYnVzeSxcImRpc2FibGVkXCI6X3ZtLmVycm9ycy5hbnkoKSB8fCBfdm0uZm9ybS5idXN5LFwiYmxvY2tcIjpcIlwiLFwiY29sb3JcIjpcImFjY2VudFwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnN1Ym1pdCgpfX19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgU2F2ZSBcIiksX2MoJ3YtaWNvbicse2F0dHJzOntcInJpZ2h0XCI6XCJcIn19LFtfdm0uX3YoXCJzYXZlXCIpXSldLDEpXSwxKV0sMSldLDEpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00MDQ4ZjhhYVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvQ3JlYXRlVXNlci52dWVcbi8vIG1vZHVsZSBpZCA9IHJuUFpcbi8vIG1vZHVsZSBjaHVua3MgPSA1NyIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gdFRWa1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMgMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAgNjEiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi52LW1lc3NhZ2VzX19tZXNzYWdle2NvbG9yOiNlNTczNzN9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj9taW5pbWl6ZSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi1iODhlYTA2ZVwiLFwic2NvcGVkXCI6ZmFsc2UsXCJoYXNJbmxpbmVDb25maWdcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZVxuLy8gbW9kdWxlIGlkID0genI3SFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDE4IDE5IDIwIDIxIDIyIDIzIDM4IDM5IDQwIDQxIDQyIDQzIDQ0IDQ1IDQ2IDQ3IDQ4IDQ5IDUwIDUxIDUyIDUzIDU0IDU1IDU2IDU3IDU4IDU5IDYwIDYxIl0sInNvdXJjZVJvb3QiOiIifQ==