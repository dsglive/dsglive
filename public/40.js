webpackJsonp([40],{"2gGM":function(e,t,r){e.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function t(){return e.default}:function t(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./",r(r.s=0)}({0:function(e,t,r){e.exports=r("lVK7")},OMN4:function(e,t){e.exports=r("mtWM")},lVK7:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("OMN4"),a=r.n(n);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function i(e){if(null===e||"object"!==s(e))return e;var t=Array.isArray(e)?[]:{};return Object.keys(e).forEach(function(r){t[r]=i(e[r])}),t}function o(e){return Array.isArray(e)?e:[e]}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),e}var v=function(){function e(){f(this,e),this.errors={}}return p(e,[{key:"set",value:function e(t,r){"object"===u(t)?this.errors=t:this.set(c({},this.errors,l({},t,o(r))))}},{key:"all",value:function e(){return this.errors}},{key:"has",value:function e(t){return this.errors.hasOwnProperty(t)}},{key:"hasAny",value:function e(){for(var t=this,r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return n.some(function(e){return t.has(e)})}},{key:"any",value:function e(){return Object.keys(this.errors).length>0}},{key:"get",value:function e(t){if(this.has(t))return this.getAll(t)[0]}},{key:"getAll",value:function e(t){return o(this.errors[t]||[])}},{key:"only",value:function e(){for(var t=this,r=[],n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];return a.forEach(function(e){var n=t.get(e);n&&r.push(n)}),r}},{key:"flatten",value:function e(){return Object.values(this.errors).reduce(function(e,t){return e.concat(t)},[])}},{key:"clear",value:function e(t){var r=this,n={};t&&Object.keys(this.errors).forEach(function(e){e!==t&&(n[e]=r.errors[e])}),this.set(n)}}]),e}();function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function e(t){return typeof t}:function e(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function m(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function y(){return(y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function x(e,t,r){return t&&b(e.prototype,t),r&&b(e,r),e}var _=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g(this,e),this.busy=!1,this.successful=!1,this.errors=new v,this.originalData=i(t),Object.assign(this,t)}return x(e,[{key:"fill",value:function e(t){var r=this;this.keys().forEach(function(e){r[e]=t[e]})}},{key:"data",value:function e(){var t=this;return this.keys().reduce(function(e,r){return y({},e,m({},r,t[r]))},{})}},{key:"keys",value:function t(){return Object.keys(this).filter(function(t){return!e.ignore.includes(t)})}},{key:"startProcessing",value:function e(){this.errors.clear(),this.busy=!0,this.successful=!1}},{key:"finishProcessing",value:function e(){this.busy=!1,this.successful=!0}},{key:"clear",value:function e(){this.errors.clear(),this.successful=!1}},{key:"reset",value:function t(){var r=this;Object.keys(this).filter(function(t){return!e.ignore.includes(t)}).forEach(function(e){r[e]=i(r.originalData[e])})}},{key:"get",value:function e(t){return this.submit("get",t)}},{key:"post",value:function e(t){return this.submit("post",t)}},{key:"patch",value:function e(t){return this.submit("patch",t)}},{key:"put",value:function e(t){return this.submit("put",t)}},{key:"delete",value:function e(t){return this.submit("delete",t)}},{key:"submit",value:function e(t,r){var n=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.startProcessing();var i="get"===t?{params:this.data()}:this.data();return new Promise(function(e,o){a.a.request(y({url:n.route(r),method:t,data:i},s)).then(function(t){n.finishProcessing(),e(t)}).catch(function(e){n.busy=!1,e.response&&n.errors.set(n.extractErrors(e.response)),o(e)})})}},{key:"extractErrors",value:function t(r){return r.data&&"object"===h(r.data)?r.data.errors?y({},r.data.errors):r.data.message?{error:r.data.message}:y({},r.data):{error:e.errorMessage}}},{key:"route",value:function t(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=r;return e.routes.hasOwnProperty(r)&&(a=decodeURI(e.routes[r])),"object"!==h(n)&&(n={id:n}),Object.keys(n).forEach(function(e){a=a.replace("{".concat(e,"}"),n[e])}),a}},{key:"onKeydown",value:function e(t){t.target.name&&this.errors.clear(t.target.name)}}]),e}();_.routes={},_.errorMessage="Something went wrong. Please try again.",_.ignore=["busy","successful","errors","originalData"];var k=_,C,w,S;function T(e,t,r,n,a,s,i,o){var l=typeof(e=e||{}).default;"object"!==l&&"function"!==l||(e=e.default);var c="function"==typeof e?e.options:e,u;if(t&&(c.render=t,c.staticRenderFns=r,c._compiled=!0),n&&(c.functional=!0),s&&(c._scopeId=s),i?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=u):a&&(u=o?function(){a.call(this,this.$root.$options.shadowRoot)}:a),u)if(c.functional){c._injectStyles=u;var f=c.render;c.render=function e(t,r){return u.call(r),f(t,r)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:c}}var j=!1,O=null,E=null,A=null,$,P=T({name:"has-error",props:{form:{type:Object,required:!0},field:{type:String,required:!0}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.has(e.field)?r("div",{staticClass:"help-block invalid-feedback",domProps:{innerHTML:e._s(e.form.errors.get(e.field))}}):e._e()},[],!1,null,null,null).exports,F={props:{form:{type:Object,required:!0},dismissible:{type:Boolean,default:!0}},methods:{dismiss:function e(){this.dismissible&&this.form.clear()}}},B,M,D,N=!1,R=null,L=null,I=null,W,H=T({name:"alert-error",extends:F,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[e.form.errors.has("error")?r("div",{domProps:{innerHTML:e._s(e.form.errors.get("error"))}}):r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports,U,V,q,z=!1,Y=null,Z=null,K=null,G,J=T({name:"alert-errors",extends:F,props:{message:{type:String,default:"There were some problems with your input."}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.errors.any()?r("div",{staticClass:"alert alert-danger alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e.message?r("div",{domProps:{innerHTML:e._s(e.message)}}):e._e(),e._v(" "),r("ul",e._l(e.form.errors.flatten(),function(t){return r("li",{domProps:{innerHTML:e._s(t)}})}))]):e._e()},[],!1,null,null,null).exports,X,Q,ee,te=!1,re=null,ne=null,ae=null,se,ie=T({name:"alert-success",extends:F,props:{message:{type:String,default:""}}},function(){var e=this,t=e.$createElement,r=e._self._c||t;return e.form.successful?r("div",{staticClass:"alert alert-success alert-dismissible",attrs:{role:"alert"}},[e.dismissible?r("button",{staticClass:"close",attrs:{type:"button","aria-label":"Close"},on:{click:e.dismiss}},[r("span",{attrs:{"aria-hidden":"true"}},[e._v("×")])]):e._e(),e._v(" "),e._t("default",[r("div",{domProps:{innerHTML:e._s(e.message)}})])],2):e._e()},[],!1,null,null,null).exports;r.d(t,"Form",function(){return k}),r.d(t,"Errors",function(){return v}),r.d(t,"HasError",function(){return P}),r.d(t,"AlertError",function(){return H}),r.d(t,"AlertErrors",function(){return J}),r.d(t,"AlertSuccess",function(){return ie}),r.d(t,"default",function(){return k})}})},"2yrZ":function(e,t,r){function n(e){r("pwLK")}var a,s=null,i,o=!1,l,c=null,u=null,f=r("VU/8")(null,r("dgbI"),!1,n,null,null);e.exports=f.exports},EepW:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-dialog",{attrs:{width:"500"},model:{value:e.dialog,callback:function(t){e.dialog=t},expression:"dialog"}},[r("v-card",[r("v-card-title",{staticClass:"headline primary",attrs:{dark:""}},[r("span",{staticClass:"white--text"},[e._v(e._s(e.title))])]),e._v(" "),r("v-card-text",[e._v("\n      "+e._s(e.message)+"\n    ")]),e._v(" "),r("v-divider"),e._v(" "),r("v-card-actions",[r("v-btn",{attrs:{flat:"",color:"secondary"},on:{click:function(t){e.dialog=!1}}},[r("v-icon",{attrs:{left:""}},[e._v("arrow_left")]),e._v("\n        Back\n      ")],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-btn",{attrs:{color:"primary",flat:""},on:{click:function(t){e.confirm()}}},[e._v("\n        "+e._s(e.action)+"\n      ")])],1)],1)],1)},n=[];e.exports={render:r,staticRenderFns:n}},EzTv:function(e,t,r){var n=r("rzdx");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);var a=r("rjj0")("49789a18",n,!0,{})},JB18:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("modal-layout",{staticClass:"white"},[r("v-card",{attrs:{flat:!0}},[r("v-toolbar",{staticClass:"primary",attrs:{fixed:"",app:""}},[r("v-btn",{attrs:{flat:"",icon:"",color:"white"},nativeOn:{click:function(t){e.redirectBack()}}},[r("v-icon",[e._v("arrow_back")])],1),e._v(" "),r("v-spacer"),e._v(" "),r("v-toolbar-title",{staticClass:"text-xs-center white--text"},[e._v("Customer Clients")]),e._v(" "),r("v-spacer")],1),e._v(" "),r("v-container",{attrs:{fluid:""}},[r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{"d-flex":"",xs12:"",sm7:""}},[r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{"d-flex":""}},[r("v-card",{attrs:{light:"",flat:""}},[r("v-card-title",[r("v-text-field",{attrs:{"append-icon":"search",label:"Search Clients","single-line":"","hide-details":"",light:""},model:{value:e.search,callback:function(t){e.search=t},expression:"search"}})],1)],1)],1)],1)],1),e._v(" "),r("v-flex",{attrs:{"d-flex":"",xs12:"",sm5:"","child-flex":""}},[r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{staticClass:"white",attrs:{xs12:"","d-flex":""}},[r("v-btn",{attrs:{disabled:!e.$auth.check("admin"),block:"",color:"primary",dark:"",flat:""},on:{click:e.createClient}},[e._v("\n                Add New Client\n                "),r("v-icon",{attrs:{right:"",color:"primary"}},[e._v("\n                  fa-user-plus\n                ")])],1)],1),e._v(" "),r("v-flex",{attrs:{xs12:"","d-flex":""}},[r("v-flex",{staticClass:"xs6 white"},[e.selected.length>0?r("v-btn",{attrs:{disabled:!e.$auth.check("admin"),block:"",color:"blue darken-4",dark:"",flat:""},on:{click:e.massActivate}},[r("v-icon",{attrs:{large:"",color:"blue darken-4"}},[e._v("\n                    link\n                  ")]),e._v("\n                  Activate Selected\n                ")],1):e._e()],1),e._v(" "),r("v-flex",{staticClass:"xs6 white"},[e.selected.length>0?r("v-btn",{attrs:{disabled:!e.$auth.check("admin"),block:"",flat:"",color:"error",dark:""},on:{click:e.massDeactivate}},[r("v-icon",{attrs:{large:"",color:"error"}},[e._v("\n                    link_off\n                  ")]),e._v("\n                  Deactivate Selected\n                ")],1):e._e()],1)],1)],1)],1)],1),e._v(" "),r("v-data-table",{attrs:{headers:e.headers,items:e.items,search:e.search,pagination:e.pagination,"select-all":"","item-key":"id",expand:""},on:{"update:pagination":function(t){e.pagination=t}},scopedSlots:e._u([{key:"headers",fn:function(t){return[r("tr",e._l(t.headers,function(t){return r("th",{key:t.text,class:["column sortable",e.pagination.descending?"desc":"asc",t.value===e.pagination.sortBy?"name":"",{"text-xs-left":"left"===t.align,"text-xs-right":"right"===t.align,"text-xs-center":"center"===t.align},e.$vuetify.breakpoint.width>=600&&"title"],on:{click:function(r){e.changeSort(t.value)}}},[r("span",[r("v-icon",[e._v("arrow_upward")]),e._v("\n                "+e._s(t.text)+"\n              ")],1)])}))]}},{key:"items",fn:function(t){return[r("tr",[r("td",{staticClass:"title text-xs-center",staticStyle:{width:"10%","margin-left":"0px","margin-right":"0px","padding-left":"0px","padding-right":"0px"}},[r("v-btn",{staticClass:"compress--icon",class:{"amber--text":t.expanded,amber:t.expanded,teal:!t.expanded,"teal--text":!t.expanded},attrs:{disabled:!e.$auth.check("admin"),light:"",flat:"",icon:""},on:{click:function(e){t.expanded=!t.expanded}}},[t.expanded?e._e():r("v-icon",[e._v("fa-expand")]),e._v(" "),t.expanded?r("v-icon",[e._v("fa-compress")]):e._e()],1),e._v(" "),r("v-btn",{staticClass:"compress--icon",attrs:{disabled:!e.$auth.check("admin"),flat:"",icon:"",color:"blue"},on:{click:function(r){e.editClient(t.item)}}},[r("v-icon",[e._v("fa-pencil")])],1),e._v(" "),r("v-btn",{staticClass:"compress--icon",attrs:{disabled:!e.$auth.check("admin"),flat:"",icon:"",color:"error"},on:{click:function(r){e.openDialog(t.item)}}},[r("v-icon",[e._v("fa-trash")])],1)],1),e._v(" "),r("td",{staticClass:"title text-xs-left accent--text"},[e._v("\n              "+e._s(t.item.name)+"\n            ")])])]}},{key:"pageText",fn:function(t){var r=t.pageStart,n=t.pageStop;return[e._v("\n          From "+e._s(r)+" to "+e._s(n)+"\n        ")]}},{key:"expand",fn:function(t){return[r("v-container",{attrs:{fluid:""}},[r("v-card",{attrs:{light:"",flat:"","text-xs-center":""}},[r("v-card-media",{staticClass:"white--text blue-grey",attrs:{height:"75px"}},[r("v-container",{attrs:{"fill-height":"",fluid:""}},[r("v-layout",{attrs:{"fill-height":""}},[r("v-flex",{attrs:{xs12:"","align-end":"",flexbox:""}},[r("span",{staticClass:"headline"},[e._v(e._s(t.item.name))])])],1)],1)],1),e._v(" "),r("v-card-title",[r("v-container",{attrs:{fluid:""}},[r("p",{staticClass:"title accent--text"},[e._v("\n                    Account Details\n                  ")]),e._v(" "),r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{label:"Email","prepend-icon":"fa-envelope",light:"",readonly:""},model:{value:t.item.email,callback:function(r){e.$set(t.item,"email",r)},expression:"props.item.email"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{label:"Phone",light:"",readonly:"","prepend-icon":"phone"},model:{value:t.item.phone,callback:function(r){e.$set(t.item,"phone",r)},expression:"props.item.phone"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.address_1,label:"Address 1",light:"",readonly:"","prepend-icon":"looks_one"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.address_2,label:"Address 2",light:"",readonly:"","prepend-icon":"looks_two"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.city,label:"City",light:"",readonly:"","prepend-icon":"location_city"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.state,label:"State",light:"",readonly:"","prepend-icon":"map"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.zip,label:"Zip",light:"",readonly:"","prepend-icon":"markunread_mailbox"}})],1),e._v(" "),r("v-flex",{attrs:{xs6:"","px-1":""}},[r("v-text-field",{attrs:{value:t.item.country,label:"Country",light:"",readonly:"","prepend-icon":"flag"}})],1)],1),e._v(" "),r("v-layout",{attrs:{row:"",wrap:""}},[r("v-flex",{attrs:{xs12:""}},[r("v-textarea",{attrs:{color:"primary",readonly:""},model:{value:t.item.notes,callback:function(r){e.$set(t.item,"notes",r)},expression:"props.item.notes"}},[r("div",{attrs:{slot:"label"},slot:"label"},[r("span",{staticClass:"title"},[e._v("Notes: ")])])])],1)],1)],1)],1)],1)],1)]}}]),model:{value:e.selected,callback:function(t){e.selected=t},expression:"selected"}},[r("template",{slot:"no-data"},[r("v-alert",{attrs:{value:!0,color:"error",icon:"warning"}},[e._v("\n            Opps! No Client Yet!, \n            "),r("v-btn",{attrs:{disabled:!e.$auth.check("admin"),color:"white",flat:"",dark:""},on:{click:e.createClient}},[e._v("\n              Create New Client\n              "),r("v-icon",{attrs:{right:"",color:"white"}},[e._v("\n                fa-user-plus\n              ")])],1)],1)],1),e._v(" "),r("v-alert",{attrs:{slot:"no-results",value:!0,color:"blue-grey",icon:"warning"},slot:"no-results"},[e._v('\n          Your search for "'+e._s(e.search)+'" found no results.\n        ')])],2),e._v(" "),r("confirm",{attrs:{callback:e.confirmed(e.deleteClient),message:e.message}})],1)],1)],1)},n=[];e.exports={render:r,staticRenderFns:n}},bjoL:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("Xxa5"),a=r.n(n),s=r("exGp"),i=r.n(s),o=r("2yrZ"),l=r.n(o),c=r("gvVL"),u=r("2gGM"),f=r.n(u),d=r("e7x4"),p=r.n(d),v=r("uzl1"),h=r.n(v),m=r("q+8Z");t.default={components:{ModalLayout:l.a,Confirm:h.a},mixins:[c.a,m.a],props:{customer:{type:[Number,String],required:!0}},data:function e(){return{contentClass:{grey:!0,"lighten-4":!0,"accent--text":!0},dialog:!1,headers:[{text:"Actions",value:"actions",align:"center",sortable:!1},{text:"Name",value:"name",align:"left",sortable:!0}],items:[],selected:[],pagination:{sortBy:"name"},clientsForm:new u.Form({}),toggleForm:new u.Form({toggle:!1,client_id:null}),search:"",deleteClientForm:new u.Form({client_id:null}),domain:window.location.hostname,message:"Warning! Deleting This Client Record Has Some Repercusion To The Sytem, Some Features That Reference To This Client Record Will Break its Functionality Such As DSG, Logistics, Invoicing. Only Proceed If You Think There Will Be No Side Effect Of What You Will Be Doing!"}},watch:{items:{handler:function e(t){},deep:!0}},mounted:function e(){var t=this;this.fetchClients()},methods:{redirectBack:function e(){var t=this;t.$nextTick(function(){return t.$router.push({name:"users"})})},editClient:function e(t){vm.$router.push({name:"customer-clients-edit",params:{customer:this.customer,client:t.id}})},createClient:function e(){vm.$router.push({name:"customer-clients-create"})},fetchClients:function(){var e=i()(a.a.mark(function e(){var t,r,n,s;return a.a.wrap(function e(a){for(;;)switch(a.prev=a.next){case 0:return(t=this).clientsForm.busy=!0,a.prev=2,a.next=5,axios.post(route("api.client.index",{customer:t.customer}),t.clientsForm);case 5:r=a.sent,t.items=r.data.data,t.clientsForm=new u.Form({}),a.next=17;break;case 10:a.prev=10,a.t0=a.catch(2),n=a.t0.errors,s=a.t0.message,n&&t.clientsForm.errors.set(n),t.clientsForm.busy=!1;case 17:case"end":return a.stop()}},e,this,[[2,10]])}));function t(){return e.apply(this,arguments)}return t}(),deleteClient:function e(t){var r=this;r.deleteClientForm.client_id=t.id;var n=_.findIndex(r.items,{id:t.id});axios.post(route("api.client.delete"),r.deleteClientForm).then(function(e){var t;!0===e.data.status&&(r.$delete(r.items,n),p.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Success",html:'<p class="title">Client Deleted!</p>',type:"success",confirmButtonText:"Back"}))}).catch(function(e){var t;p.a.mixin({confirmButtonClass:"v-btn blue-grey  subheading white--text",buttonsStyling:!1})({title:"Oops! Forbidden Action!",html:'<p class="title">'+e.response.data.message+"</p>",type:"warning",confirmButtonText:"Back"})})}}}},d1Pt:function(e,t,r){function n(e){r("EzTv")}var a,s,i,o=!1,l,c,u=null,f=r("VU/8")(r("bjoL"),r("JB18"),!1,n,"data-v-4ccefa03",null);e.exports=f.exports},dgbI:function(e,t){var r=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("v-app",{attrs:{standalone:""}},[r("v-content",{staticClass:"white"},[r("v-container",{staticClass:"pa-0 ma-0",attrs:{transition:"slide-x-transition",fluid:""}},[r("v-card",{attrs:{flat:!0}},[e._t("toolbar"),e._v(" "),e._t("default")],2)],1),e._v(" "),e._t("footer")],2)],1)},n=[];e.exports={render:r,staticRenderFns:n}},fHhQ:function(e,t,r){var n=r("mpHJ");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);var a=r("rjj0")("75b81cfe",n,!0,{})},gvVL:function(e,t,r){"use strict";t.a={methods:{errorMessages:function e(t){return this.errors.collect(t).concat(this.form.errors.only(t))},hasErrors:function e(t){var r;return this.errors.collect(t).concat(this.form.errors.only(t)).length>0}}}},mpHJ:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,"",""])},pwLK:function(e,t,r){var n=r("zr7H");"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);var a=r("rjj0")("57bf4ea8",n,!0,{})},"q+8Z":function(e,t,r){"use strict";t.a={methods:{confirmed:function e(t){var r=this;return function(e){t(e)}},openDialog:function e(t){Bus.$emit("open-confirmation",t)}}}},"r8/K":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{callback:{type:Function,required:!0},message:{type:String,default:function e(){return"Deleting This Dsg Record , Will Also Delete All Associated Data Attach To It Such As Images and Items. Also Note That Some Data In The System That Exist Which Reference To This Dsg Record Will Break its Functionality Such As Invoicing. Only Proceed If You Think There Will Be No Side Effect Of What You Will Be Doing!"}},title:{type:String,default:function e(){return"Are You Sure You Want To Delete This?"}},action:{type:String,default:function e(){return"Yes , I Understand"}}},data:function e(){return{dialog:!1,params:null}},mounted:function e(){var t=this;Bus.$on("open-confirmation",function(e){t.dialog=!0,t.params=e})},methods:{closeDialog:function e(){this.dialog=!1},confirm:function e(){this.callback&&(void 0!=this.params?(this.dialog=!1,this.callback(this.params)):(this.dialog=!1,this.callback()))}}}},rjj0:function(e,t,r){var n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a=r("tTVk"),s={},i=n&&(document.head||document.getElementsByTagName("head")[0]),o=null,l=0,c=!1,u=function(){},f=null,d="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(e){for(var t=0;t<e.length;t++){var r=e[t],n=s[r.id];if(n){n.refs++;for(var a=0;a<n.parts.length;a++)n.parts[a](r.parts[a]);for(;a<r.parts.length;a++)n.parts.push(m(r.parts[a]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length)}else{for(var i=[],a=0;a<r.parts.length;a++)i.push(m(r.parts[a]));s[r.id]={id:r.id,refs:1,parts:i}}}}function h(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function m(e){var t,r,n=document.querySelector("style["+d+'~="'+e.id+'"]');if(n){if(c)return u;n.parentNode.removeChild(n)}if(p){var a=l++;n=o||(o=h()),t=b.bind(null,n,a,!1),r=b.bind(null,n,a,!0)}else n=h(),t=x.bind(null,n),r=function(){n.parentNode.removeChild(n)};return t(e),function n(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else r()}}e.exports=function(e,t,r,n){c=r,f=n||{};var i=a(e,t);return v(i),function t(r){for(var n=[],o=0;o<i.length;o++){var l=i[o],c;(c=s[l.id]).refs--,n.push(c)}r?v(i=a(e,r)):i=[];for(var o=0;o<n.length;o++){var c;if(0===(c=n[o]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete s[c.id]}}}};var y=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")}),g;function b(e,t,r,n){var a=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=y(t,a);else{var s=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(s,i[t]):e.appendChild(s)}}function x(e,t){var r=t.css,n=t.media,a=t.sourceMap;if(n&&e.setAttribute("media",n),f.ssrId&&e.setAttribute(d,t.id),a&&(r+="\n/*# sourceURL="+a.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},rzdx:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".compress--icon[data-v-4ccefa03]{margin-left:-5px;margin-right:-5px}",""])},tTVk:function(e,t){e.exports=function e(t,r){for(var n=[],a={},s=0;s<r.length;s++){var i=r[s],o=i[0],l,c,u,f={id:t+":"+s,css:i[1],media:i[2],sourceMap:i[3]};a[o]?a[o].parts.push(f):n.push(a[o]={id:o,parts:[f]})}return n}},uzl1:function(e,t,r){function n(e){r("fHhQ")}var a,s,i,o=!1,l,c=null,u=null,f=r("VU/8")(r("r8/K"),r("EepW"),!1,n,null,null);e.exports=f.exports},zr7H:function(e,t,r){(t=e.exports=r("FZ+f")(!1)).push([e.i,".v-messages__message{color:#e57373}",""])}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZvcm0vZGlzdC92Zm9ybS5jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlP2QxNmYiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DdXN0b21lckNsaWVudHMudnVlP2NiYWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DdXN0b21lckNsaWVudHMudnVlPzllY2EiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvQ3VzdG9tZXJDbGllbnRzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0N1c3RvbWVyQ2xpZW50cy52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9sYXlvdXRzL01vZGFsTGF5b3V0LnZ1ZT8wODg0Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9kc2cvQ29uZmlybS52dWU/YzJmNiIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21peGlucy92YWxpZGF0aW9uLWVycm9yLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9kc2cvQ29uZmlybS52dWU/ODEwMyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2xheW91dHMvTW9kYWxMYXlvdXQudnVlP2JjYmYiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9taXhpbnMvY29uZmlybWF0aW9uLmpzIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DdXN0b21lckNsaWVudHMudnVlP2VkM2QiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWU/MTk2YiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCIwIiwiT01ONCIsImxWSzciLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwidmFsdWUiLCJleHRlcm5hbF9fYXhpb3NfIiwiZXh0ZXJuYWxfX2F4aW9zX19kZWZhdWx0IiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJkZWVwQ29weSIsImNvcHkiLCJBcnJheSIsImlzQXJyYXkiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImFycmF5V3JhcCIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInRoaXMiLCJFcnJvcnNfX3R5cGVvZiIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiZGVzY3JpcHRvciIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIkVycm9yc19FcnJvcnMiLCJFcnJvcnMiLCJlcnJvcnMiLCJzZXQiLCJmaWVsZCIsIm1lc3NhZ2VzIiwiYWxsIiwiaGFzIiwiaGFzQW55IiwiX3RoaXMiLCJfbGVuIiwiZmllbGRzIiwiX2tleSIsInNvbWUiLCJhbnkiLCJnZXRBbGwiLCJvbmx5IiwiX3RoaXMyIiwiX2xlbjIiLCJfa2V5MiIsIm1lc3NhZ2UiLCJwdXNoIiwiZmxhdHRlbiIsInZhbHVlcyIsInJlZHVjZSIsImEiLCJiIiwiY29uY2F0IiwiY2xlYXIiLCJfdGhpczMiLCJGb3JtX190eXBlb2YiLCJGb3JtX19kZWZpbmVQcm9wZXJ0eSIsIkZvcm1fX2V4dGVuZHMiLCJGb3JtX19jbGFzc0NhbGxDaGVjayIsIkZvcm1fX2RlZmluZVByb3BlcnRpZXMiLCJGb3JtX19jcmVhdGVDbGFzcyIsIkZvcm1fRm9ybSIsIkZvcm0iLCJkYXRhIiwidW5kZWZpbmVkIiwiYnVzeSIsInN1Y2Nlc3NmdWwiLCJvcmlnaW5hbERhdGEiLCJmaWxsIiwiZmlsdGVyIiwiaWdub3JlIiwiaW5jbHVkZXMiLCJzdGFydFByb2Nlc3NpbmciLCJmaW5pc2hQcm9jZXNzaW5nIiwicmVzZXQiLCJ1cmwiLCJzdWJtaXQiLCJwb3N0IiwicGF0Y2giLCJwdXQiLCJfZGVsZXRlIiwibWV0aG9kIiwiX3RoaXM0IiwiY29uZmlnIiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0Iiwicm91dGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImVycm9yIiwiZXh0cmFjdEVycm9ycyIsImVycm9yTWVzc2FnZSIsInBhcmFtZXRlcnMiLCJyb3V0ZXMiLCJkZWNvZGVVUkkiLCJpZCIsInJlcGxhY2UiLCJvbktleWRvd24iLCJldmVudCIsInNyY19Gb3JtIiwiSGFzRXJyb3IiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwidHlwZSIsImRlZmF1bHQiLCJvcHRpb25zIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwicmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fIiwiX192dWVfc3R5bGVzX18iLCJfX3Z1ZV9zY29wZUlkX18iLCJfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fIiwiQ29tcG9uZW50IiwiY29tcG9uZW50c19IYXNFcnJvciIsImZvcm0iLCJyZXF1aXJlZCIsIlN0cmluZyIsIl92bSIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJkb21Qcm9wcyIsImlubmVySFRNTCIsIl9zIiwiX2UiLCJBbGVydCIsImRpc21pc3NpYmxlIiwiQm9vbGVhbiIsIm1ldGhvZHMiLCJkaXNtaXNzIiwiQWxlcnRFcnJvciIsIkFsZXJ0RXJyb3JfcmVuZGVyIiwiQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyIsIkFsZXJ0RXJyb3JfX192dWVfc3R5bGVzX18iLCJBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyIsIkFsZXJ0RXJyb3JfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydEVycm9yIiwiZXh0ZW5kcyIsImF0dHJzIiwicm9sZSIsImFyaWEtbGFiZWwiLCJvbiIsImNsaWNrIiwiYXJpYS1oaWRkZW4iLCJfdiIsIl90IiwiQWxlcnRFcnJvcnMiLCJBbGVydEVycm9yc19yZW5kZXIiLCJBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMiLCJBbGVydEVycm9yc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydEVycm9yc19fX3Z1ZV9zdHlsZXNfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX3Njb3BlSWRfXyIsIkFsZXJ0RXJyb3JzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydEVycm9yc19Db21wb25lbnQiLCJjb21wb25lbnRzX0FsZXJ0RXJyb3JzIiwiX2wiLCJBbGVydFN1Y2Nlc3MiLCJBbGVydFN1Y2Nlc3NfcmVuZGVyIiwiQWxlcnRTdWNjZXNzX3N0YXRpY1JlbmRlckZucyIsIkFsZXJ0U3VjY2Vzc19fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18iLCJBbGVydFN1Y2Nlc3NfX192dWVfc2NvcGVJZF9fIiwiQWxlcnRTdWNjZXNzX19fdnVlX21vZHVsZV9pZGVudGlmaWVyX18iLCJBbGVydFN1Y2Nlc3NfQ29tcG9uZW50IiwiY29tcG9uZW50c19BbGVydFN1Y2Nlc3MiLCJpbmplY3RTdHlsZSIsIl9fdnVlX3NjcmlwdF9fIiwiX192dWVfdGVtcGxhdGVfXyIsIndpZHRoIiwibW9kZWwiLCJjYWxsYmFjayIsIiQkdiIsImRpYWxvZyIsImV4cHJlc3Npb24iLCJkYXJrIiwidGl0bGUiLCJmbGF0IiwiY29sb3IiLCIkZXZlbnQiLCJsZWZ0IiwiY29uZmlybSIsImFjdGlvbiIsImNvbnRlbnQiLCJsb2NhbHMiLCJ1cGRhdGUiLCJmaXhlZCIsImFwcCIsImljb24iLCJuYXRpdmVPbiIsInJlZGlyZWN0QmFjayIsImZsdWlkIiwicm93Iiwid3JhcCIsImQtZmxleCIsInhzMTIiLCJzbTciLCJsaWdodCIsImFwcGVuZC1pY29uIiwibGFiZWwiLCJzaW5nbGUtbGluZSIsImhpZGUtZGV0YWlscyIsInNlYXJjaCIsInNtNSIsImNoaWxkLWZsZXgiLCJkaXNhYmxlZCIsIiRhdXRoIiwiY2hlY2siLCJibG9jayIsImNyZWF0ZUNsaWVudCIsInJpZ2h0Iiwic2VsZWN0ZWQiLCJtYXNzQWN0aXZhdGUiLCJsYXJnZSIsIm1hc3NEZWFjdGl2YXRlIiwiaGVhZGVycyIsIml0ZW1zIiwicGFnaW5hdGlvbiIsInNlbGVjdC1hbGwiLCJpdGVtLWtleSIsImV4cGFuZCIsInVwZGF0ZTpwYWdpbmF0aW9uIiwic2NvcGVkU2xvdHMiLCJfdSIsImZuIiwiaGVhZGVyIiwidGV4dCIsImNsYXNzIiwiZGVzY2VuZGluZyIsInNvcnRCeSIsInRleHQteHMtbGVmdCIsImFsaWduIiwidGV4dC14cy1yaWdodCIsInRleHQteHMtY2VudGVyIiwiJHZ1ZXRpZnkiLCJicmVha3BvaW50IiwiY2hhbmdlU29ydCIsInN0YXRpY1N0eWxlIiwibWFyZ2luLWxlZnQiLCJtYXJnaW4tcmlnaHQiLCJwYWRkaW5nLWxlZnQiLCJwYWRkaW5nLXJpZ2h0IiwiYW1iZXItLXRleHQiLCJleHBhbmRlZCIsImFtYmVyIiwidGVhbCIsInRlYWwtLXRleHQiLCJlZGl0Q2xpZW50IiwiaXRlbSIsIm9wZW5EaWFsb2ciLCJyZWYiLCJwYWdlU3RhcnQiLCJwYWdlU3RvcCIsImhlaWdodCIsImZpbGwtaGVpZ2h0IiwiYWxpZ24tZW5kIiwiZmxleGJveCIsInhzNiIsInB4LTEiLCJwcmVwZW5kLWljb24iLCJyZWFkb25seSIsIiRzZXQiLCJhZGRyZXNzXzEiLCJhZGRyZXNzXzIiLCJjaXR5Iiwic3RhdGUiLCJ6aXAiLCJjb3VudHJ5Iiwic2xvdCIsImNvbmZpcm1lZCIsImRlbGV0ZUNsaWVudCIsImNvbXBvbmVudHMiLCJNb2RhbExheW91dCIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9MYXlvdXRzX01vZGFsTGF5b3V0X3Z1ZV9fX2RlZmF1bHQiLCJDb25maXJtIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X0NvbXBvbmVudHNfZHNnX0NvbmZpcm1fdnVlX19fZGVmYXVsdCIsIm1peGlucyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19NaXhpbnNfdmFsaWRhdGlvbl9lcnJvcl9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X01peGluc19jb25maXJtYXRpb25fXyIsImN1c3RvbWVyIiwiTnVtYmVyIiwiY29udGVudENsYXNzIiwiZ3JleSIsImxpZ2h0ZW4tNCIsImFjY2VudC0tdGV4dCIsInNvcnRhYmxlIiwiY2xpZW50c0Zvcm0iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfdmZvcm1fXyIsInRvZ2dsZUZvcm0iLCJ0b2dnbGUiLCJjbGllbnRfaWQiLCJkZWxldGVDbGllbnRGb3JtIiwiZG9tYWluIiwid2luZG93IiwibG9jYXRpb24iLCJob3N0bmFtZSIsIndhdGNoIiwiaGFuZGxlciIsIm5ld1ZhbHVlIiwiZGVlcCIsIm1vdW50ZWQiLCJzZWxmIiwiZmV0Y2hDbGllbnRzIiwiJG5leHRUaWNrIiwiJHJvdXRlciIsImNsaWVudCIsInZtIiwiX3JlZiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9faG9tZV91cmlhaF9TaXRlc19kc2dsaXZlX25vZGVfbW9kdWxlc19iYWJlbF9ydW50aW1lX2hlbHBlcnNfYXN5bmNUb0dlbmVyYXRvcl9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fX2RlZmF1bHQiLCJtYXJrIiwiX2NhbGxlZSIsInBheWxvYWQiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJheGlvcyIsInNlbnQiLCJ0MCIsInN0b3AiLCJpbmRleCIsIl8iLCJmaW5kSW5kZXgiLCJ0b2dnbGVNb2RhbCIsInN0YXR1cyIsIiRkZWxldGUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfc3dlZXRhbGVydDJfX19kZWZhdWx0IiwibWl4aW4iLCJjb25maXJtQnV0dG9uQ2xhc3MiLCJidXR0b25zU3R5bGluZyIsImh0bWwiLCJjb25maXJtQnV0dG9uVGV4dCIsImRlbGV0ZU1vZGFsIiwic3RhbmRhbG9uZSIsInRyYW5zaXRpb24iLCJlcnJvck1lc3NhZ2VzIiwiY29sbGVjdCIsImhhc0Vycm9ycyIsImNiIiwiQnVzIiwiJGVtaXQiLCJGdW5jdGlvbiIsIl9kZWZhdWx0IiwiJG9uIiwiY2xvc2VEaWFsb2ciLCJoYXNEb2N1bWVudCIsImRvY3VtZW50IiwiREVCVUciLCJFcnJvciIsImxpc3RUb1N0eWxlcyIsInN0eWxlc0luRG9tIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2luZ2xldG9uRWxlbWVudCIsInNpbmdsZXRvbkNvdW50ZXIiLCJpc1Byb2R1Y3Rpb24iLCJub29wIiwic3NySWRLZXkiLCJpc09sZElFIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJhcHBseVRvVGFnIiwidXBkYXRlU3R5bGUiLCJuZXdPYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInBhcmVudElkIiwibGlzdCIsIl9pc1Byb2R1Y3Rpb24iLCJfb3B0aW9ucyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJyZXBsYWNlVGV4dCIsInRleHRTdG9yZSIsInJlcGxhY2VtZW50Iiwiam9pbiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsImluc2VydEJlZm9yZSIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwic291cmNlcyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwibmV3U3R5bGVzIiwicGFydCJdLCJtYXBwaW5ncyI6IjBDQUFBQSxFQUFBQyxRQUNBLFNBQUFDLEdBRUEsSUFBQUMsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUosUUFHQSxJQUFBRCxFQUFBRyxFQUFBRSxJQUNBQyxFQUFBRCxFQUNBRSxHQUFBLEVBQ0FOLFlBVUEsT0FOQUMsRUFBQUcsR0FBQUcsS0FBQVIsRUFBQUMsUUFBQUQsSUFBQUMsUUFBQUcsR0FHQUosRUFBQU8sR0FBQSxFQUdBUCxFQUFBQyxRQXFDQSxPQWhDQUcsRUFBQUssRUFBQVAsRUFHQUUsRUFBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQSxTQUFBVixFQUFBVyxFQUFBQyxHQUNBVCxFQUFBVSxFQUFBYixFQUFBVyxJQUNBRyxPQUFBQyxlQUFBZixFQUFBVyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVQsRUFBQWdCLEVBQUEsU0FBQXBCLEdBQ0EsSUFBQWEsRUFBQWIsS0FBQXFCLFdBQ0EsU0FBQUMsSUFBbUMsT0FBQXRCLEVBQUEsU0FDbkMsU0FBQXVCLElBQXlDLE9BQUF2QixHQUV6QyxPQURBSSxFQUFBTyxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFULEVBQUFVLEVBQUEsU0FBQVUs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NUUsR0FDQXJLLEVBQUEsUUFFQSxJQUFBcUosRUFFQTZGLEVBRUFDLEVBRUEvRCxHQUFBLEVBRUFDLEVBRUFDLEVBQUEsS0FFQUMsRUFBQSxLQUNBQyxFQWJBeEwsRUFBQSxPQWFBcUosQ0FYQXJKLEVBQUEsUUFFQUEsRUFBQSxTQUVBLEVBRUFpUCxFQUVBLEtBRUEsTUFVQXJQLEVBQUFDLFFBQUEyTCxFQUFBM0wsK0JDekJBQSxFQUFBRCxFQUFBQyxRQUFBRyxFQUFBLE9BQUFBLEVBQUEsSUFLQXdGLE1BQUE1RixFQUFBTSxFQUFBLHNDQUE2RCIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIuL1wiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJsVks3XCIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIk9NTjRcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXhpb3NcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImxWSzdcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJheGlvc1wiXG52YXIgZXh0ZXJuYWxfX2F4aW9zXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJPTU40XCIpO1xudmFyIGV4dGVybmFsX19heGlvc19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfX2F4aW9zXyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWwuanNcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8qKlxyXG4gKiBEZWVwIGNvcHkgdGhlIGdpdmVuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKi9cbmZ1bmN0aW9uIGRlZXBDb3B5KG9iaikge1xuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIGNvcHkgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGNvcHlba2V5XSA9IGRlZXBDb3B5KG9ialtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBjb3B5O1xufVxuLyoqXHJcbiAqIElmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYW4gYXJyYXksIHdyYXAgaXQgaW4gb25lLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHtBbnl9IHZhbHVlXHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKi9cblxuZnVuY3Rpb24gYXJyYXlXcmFwKHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL0Vycm9ycy5qc1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gRXJyb3JzX190eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBFcnJvcnNfX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBFcnJvcnNfX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBFcnJvcnNfX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXG5cbnZhciBFcnJvcnNfRXJyb3JzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgbmV3IGVycm9yIGJhZyBpbnN0YW5jZS5cclxuICAgKi9cbiAgZnVuY3Rpb24gRXJyb3JzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFcnJvcnMpO1xuXG4gICAgdGhpcy5lcnJvcnMgPSB7fTtcbiAgfVxuICAvKipcclxuICAgKiBTZXQgdGhlIGVycm9ycyBvYmplY3Qgb3IgZmllbGQgZXJyb3IgbWVzc2FnZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGZpZWxkXHJcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd8dW5kZWZpbmVkfSBtZXNzYWdlc1xyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEVycm9ycywgW3tcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChmaWVsZCwgbWVzc2FnZXMpIHtcbiAgICAgIGlmIChFcnJvcnNfX3R5cGVvZihmaWVsZCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZmllbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldChfZXh0ZW5kcyh7fSwgdGhpcy5lcnJvcnMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgZmllbGQsIGFycmF5V3JhcChtZXNzYWdlcykpKSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCB0aGUgZXJyb3JzLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiYWxsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFsbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVycm9ycztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgaWYgdGhlcmUgaXMgYW4gZXJyb3IgZm9yIHRoZSBnaXZlbiBmaWVsZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpZWxkXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJoYXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGZpZWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5lcnJvcnMuaGFzT3duUHJvcGVydHkoZmllbGQpO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IGVycm9ycyBmb3IgdGhlIGdpdmVuIGZpZWxkcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gIHsuLi5TdHJpbmd9IGZpZWxkc1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzQW55XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc0FueSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmaWVsZHMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGZpZWxkc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpZWxkcy5zb21lKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzKGZpZWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIERldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IGVycm9ycy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhbnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYW55KCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5sZW5ndGggPiAwO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgZmlyc3QgZXJyb3IgbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGZpZWxkLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgU3RyaW5nfSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7U3RyaW5nfHVuZGVmaW5lZH1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldChmaWVsZCkge1xuICAgICAgaWYgKHRoaXMuaGFzKGZpZWxkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGwoZmllbGQpWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGhlIGVycm9yIG1lc3NhZ2VzIGZvciB0aGUgZ2l2ZW4gZmllbGQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBmaWVsZFxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldEFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGwoZmllbGQpIHtcbiAgICAgIHJldHVybiBhcnJheVdyYXAodGhpcy5lcnJvcnNbZmllbGRdIHx8IFtdKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGVycm9yIG1lc3NhZ2UgZm9yIHRoZSBnaXZlbiBmaWVsZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICB7Li4uU3RyaW5nfSBmaWVsZHNcclxuICAgICAqIEByZXR1cm4ge0FycmF5fVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvbmx5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9ubHkoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2VzID0gW107XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZmllbGRzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGZpZWxkc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpczIuZ2V0KGZpZWxkKTtcblxuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgdGhlIGVycm9ycyBpbiBhIGZsYXQgYXJyYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7QXJyYXl9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZsYXR0ZW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmxhdHRlbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuZXJyb3JzKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgICAgfSwgW10pO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIENsZWFyIG9uZSBvciBhbGwgZXJyb3IgZmllbGRzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfHVuZGVmaW5lZH0gZmllbGRcclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoZmllbGQpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgZXJyb3JzID0ge307XG5cbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgaWYgKGtleSAhPT0gZmllbGQpIHtcbiAgICAgICAgICAgIGVycm9yc1trZXldID0gX3RoaXMzLmVycm9yc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0KGVycm9ycyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVycm9ycztcbn0oKTtcblxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9Gb3JtLmpzXG5mdW5jdGlvbiBGb3JtX190eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBGb3JtX190eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgRm9ybV9fdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIEZvcm1fX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIEZvcm1fX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gRm9ybV9fZXh0ZW5kcygpIHsgRm9ybV9fZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBGb3JtX19leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gRm9ybV9fY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBGb3JtX19kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gRm9ybV9fY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBGb3JtX19kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgRm9ybV9fZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuXG5cblxuXG52YXIgRm9ybV9Gb3JtID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBmb3JtIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgZnVuY3Rpb24gRm9ybSgpIHtcbiAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBGb3JtX19jbGFzc0NhbGxDaGVjayh0aGlzLCBGb3JtKTtcblxuICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIHRoaXMuZXJyb3JzID0gbmV3IEVycm9yc19FcnJvcnMoKTtcbiAgICB0aGlzLm9yaWdpbmFsRGF0YSA9IGRlZXBDb3B5KGRhdGEpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbGwgZm9ybSBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cblxuXG4gIEZvcm1fX2NyZWF0ZUNsYXNzKEZvcm0sIFt7XG4gICAga2V5OiBcImZpbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbChkYXRhKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGRhdGFba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZvcm0gZGF0YS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5rZXlzKCkucmVkdWNlKGZ1bmN0aW9uIChkYXRhLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIEZvcm1fX2V4dGVuZHMoe30sIGRhdGEsIEZvcm1fX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIF90aGlzMltrZXldKSk7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZm9ybSBkYXRhIGtleXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImtleXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gIUZvcm0uaWdub3JlLmluY2x1ZGVzKGtleSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgcHJvY2Vzc2luZyB0aGUgZm9ybS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInN0YXJ0UHJvY2Vzc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFByb2Nlc3NpbmcoKSB7XG4gICAgICB0aGlzLmVycm9ycy5jbGVhcigpO1xuICAgICAgdGhpcy5idXN5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuc3VjY2Vzc2Z1bCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5pc2ggcHJvY2Vzc2luZyB0aGUgZm9ybS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZpbmlzaFByb2Nlc3NpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluaXNoUHJvY2Vzc2luZygpIHtcbiAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgICAgdGhpcy5zdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGZvcm0gZXJyb3JzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmVycm9ycy5jbGVhcigpO1xuICAgICAgdGhpcy5zdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBmb3JtIGZpZWxkcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiAhRm9ybS5pZ25vcmUuaW5jbHVkZXMoa2V5KTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpczNba2V5XSA9IGRlZXBDb3B5KF90aGlzMy5vcmlnaW5hbERhdGFba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIEdFVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgnZ2V0JywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIFBPU1QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInBvc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zdCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgncG9zdCcsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZnJvbSB2aWEgYSBQQVRDSCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicGF0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF0Y2godXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ3BhdGNoJywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIFBVVCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicHV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1dCh1cmwpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1Ym1pdCgncHV0JywgdXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3VibWl0IHRoZSBmcm9tIHZpYSBhIERFTEVURSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB1cmxcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJtaXQoJ2RlbGV0ZScsIHVybCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCB0aGUgZm9ybSBkYXRhIHZpYSBhbiBIVFRQIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IG1ldGhvZCAoZ2V0LCBwb3N0LCBwYXRjaCwgcHV0KVxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgKGF4aW9zIGNvbmZpZylcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic3VibWl0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1Ym1pdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgICAgdGhpcy5zdGFydFByb2Nlc3NpbmcoKTtcbiAgICAgIHZhciBkYXRhID0gbWV0aG9kID09PSAnZ2V0JyA/IHtcbiAgICAgICAgcGFyYW1zOiB0aGlzLmRhdGEoKVxuICAgICAgfSA6IHRoaXMuZGF0YSgpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZXh0ZXJuYWxfX2F4aW9zX19kZWZhdWx0LmEucmVxdWVzdChGb3JtX19leHRlbmRzKHtcbiAgICAgICAgICB1cmw6IF90aGlzNC5yb3V0ZSh1cmwpLFxuICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSwgY29uZmlnKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICBfdGhpczQuZmluaXNoUHJvY2Vzc2luZygpO1xuXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzNC5idXN5ID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgIF90aGlzNC5lcnJvcnMuc2V0KF90aGlzNC5leHRyYWN0RXJyb3JzKGVycm9yLnJlc3BvbnNlKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdCB0aGUgZXJyb3JzIGZyb20gdGhlIHJlc3BvbnNlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gcmVzcG9uc2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0RXJyb3JzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RFcnJvcnMocmVzcG9uc2UpIHtcbiAgICAgIGlmICghcmVzcG9uc2UuZGF0YSB8fCBGb3JtX190eXBlb2YocmVzcG9uc2UuZGF0YSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IEZvcm0uZXJyb3JNZXNzYWdlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZS5kYXRhLmVycm9ycykge1xuICAgICAgICByZXR1cm4gRm9ybV9fZXh0ZW5kcyh7fSwgcmVzcG9uc2UuZGF0YS5lcnJvcnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2UuZGF0YS5tZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXJyb3I6IHJlc3BvbnNlLmRhdGEubWVzc2FnZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gRm9ybV9fZXh0ZW5kcyh7fSwgcmVzcG9uc2UuZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIG5hbWVkIHJvdXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBwYXJhbWV0ZXJzXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicm91dGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcm91dGUobmFtZSkge1xuICAgICAgdmFyIHBhcmFtZXRlcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIHVybCA9IG5hbWU7XG5cbiAgICAgIGlmIChGb3JtLnJvdXRlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB1cmwgPSBkZWNvZGVVUkkoRm9ybS5yb3V0ZXNbbmFtZV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoRm9ybV9fdHlwZW9mKHBhcmFtZXRlcnMpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBwYXJhbWV0ZXJzID0ge1xuICAgICAgICAgIGlkOiBwYXJhbWV0ZXJzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShcIntcIi5jb25jYXQoa2V5LCBcIn1cIiksIHBhcmFtZXRlcnNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIGVycm9ycyBvbiBrZXlkb3duLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib25LZXlkb3duXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uS2V5ZG93bihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5uYW1lKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLmNsZWFyKGV2ZW50LnRhcmdldC5uYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9ybTtcbn0oKTtcblxuRm9ybV9Gb3JtLnJvdXRlcyA9IHt9O1xuRm9ybV9Gb3JtLmVycm9yTWVzc2FnZSA9ICdTb21ldGhpbmcgd2VudCB3cm9uZy4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xuRm9ybV9Gb3JtLmlnbm9yZSA9IFsnYnVzeScsICdzdWNjZXNzZnVsJywgJ2Vycm9ycycsICdvcmlnaW5hbERhdGEnXTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19Gb3JtID0gKEZvcm1fRm9ybSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/e1wiY2FjaGVEaXJlY3RvcnlcIjpcIkM6Ly9Vc2Vycy8vT3RpbnNvZnQvL0NvZGUvL2dpdGh1Yi8vdmZvcm0vL25vZGVfbW9kdWxlcy8vLmNhY2hlLy9jYWNoZS1sb2FkZXJcIn0hLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYiEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXNjcmlwdCZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvSGFzRXJyb3IudnVlXG4vL1xuLy9cbi8vXG4vL1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgSGFzRXJyb3IgPSAoe1xuICBuYW1lOiAnaGFzLWVycm9yJyxcbiAgcHJvcHM6IHtcbiAgICBmb3JtOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgZmllbGQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtNDM4OWE2ZGRcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9IYXNFcnJvci52dWVcbnZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5lcnJvcnMuaGFzKF92bS5maWVsZCkpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImhlbHAtYmxvY2sgaW52YWxpZC1mZWVkYmFja1wiLGRvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0uZm9ybS5lcnJvcnMuZ2V0KF92bS5maWVsZCkpfX0pOl92bS5fZSgpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXIuanNcbi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0hhc0Vycm9yLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBIYXNFcnJvcixcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0hhc0Vycm9yID0gKENvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydC5qc1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnQgPSAoe1xuICBwcm9wczoge1xuICAgIGZvcm06IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBkaXNtaXNzaWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgICAgaWYgKHRoaXMuZGlzbWlzc2libGUpIHtcbiAgICAgICAgdGhpcy5mb3JtLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz97XCJjYWNoZURpcmVjdG9yeVwiOlwiQzovL1VzZXJzLy9PdGluc29mdC8vQ29kZS8vZ2l0aHViLy92Zm9ybS8vbm9kZV9tb2R1bGVzLy8uY2FjaGUvL2NhY2hlLWxvYWRlclwifSEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9BbGVydEVycm9yLnZ1ZVxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnRFcnJvciA9ICh7XG4gIG5hbWU6ICdhbGVydC1lcnJvcicsXG4gIGV4dGVuZHM6IEFsZXJ0LFxuICBwcm9wczoge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdUaGVyZSB3ZXJlIHNvbWUgcHJvYmxlbXMgd2l0aCB5b3VyIGlucHV0LidcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1lNzNhYTdjOFwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3IudnVlXG52YXIgQWxlcnRFcnJvcl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5lcnJvcnMuYW55KCkpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImFsZXJ0IGFsZXJ0LWRhbmdlciBhbGVydC1kaXNtaXNzaWJsZVwiLGF0dHJzOntcInJvbGVcIjpcImFsZXJ0XCJ9fSxbKF92bS5kaXNtaXNzaWJsZSk/X2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiY2xvc2VcIixhdHRyczp7XCJ0eXBlXCI6XCJidXR0b25cIixcImFyaWEtbGFiZWxcIjpcIkNsb3NlXCJ9LG9uOntcImNsaWNrXCI6X3ZtLmRpc21pc3N9fSxbX2MoJ3NwYW4nLHthdHRyczp7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifX0sW192bS5fdihcIsOXXCIpXSldKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF92bS5fdChcImRlZmF1bHRcIixbKF92bS5mb3JtLmVycm9ycy5oYXMoJ2Vycm9yJykpP19jKCdkaXYnLHtkb21Qcm9wczp7XCJpbm5lckhUTUxcIjpfdm0uX3MoX3ZtLmZvcm0uZXJyb3JzLmdldCgnZXJyb3InKSl9fSk6X2MoJ2Rpdicse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhfdm0ubWVzc2FnZSl9fSldKV0sMik6X3ZtLl9lKCl9XG52YXIgQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3IudnVlXG4vKiBzY3JpcHQgKi9cblxuXG4vKiB0ZW1wbGF0ZSAqL1xuXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgQWxlcnRFcnJvcl9fX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgQWxlcnRFcnJvcl9fX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIEFsZXJ0RXJyb3JfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcblxudmFyIEFsZXJ0RXJyb3JfQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBBbGVydEVycm9yLFxuICBBbGVydEVycm9yX3JlbmRlcixcbiAgQWxlcnRFcnJvcl9zdGF0aWNSZW5kZXJGbnMsXG4gIEFsZXJ0RXJyb3JfX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBBbGVydEVycm9yX19fdnVlX3N0eWxlc19fLFxuICBBbGVydEVycm9yX19fdnVlX3Njb3BlSWRfXyxcbiAgQWxlcnRFcnJvcl9fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbXBvbmVudHNfQWxlcnRFcnJvciA9IChBbGVydEVycm9yX0NvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJDOi8vVXNlcnMvL090aW5zb2Z0Ly9Db2RlLy9naXRodWIvL3Zmb3JtLy9ub2RlX21vZHVsZXMvLy5jYWNoZS8vY2FjaGUtbG9hZGVyXCJ9IS4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIEFsZXJ0RXJyb3JzID0gKHtcbiAgbmFtZTogJ2FsZXJ0LWVycm9ycycsXG4gIGV4dGVuZHM6IEFsZXJ0LFxuICBwcm9wczoge1xuICAgIG1lc3NhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdUaGVyZSB3ZXJlIHNvbWUgcHJvYmxlbXMgd2l0aCB5b3VyIGlucHV0LidcbiAgICB9XG4gIH1cbn0pO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi00MjJhNjU5MVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxudmFyIEFsZXJ0RXJyb3JzX3JlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gKF92bS5mb3JtLmVycm9ycy5hbnkoKSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlXCIsYXR0cnM6e1wicm9sZVwiOlwiYWxlcnRcIn19LFsoX3ZtLmRpc21pc3NpYmxlKT9fYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJjbG9zZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOlwiQ2xvc2VcIn0sb246e1wiY2xpY2tcIjpfdm0uZGlzbWlzc319LFtfYygnc3Bhbicse2F0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSxbX3ZtLl92KFwiw5dcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS5tZXNzYWdlKT9fYygnZGl2Jyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLF9jKCd1bCcsX3ZtLl9sKChfdm0uZm9ybS5lcnJvcnMuZmxhdHRlbigpKSxmdW5jdGlvbihlcnJvcil7cmV0dXJuIF9jKCdsaScse2RvbVByb3BzOntcImlubmVySFRNTFwiOl92bS5fcyhlcnJvcil9fSl9KSldKTpfdm0uX2UoKX1cbnZhciBBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL0FsZXJ0RXJyb3JzLnZ1ZVxuLyogc2NyaXB0ICovXG5cblxuLyogdGVtcGxhdGUgKi9cblxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIEFsZXJ0RXJyb3JzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBBbGVydEVycm9yc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQWxlcnRFcnJvcnNfQ29tcG9uZW50ID0gbm9ybWFsaXplQ29tcG9uZW50KFxuICBBbGVydEVycm9ycyxcbiAgQWxlcnRFcnJvcnNfcmVuZGVyLFxuICBBbGVydEVycm9yc19zdGF0aWNSZW5kZXJGbnMsXG4gIEFsZXJ0RXJyb3JzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgQWxlcnRFcnJvcnNfX192dWVfc3R5bGVzX18sXG4gIEFsZXJ0RXJyb3JzX19fdnVlX3Njb3BlSWRfXyxcbiAgQWxlcnRFcnJvcnNfX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBjb21wb25lbnRzX0FsZXJ0RXJyb3JzID0gKEFsZXJ0RXJyb3JzX0NvbXBvbmVudC5leHBvcnRzKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzP3tcImNhY2hlRGlyZWN0b3J5XCI6XCJDOi8vVXNlcnMvL090aW5zb2Z0Ly9Db2RlLy9naXRodWIvL3Zmb3JtLy9ub2RlX21vZHVsZXMvLy5jYWNoZS8vY2FjaGUtbG9hZGVyXCJ9IS4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL3NyYy9jb21wb25lbnRzL0FsZXJ0U3VjY2Vzcy52dWVcbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgQWxlcnRTdWNjZXNzID0gKHtcbiAgbmFtZTogJ2FsZXJ0LXN1Y2Nlc3MnLFxuICBleHRlbmRzOiBBbGVydCxcbiAgcHJvcHM6IHtcbiAgICBtZXNzYWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH1cbiAgfVxufSk7XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTBhZmRiOGE4XCIsXCJoYXNTY29wZWRcIjpmYWxzZSxcImJ1YmxlXCI6e1widHJhbnNmb3Jtc1wiOnt9fX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vc3JjL2NvbXBvbmVudHMvQWxlcnRTdWNjZXNzLnZ1ZVxudmFyIEFsZXJ0U3VjY2Vzc19yZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0uZm9ybS5zdWNjZXNzZnVsKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlXCIsYXR0cnM6e1wicm9sZVwiOlwiYWxlcnRcIn19LFsoX3ZtLmRpc21pc3NpYmxlKT9fYygnYnV0dG9uJyx7c3RhdGljQ2xhc3M6XCJjbG9zZVwiLGF0dHJzOntcInR5cGVcIjpcImJ1dHRvblwiLFwiYXJpYS1sYWJlbFwiOlwiQ2xvc2VcIn0sb246e1wiY2xpY2tcIjpfdm0uZGlzbWlzc319LFtfYygnc3Bhbicse2F0dHJzOntcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9fSxbX3ZtLl92KFwiw5dcIildKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX3ZtLl90KFwiZGVmYXVsdFwiLFtfYygnZGl2Jyx7ZG9tUHJvcHM6e1wiaW5uZXJIVE1MXCI6X3ZtLl9zKF92bS5tZXNzYWdlKX19KV0pXSwyKTpfdm0uX2UoKX1cbnZhciBBbGVydFN1Y2Nlc3Nfc3RhdGljUmVuZGVyRm5zID0gW11cblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9BbGVydFN1Y2Nlc3MudnVlXG4vKiBzY3JpcHQgKi9cblxuXG4vKiB0ZW1wbGF0ZSAqL1xuXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgQWxlcnRTdWNjZXNzX19fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgQWxlcnRTdWNjZXNzX19fdnVlX3Njb3BlSWRfXyA9IG51bGxcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuXG52YXIgQWxlcnRTdWNjZXNzX0NvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgQWxlcnRTdWNjZXNzLFxuICBBbGVydFN1Y2Nlc3NfcmVuZGVyLFxuICBBbGVydFN1Y2Nlc3Nfc3RhdGljUmVuZGVyRm5zLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBBbGVydFN1Y2Nlc3NfX192dWVfc3R5bGVzX18sXG4gIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9zY29wZUlkX18sXG4gIEFsZXJ0U3VjY2Vzc19fX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGNvbXBvbmVudHNfQWxlcnRTdWNjZXNzID0gKEFsZXJ0U3VjY2Vzc19Db21wb25lbnQuZXhwb3J0cyk7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2luZGV4LmpzXG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRm9ybVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHNyY19Gb3JtOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJFcnJvcnNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBFcnJvcnNfRXJyb3JzOyB9KTtcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgKi9fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJIYXNFcnJvclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbXBvbmVudHNfSGFzRXJyb3I7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFsZXJ0RXJyb3JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjb21wb25lbnRzX0FsZXJ0RXJyb3I7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFsZXJ0RXJyb3JzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50c19BbGVydEVycm9yczsgfSk7XG4vKiBjb25jYXRlZCBoYXJtb255IHJlZXhwb3J0ICovX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQWxlcnRTdWNjZXNzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50c19BbGVydFN1Y2Nlc3M7IH0pO1xuLyogY29uY2F0ZWQgaGFybW9ueSByZWV4cG9ydCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBzcmNfRm9ybTsgfSk7XG5cblxuXG5cblxuXG5cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdmZvcm0vZGlzdC92Zm9ybS5jb21tb24uanNcbi8vIG1vZHVsZSBpZCA9IDJnR01cbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiA0IDUgNiA3IDggOSAxMCAxMSAxMiAxMyAxNCAxNSAxNiAxNyAxOCAxOSAyMCAyMSAyMiAyMyAyNSAyNiAyNyAyOCAyOSAzMCAzMSAzMiAzMyAzNCAzNSAzNiAzNyAzOCA0MCA0MSA0MiA0MyA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCIsImZ1bmN0aW9uIGluamVjdFN0eWxlIChzc3JDb250ZXh0KSB7XG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9taW5pbWl6ZSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXg/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LWI4OGVhMDZlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01vZGFsTGF5b3V0LnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IG51bGxcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LWI4OGVhMDZlXFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTW9kYWxMYXlvdXQudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IDJ5clpcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCd2LWRpYWxvZycse2F0dHJzOntcIndpZHRoXCI6XCI1MDBcIn0sbW9kZWw6e3ZhbHVlOihfdm0uZGlhbG9nKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLmRpYWxvZz0kJHZ9LGV4cHJlc3Npb246XCJkaWFsb2dcIn19LFtfYygndi1jYXJkJyxbX2MoJ3YtY2FyZC10aXRsZScse3N0YXRpY0NsYXNzOlwiaGVhZGxpbmUgcHJpbWFyeVwiLGF0dHJzOntcImRhcmtcIjpcIlwifX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ3aGl0ZS0tdGV4dFwifSxbX3ZtLl92KF92bS5fcyhfdm0udGl0bGUpKV0pXSksX3ZtLl92KFwiIFwiKSxfYygndi1jYXJkLXRleHQnLFtfdm0uX3YoXCJcXG4gICAgICBcIitfdm0uX3MoX3ZtLm1lc3NhZ2UpK1wiXFxuICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ3YtZGl2aWRlcicpLF92bS5fdihcIiBcIiksX2MoJ3YtY2FyZC1hY3Rpb25zJyxbX2MoJ3YtYnRuJyx7YXR0cnM6e1wiZmxhdFwiOlwiXCIsXCJjb2xvclwiOlwic2Vjb25kYXJ5XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uZGlhbG9nID0gZmFsc2V9fX0sW19jKCd2LWljb24nLHthdHRyczp7XCJsZWZ0XCI6XCJcIn19LFtfdm0uX3YoXCJhcnJvd19sZWZ0XCIpXSksX3ZtLl92KFwiXFxuICAgICAgICBCYWNrXFxuICAgICAgXCIpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LXNwYWNlcicpLF92bS5fdihcIiBcIiksX2MoJ3YtYnRuJyx7YXR0cnM6e1wiY29sb3JcIjpcInByaW1hcnlcIixcImZsYXRcIjpcIlwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmNvbmZpcm0oKX19fSxbX3ZtLl92KFwiXFxuICAgICAgICBcIitfdm0uX3MoX3ZtLmFjdGlvbikrXCJcXG4gICAgICBcIildKV0sMSldLDEpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi0yNGJmMTBlZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9kc2cvQ29uZmlybS52dWVcbi8vIG1vZHVsZSBpZCA9IEVlcFdcbi8vIG1vZHVsZSBjaHVua3MgPSA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgNDAiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/bWluaW1pemUhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi00Y2NlZmEwM1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0N1c3RvbWVyQ2xpZW50cy52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjQ5Nzg5YTE4XCIsIGNvbnRlbnQsIHRydWUsIHt9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtNGNjZWZhMDNcIixcInNjb3BlZFwiOnRydWUsXCJoYXNJbmxpbmVDb25maWdcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DdXN0b21lckNsaWVudHMudnVlXG4vLyBtb2R1bGUgaWQgPSBFelR2XG4vLyBtb2R1bGUgY2h1bmtzID0gNDAiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnbW9kYWwtbGF5b3V0Jyx7c3RhdGljQ2xhc3M6XCJ3aGl0ZVwifSxbX2MoJ3YtY2FyZCcse2F0dHJzOntcImZsYXRcIjp0cnVlfX0sW19jKCd2LXRvb2xiYXInLHtzdGF0aWNDbGFzczpcInByaW1hcnlcIixhdHRyczp7XCJmaXhlZFwiOlwiXCIsXCJhcHBcIjpcIlwifX0sW19jKCd2LWJ0bicse2F0dHJzOntcImZsYXRcIjpcIlwiLFwiaWNvblwiOlwiXCIsXCJjb2xvclwiOlwid2hpdGVcIn0sbmF0aXZlT246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe192bS5yZWRpcmVjdEJhY2soKX19fSxbX2MoJ3YtaWNvbicsW192bS5fdihcImFycm93X2JhY2tcIildKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1zcGFjZXInKSxfdm0uX3YoXCIgXCIpLF9jKCd2LXRvb2xiYXItdGl0bGUnLHtzdGF0aWNDbGFzczpcInRleHQteHMtY2VudGVyIHdoaXRlLS10ZXh0XCJ9LFtfdm0uX3YoXCJDdXN0b21lciBDbGllbnRzXCIpXSksX3ZtLl92KFwiIFwiKSxfYygndi1zcGFjZXInKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1jb250YWluZXInLHthdHRyczp7XCJmbHVpZFwiOlwiXCJ9fSxbX2MoJ3YtbGF5b3V0Jyx7YXR0cnM6e1wicm93XCI6XCJcIixcIndyYXBcIjpcIlwifX0sW19jKCd2LWZsZXgnLHthdHRyczp7XCJkLWZsZXhcIjpcIlwiLFwieHMxMlwiOlwiXCIsXCJzbTdcIjpcIlwifX0sW19jKCd2LWxheW91dCcse2F0dHJzOntcInJvd1wiOlwiXCIsXCJ3cmFwXCI6XCJcIn19LFtfYygndi1mbGV4Jyx7YXR0cnM6e1wiZC1mbGV4XCI6XCJcIn19LFtfYygndi1jYXJkJyx7YXR0cnM6e1wibGlnaHRcIjpcIlwiLFwiZmxhdFwiOlwiXCJ9fSxbX2MoJ3YtY2FyZC10aXRsZScsW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJhcHBlbmQtaWNvblwiOlwic2VhcmNoXCIsXCJsYWJlbFwiOlwiU2VhcmNoIENsaWVudHNcIixcInNpbmdsZS1saW5lXCI6XCJcIixcImhpZGUtZGV0YWlsc1wiOlwiXCIsXCJsaWdodFwiOlwiXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLnNlYXJjaCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5zZWFyY2g9JCR2fSxleHByZXNzaW9uOlwic2VhcmNoXCJ9fSldLDEpXSwxKV0sMSldLDEpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJkLWZsZXhcIjpcIlwiLFwieHMxMlwiOlwiXCIsXCJzbTVcIjpcIlwiLFwiY2hpbGQtZmxleFwiOlwiXCJ9fSxbX2MoJ3YtbGF5b3V0Jyx7YXR0cnM6e1wicm93XCI6XCJcIixcIndyYXBcIjpcIlwifX0sW19jKCd2LWZsZXgnLHtzdGF0aWNDbGFzczpcIndoaXRlXCIsYXR0cnM6e1wieHMxMlwiOlwiXCIsXCJkLWZsZXhcIjpcIlwifX0sW19jKCd2LWJ0bicse2F0dHJzOntcImRpc2FibGVkXCI6IV92bS4kYXV0aC5jaGVjaygnYWRtaW4nKSxcImJsb2NrXCI6XCJcIixcImNvbG9yXCI6XCJwcmltYXJ5XCIsXCJkYXJrXCI6XCJcIixcImZsYXRcIjpcIlwifSxvbjp7XCJjbGlja1wiOl92bS5jcmVhdGVDbGllbnR9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgIEFkZCBOZXcgQ2xpZW50XFxuICAgICAgICAgICAgICAgIFwiKSxfYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwiLFwiY29sb3JcIjpcInByaW1hcnlcIn19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICBmYS11c2VyLXBsdXNcXG4gICAgICAgICAgICAgICAgXCIpXSldLDEpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcImQtZmxleFwiOlwiXCJ9fSxbX2MoJ3YtZmxleCcse3N0YXRpY0NsYXNzOlwieHM2IHdoaXRlXCJ9LFsoX3ZtLnNlbGVjdGVkLmxlbmd0aCA+IDApP19jKCd2LWJ0bicse2F0dHJzOntcImRpc2FibGVkXCI6IV92bS4kYXV0aC5jaGVjaygnYWRtaW4nKSxcImJsb2NrXCI6XCJcIixcImNvbG9yXCI6XCJibHVlIGRhcmtlbi00XCIsXCJkYXJrXCI6XCJcIixcImZsYXRcIjpcIlwifSxvbjp7XCJjbGlja1wiOl92bS5tYXNzQWN0aXZhdGV9fSxbX2MoJ3YtaWNvbicse2F0dHJzOntcImxhcmdlXCI6XCJcIixcImNvbG9yXCI6XCJibHVlIGRhcmtlbi00XCJ9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICBsaW5rXFxuICAgICAgICAgICAgICAgICAgXCIpXSksX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgQWN0aXZhdGUgU2VsZWN0ZWRcXG4gICAgICAgICAgICAgICAgXCIpXSwxKTpfdm0uX2UoKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7c3RhdGljQ2xhc3M6XCJ4czYgd2hpdGVcIn0sWyhfdm0uc2VsZWN0ZWQubGVuZ3RoID4gMCk/X2MoJ3YtYnRuJyx7YXR0cnM6e1wiZGlzYWJsZWRcIjohX3ZtLiRhdXRoLmNoZWNrKCdhZG1pbicpLFwiYmxvY2tcIjpcIlwiLFwiZmxhdFwiOlwiXCIsXCJjb2xvclwiOlwiZXJyb3JcIixcImRhcmtcIjpcIlwifSxvbjp7XCJjbGlja1wiOl92bS5tYXNzRGVhY3RpdmF0ZX19LFtfYygndi1pY29uJyx7YXR0cnM6e1wibGFyZ2VcIjpcIlwiLFwiY29sb3JcIjpcImVycm9yXCJ9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICBsaW5rX29mZlxcbiAgICAgICAgICAgICAgICAgIFwiKV0pLF92bS5fdihcIlxcbiAgICAgICAgICAgICAgICAgIERlYWN0aXZhdGUgU2VsZWN0ZWRcXG4gICAgICAgICAgICAgICAgXCIpXSwxKTpfdm0uX2UoKV0sMSldLDEpXSwxKV0sMSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZGF0YS10YWJsZScse2F0dHJzOntcImhlYWRlcnNcIjpfdm0uaGVhZGVycyxcIml0ZW1zXCI6X3ZtLml0ZW1zLFwic2VhcmNoXCI6X3ZtLnNlYXJjaCxcInBhZ2luYXRpb25cIjpfdm0ucGFnaW5hdGlvbixcInNlbGVjdC1hbGxcIjpcIlwiLFwiaXRlbS1rZXlcIjpcImlkXCIsXCJleHBhbmRcIjpcIlwifSxvbjp7XCJ1cGRhdGU6cGFnaW5hdGlvblwiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnBhZ2luYXRpb249JGV2ZW50fX0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OlwiaGVhZGVyc1wiLGZuOmZ1bmN0aW9uKHByb3BzKXtyZXR1cm4gW19jKCd0cicsX3ZtLl9sKChwcm9wcy5oZWFkZXJzKSxmdW5jdGlvbihoZWFkZXIpe3JldHVybiBfYygndGgnLHtrZXk6aGVhZGVyLnRleHQsY2xhc3M6Wydjb2x1bW4gc29ydGFibGUnLCBfdm0ucGFnaW5hdGlvbi5kZXNjZW5kaW5nID8gJ2Rlc2MnIDogJ2FzYycsIFxuICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIudmFsdWUgPT09IF92bS5wYWdpbmF0aW9uLnNvcnRCeSA/ICduYW1lJyA6ICcnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgeyd0ZXh0LXhzLWxlZnQnOiBoZWFkZXIuYWxpZ24gPT09ICdsZWZ0JywgXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC14cy1yaWdodCc6IGhlYWRlci5hbGlnbiA9PT0gJ3JpZ2h0JywgXG4gICAgICAgICAgICAgICAgICAgICAgICAndGV4dC14cy1jZW50ZXInOiBoZWFkZXIuYWxpZ24gPT09ICdjZW50ZXInfSxcbiAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiR2dWV0aWZ5LmJyZWFrcG9pbnQud2lkdGggPj0gNjAwICYmICd0aXRsZSddLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uY2hhbmdlU29ydChoZWFkZXIudmFsdWUpfX19LFtfYygnc3BhbicsW19jKCd2LWljb24nLFtfdm0uX3YoXCJhcnJvd191cHdhcmRcIildKSxfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgXCIrX3ZtLl9zKGhlYWRlci50ZXh0KStcIlxcbiAgICAgICAgICAgICAgXCIpXSwxKV0pfSkpXX19LHtrZXk6XCJpdGVtc1wiLGZuOmZ1bmN0aW9uKHByb3BzKXtyZXR1cm4gW19jKCd0cicsW19jKCd0ZCcse3N0YXRpY0NsYXNzOlwidGl0bGUgdGV4dC14cy1jZW50ZXJcIixzdGF0aWNTdHlsZTp7XCJ3aWR0aFwiOlwiMTAlXCIsXCJtYXJnaW4tbGVmdFwiOlwiMHB4XCIsXCJtYXJnaW4tcmlnaHRcIjpcIjBweFwiLFwicGFkZGluZy1sZWZ0XCI6XCIwcHhcIixcInBhZGRpbmctcmlnaHRcIjpcIjBweFwifX0sW19jKCd2LWJ0bicse3N0YXRpY0NsYXNzOlwiY29tcHJlc3MtLWljb25cIixjbGFzczp7J2FtYmVyLS10ZXh0JzogcHJvcHMuZXhwYW5kZWQsICdhbWJlcic6IHByb3BzLmV4cGFuZGVkLCAndGVhbCc6ICFwcm9wcy5leHBhbmRlZCwgJ3RlYWwtLXRleHQnOiAhcHJvcHMuZXhwYW5kZWQgfSxhdHRyczp7XCJkaXNhYmxlZFwiOiFfdm0uJGF1dGguY2hlY2soJ2FkbWluJyksXCJsaWdodFwiOlwiXCIsXCJmbGF0XCI6XCJcIixcImljb25cIjpcIlwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cHJvcHMuZXhwYW5kZWQgPSAhcHJvcHMuZXhwYW5kZWR9fX0sWyghcHJvcHMuZXhwYW5kZWQpP19jKCd2LWljb24nLFtfdm0uX3YoXCJmYS1leHBhbmRcIildKTpfdm0uX2UoKSxfdm0uX3YoXCIgXCIpLChwcm9wcy5leHBhbmRlZCk/X2MoJ3YtaWNvbicsW192bS5fdihcImZhLWNvbXByZXNzXCIpXSk6X3ZtLl9lKCldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtYnRuJyx7c3RhdGljQ2xhc3M6XCJjb21wcmVzcy0taWNvblwiLGF0dHJzOntcImRpc2FibGVkXCI6IV92bS4kYXV0aC5jaGVjaygnYWRtaW4nKSxcImZsYXRcIjpcIlwiLFwiaWNvblwiOlwiXCIsXCJjb2xvclwiOlwiYmx1ZVwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmVkaXRDbGllbnQocHJvcHMuaXRlbSl9fX0sW19jKCd2LWljb24nLFtfdm0uX3YoXCJmYS1wZW5jaWxcIildKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1idG4nLHtzdGF0aWNDbGFzczpcImNvbXByZXNzLS1pY29uXCIsYXR0cnM6e1wiZGlzYWJsZWRcIjohX3ZtLiRhdXRoLmNoZWNrKCdhZG1pbicpLFwiZmxhdFwiOlwiXCIsXCJpY29uXCI6XCJcIixcImNvbG9yXCI6XCJlcnJvclwifSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLm9wZW5EaWFsb2cocHJvcHMuaXRlbSl9fX0sW19jKCd2LWljb24nLFtfdm0uX3YoXCJmYS10cmFzaFwiKV0pXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndGQnLHtzdGF0aWNDbGFzczpcInRpdGxlIHRleHQteHMtbGVmdCBhY2NlbnQtLXRleHRcIn0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgXCIrX3ZtLl9zKHByb3BzLml0ZW0ubmFtZSkrXCJcXG4gICAgICAgICAgICBcIildKV0pXX19LHtrZXk6XCJwYWdlVGV4dFwiLGZuOmZ1bmN0aW9uKHJlZil7XG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlU3RhcnQgPSByZWYucGFnZVN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFnZVN0b3AgPSByZWYucGFnZVN0b3A7XG5yZXR1cm4gW192bS5fdihcIlxcbiAgICAgICAgICBGcm9tIFwiK192bS5fcyhwYWdlU3RhcnQpK1wiIHRvIFwiK192bS5fcyhwYWdlU3RvcCkrXCJcXG4gICAgICAgIFwiKV19fSx7a2V5OlwiZXhwYW5kXCIsZm46ZnVuY3Rpb24ocHJvcHMpe3JldHVybiBbX2MoJ3YtY29udGFpbmVyJyx7YXR0cnM6e1wiZmx1aWRcIjpcIlwifX0sW19jKCd2LWNhcmQnLHthdHRyczp7XCJsaWdodFwiOlwiXCIsXCJmbGF0XCI6XCJcIixcInRleHQteHMtY2VudGVyXCI6XCJcIn19LFtfYygndi1jYXJkLW1lZGlhJyx7c3RhdGljQ2xhc3M6XCJ3aGl0ZS0tdGV4dCBibHVlLWdyZXlcIixhdHRyczp7XCJoZWlnaHRcIjpcIjc1cHhcIn19LFtfYygndi1jb250YWluZXInLHthdHRyczp7XCJmaWxsLWhlaWdodFwiOlwiXCIsXCJmbHVpZFwiOlwiXCJ9fSxbX2MoJ3YtbGF5b3V0Jyx7YXR0cnM6e1wiZmlsbC1oZWlnaHRcIjpcIlwifX0sW19jKCd2LWZsZXgnLHthdHRyczp7XCJ4czEyXCI6XCJcIixcImFsaWduLWVuZFwiOlwiXCIsXCJmbGV4Ym94XCI6XCJcIn19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaGVhZGxpbmVcIn0sW192bS5fdihfdm0uX3MocHJvcHMuaXRlbS5uYW1lKSldKV0pXSwxKV0sMSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtY2FyZC10aXRsZScsW19jKCd2LWNvbnRhaW5lcicse2F0dHJzOntcImZsdWlkXCI6XCJcIn19LFtfYygncCcse3N0YXRpY0NsYXNzOlwidGl0bGUgYWNjZW50LS10ZXh0XCJ9LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgIEFjY291bnQgRGV0YWlsc1xcbiAgICAgICAgICAgICAgICAgIFwiKV0pLF92bS5fdihcIiBcIiksX2MoJ3YtbGF5b3V0Jyx7YXR0cnM6e1wicm93XCI6XCJcIixcIndyYXBcIjpcIlwifX0sW19jKCd2LWZsZXgnLHthdHRyczp7XCJ4czZcIjpcIlwiLFwicHgtMVwiOlwiXCJ9fSxbX2MoJ3YtdGV4dC1maWVsZCcse2F0dHJzOntcImxhYmVsXCI6XCJFbWFpbFwiLFwicHJlcGVuZC1pY29uXCI6XCJmYS1lbnZlbG9wZVwiLFwibGlnaHRcIjpcIlwiLFwicmVhZG9ubHlcIjpcIlwifSxtb2RlbDp7dmFsdWU6KHByb3BzLml0ZW0uZW1haWwpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChwcm9wcy5pdGVtLCBcImVtYWlsXCIsICQkdil9LGV4cHJlc3Npb246XCJwcm9wcy5pdGVtLmVtYWlsXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzNlwiOlwiXCIsXCJweC0xXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1wibGFiZWxcIjpcIlBob25lXCIsXCJsaWdodFwiOlwiXCIsXCJyZWFkb25seVwiOlwiXCIsXCJwcmVwZW5kLWljb25cIjpcInBob25lXCJ9LG1vZGVsOnt2YWx1ZToocHJvcHMuaXRlbS5waG9uZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KHByb3BzLml0ZW0sIFwicGhvbmVcIiwgJCR2KX0sZXhwcmVzc2lvbjpcInByb3BzLml0ZW0ucGhvbmVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHM2XCI6XCJcIixcInB4LTFcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJ2YWx1ZVwiOnByb3BzLml0ZW0uYWRkcmVzc18xLFwibGFiZWxcIjpcIkFkZHJlc3MgMVwiLFwibGlnaHRcIjpcIlwiLFwicmVhZG9ubHlcIjpcIlwiLFwicHJlcGVuZC1pY29uXCI6XCJsb29rc19vbmVcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHM2XCI6XCJcIixcInB4LTFcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJ2YWx1ZVwiOnByb3BzLml0ZW0uYWRkcmVzc18yLFwibGFiZWxcIjpcIkFkZHJlc3MgMlwiLFwibGlnaHRcIjpcIlwiLFwicmVhZG9ubHlcIjpcIlwiLFwicHJlcGVuZC1pY29uXCI6XCJsb29rc190d29cIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHM2XCI6XCJcIixcInB4LTFcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJ2YWx1ZVwiOnByb3BzLml0ZW0uY2l0eSxcImxhYmVsXCI6XCJDaXR5XCIsXCJsaWdodFwiOlwiXCIsXCJyZWFkb25seVwiOlwiXCIsXCJwcmVwZW5kLWljb25cIjpcImxvY2F0aW9uX2NpdHlcIn19KV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1mbGV4Jyx7YXR0cnM6e1wieHM2XCI6XCJcIixcInB4LTFcIjpcIlwifX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJ2YWx1ZVwiOnByb3BzLml0ZW0uc3RhdGUsXCJsYWJlbFwiOlwiU3RhdGVcIixcImxpZ2h0XCI6XCJcIixcInJlYWRvbmx5XCI6XCJcIixcInByZXBlbmQtaWNvblwiOlwibWFwXCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzNlwiOlwiXCIsXCJweC0xXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1widmFsdWVcIjpwcm9wcy5pdGVtLnppcCxcImxhYmVsXCI6XCJaaXBcIixcImxpZ2h0XCI6XCJcIixcInJlYWRvbmx5XCI6XCJcIixcInByZXBlbmQtaWNvblwiOlwibWFya3VucmVhZF9tYWlsYm94XCJ9fSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtZmxleCcse2F0dHJzOntcInhzNlwiOlwiXCIsXCJweC0xXCI6XCJcIn19LFtfYygndi10ZXh0LWZpZWxkJyx7YXR0cnM6e1widmFsdWVcIjpwcm9wcy5pdGVtLmNvdW50cnksXCJsYWJlbFwiOlwiQ291bnRyeVwiLFwibGlnaHRcIjpcIlwiLFwicmVhZG9ubHlcIjpcIlwiLFwicHJlcGVuZC1pY29uXCI6XCJmbGFnXCJ9fSldLDEpXSwxKSxfdm0uX3YoXCIgXCIpLF9jKCd2LWxheW91dCcse2F0dHJzOntcInJvd1wiOlwiXCIsXCJ3cmFwXCI6XCJcIn19LFtfYygndi1mbGV4Jyx7YXR0cnM6e1wieHMxMlwiOlwiXCJ9fSxbX2MoJ3YtdGV4dGFyZWEnLHthdHRyczp7XCJjb2xvclwiOlwicHJpbWFyeVwiLFwicmVhZG9ubHlcIjpcIlwifSxtb2RlbDp7dmFsdWU6KHByb3BzLml0ZW0ubm90ZXMpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChwcm9wcy5pdGVtLCBcIm5vdGVzXCIsICQkdil9LGV4cHJlc3Npb246XCJwcm9wcy5pdGVtLm5vdGVzXCJ9fSxbX2MoJ2Rpdicse2F0dHJzOntcInNsb3RcIjpcImxhYmVsXCJ9LHNsb3Q6XCJsYWJlbFwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRpdGxlXCJ9LFtfdm0uX3YoXCJOb3RlczogXCIpXSldKV0pXSwxKV0sMSldLDEpXSwxKV0sMSldLDEpXX19XSksbW9kZWw6e3ZhbHVlOihfdm0uc2VsZWN0ZWQpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uc2VsZWN0ZWQ9JCR2fSxleHByZXNzaW9uOlwic2VsZWN0ZWRcIn19LFtfYygndGVtcGxhdGUnLHtzbG90Olwibm8tZGF0YVwifSxbX2MoJ3YtYWxlcnQnLHthdHRyczp7XCJ2YWx1ZVwiOnRydWUsXCJjb2xvclwiOlwiZXJyb3JcIixcImljb25cIjpcIndhcm5pbmdcIn19LFtfdm0uX3YoXCJcXG4gICAgICAgICAgICBPcHBzISBObyBDbGllbnQgWWV0ISwgXFxuICAgICAgICAgICAgXCIpLF9jKCd2LWJ0bicse2F0dHJzOntcImRpc2FibGVkXCI6IV92bS4kYXV0aC5jaGVjaygnYWRtaW4nKSxcImNvbG9yXCI6XCJ3aGl0ZVwiLFwiZmxhdFwiOlwiXCIsXCJkYXJrXCI6XCJcIn0sb246e1wiY2xpY2tcIjpfdm0uY3JlYXRlQ2xpZW50fX0sW192bS5fdihcIlxcbiAgICAgICAgICAgICAgQ3JlYXRlIE5ldyBDbGllbnRcXG4gICAgICAgICAgICAgIFwiKSxfYygndi1pY29uJyx7YXR0cnM6e1wicmlnaHRcIjpcIlwiLFwiY29sb3JcIjpcIndoaXRlXCJ9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgIGZhLXVzZXItcGx1c1xcbiAgICAgICAgICAgICAgXCIpXSldLDEpXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1hbGVydCcse2F0dHJzOntcInNsb3RcIjpcIm5vLXJlc3VsdHNcIixcInZhbHVlXCI6dHJ1ZSxcImNvbG9yXCI6XCJibHVlLWdyZXlcIixcImljb25cIjpcIndhcm5pbmdcIn0sc2xvdDpcIm5vLXJlc3VsdHNcIn0sW192bS5fdihcIlxcbiAgICAgICAgICBZb3VyIHNlYXJjaCBmb3IgXFxcIlwiK192bS5fcyhfdm0uc2VhcmNoKStcIlxcXCIgZm91bmQgbm8gcmVzdWx0cy5cXG4gICAgICAgIFwiKV0pXSwyKSxfdm0uX3YoXCIgXCIpLF9jKCdjb25maXJtJyx7YXR0cnM6e1wiY2FsbGJhY2tcIjpfdm0uY29uZmlybWVkKF92bS5kZWxldGVDbGllbnQpLFwibWVzc2FnZVwiOl92bS5tZXNzYWdlfX0pXSwxKV0sMSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5tb2R1bGUuZXhwb3J0cyA9IHsgcmVuZGVyOiByZW5kZXIsIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zIH1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj97XCJpZFwiOlwiZGF0YS12LTRjY2VmYTAzXCIsXCJoYXNTY29wZWRcIjp0cnVlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0N1c3RvbWVyQ2xpZW50cy52dWVcbi8vIG1vZHVsZSBpZCA9IEpCMThcbi8vIG1vZHVsZSBjaHVua3MgPSA0MCIsIjx0ZW1wbGF0ZT5cbiAgPG1vZGFsLWxheW91dCBjbGFzcz1cIndoaXRlXCI+XG4gICAgPHYtY2FyZCA6ZmxhdD1cInRydWVcIj5cbiAgICAgIDx2LXRvb2xiYXIgXG4gICAgICAgIGZpeGVkIFxuICAgICAgICBhcHAgXG4gICAgICAgIGNsYXNzPVwicHJpbWFyeVwiXG4gICAgICA+XG4gICAgICAgIDx2LWJ0biBcbiAgICAgICAgICBmbGF0IFxuICAgICAgICAgIGljb24gXG4gICAgICAgICAgY29sb3I9XCJ3aGl0ZVwiXG4gICAgICAgICAgQGNsaWNrLm5hdGl2ZT1cInJlZGlyZWN0QmFjaygpXCJcbiAgICAgICAgPlxuICAgICAgICAgIDx2LWljb24+YXJyb3dfYmFjazwvdi1pY29uPlxuICAgICAgICA8L3YtYnRuPlxuICAgICAgICA8di1zcGFjZXIvPlxuICAgICAgICA8di10b29sYmFyLXRpdGxlIGNsYXNzPVwidGV4dC14cy1jZW50ZXIgd2hpdGUtLXRleHRcIj5DdXN0b21lciBDbGllbnRzPC92LXRvb2xiYXItdGl0bGU+XG4gICAgICAgIDx2LXNwYWNlci8+XG4gICAgICA8L3YtdG9vbGJhcj5cbiAgICAgIDx2LWNvbnRhaW5lciBmbHVpZD5cbiAgICAgICAgPCEtLSBTZWFyY2ggYW5kIEFjdGlvbiBCdXR0b25zIC0tPlxuICAgICAgICA8di1sYXlvdXQgXG4gICAgICAgICAgcm93IFxuICAgICAgICAgIHdyYXA+XG4gICAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICAgIGQtZmxleCBcbiAgICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgICBzbTc+XG4gICAgICAgICAgICA8di1sYXlvdXQgXG4gICAgICAgICAgICAgIHJvdyBcbiAgICAgICAgICAgICAgd3JhcD5cbiAgICAgICAgICAgICAgPHYtZmxleCBkLWZsZXg+XG4gICAgICAgICAgICAgICAgPHYtY2FyZCBcbiAgICAgICAgICAgICAgICAgIGxpZ2h0IFxuICAgICAgICAgICAgICAgICAgZmxhdFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDx2LWNhcmQtdGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwic2VhcmNoXCJcbiAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQtaWNvbj1cInNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJTZWFyY2ggQ2xpZW50c1wiXG4gICAgICAgICAgICAgICAgICAgICAgc2luZ2xlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICBoaWRlLWRldGFpbHNcbiAgICAgICAgICAgICAgICAgICAgICBsaWdodFxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGl0bGU+XG4gICAgICAgICAgICAgICAgPC92LWNhcmQ+XG4gICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgPC92LWxheW91dD5cbiAgICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgICA8di1mbGV4IFxuICAgICAgICAgICAgZC1mbGV4IFxuICAgICAgICAgICAgeHMxMiBcbiAgICAgICAgICAgIHNtNSBcbiAgICAgICAgICAgIGNoaWxkLWZsZXg+XG4gICAgICAgICAgICA8di1sYXlvdXQgXG4gICAgICAgICAgICAgIHJvdyBcbiAgICAgICAgICAgICAgd3JhcD5cbiAgICAgICAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICAgICAgICB4czEyIFxuICAgICAgICAgICAgICAgIGNsYXNzPVwid2hpdGVcIlxuICAgICAgICAgICAgICAgIGQtZmxleD5cbiAgICAgICAgICAgICAgICA8di1idG4gXG4gICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCIhJGF1dGguY2hlY2soJ2FkbWluJylcIiBcbiAgICAgICAgICAgICAgICAgIGJsb2NrIFxuICAgICAgICAgICAgICAgICAgY29sb3I9XCJwcmltYXJ5XCIgXG4gICAgICAgICAgICAgICAgICBkYXJrXG4gICAgICAgICAgICAgICAgICBmbGF0XG4gICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjcmVhdGVDbGllbnRcIj5cbiAgICAgICAgICAgICAgICAgIEFkZCBOZXcgQ2xpZW50XG4gICAgICAgICAgICAgICAgICA8di1pY29uXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiIFxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICBmYS11c2VyLXBsdXNcbiAgICAgICAgICAgICAgICAgIDwvdi1pY29uPlxuICAgICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICA8di1mbGV4IFxuICAgICAgICAgICAgICAgIHhzMTIgXG4gICAgICAgICAgICAgICAgZC1mbGV4PlxuICAgICAgICAgICAgICAgIDx2LWZsZXggY2xhc3M9XCJ4czYgd2hpdGVcIj5cbiAgICAgICAgICAgICAgICAgIDx2LWJ0biBcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cInNlbGVjdGVkLmxlbmd0aCA+IDBcIlxuICAgICAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCIhJGF1dGguY2hlY2soJ2FkbWluJylcIiBcbiAgICAgICAgICAgICAgICAgICAgYmxvY2sgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiYmx1ZSBkYXJrZW4tNFwiIFxuICAgICAgICAgICAgICAgICAgICBkYXJrXG4gICAgICAgICAgICAgICAgICAgIGZsYXRcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwibWFzc0FjdGl2YXRlXCI+XG4gICAgICAgICAgICAgICAgICAgIDx2LWljb25cbiAgICAgICAgICAgICAgICAgICAgICBsYXJnZVxuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiYmx1ZSBkYXJrZW4tNFwiIFxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgbGlua1xuICAgICAgICAgICAgICAgICAgICA8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgQWN0aXZhdGUgU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICAgICAgPC92LWZsZXg+XG4gICAgICAgICAgICAgICAgPHYtZmxleCBjbGFzcz1cInhzNiB3aGl0ZVwiPlxuICAgICAgICAgICAgICAgICAgPHYtYnRuIFxuICAgICAgICAgICAgICAgICAgICB2LWlmPVwic2VsZWN0ZWQubGVuZ3RoID4gMFwiXG4gICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiEkYXV0aC5jaGVjaygnYWRtaW4nKVwiIFxuICAgICAgICAgICAgICAgICAgICBibG9jayBcbiAgICAgICAgICAgICAgICAgICAgZmxhdFxuICAgICAgICAgICAgICAgICAgICBjb2xvcj1cImVycm9yXCIgXG4gICAgICAgICAgICAgICAgICAgIGRhcmtcbiAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwibWFzc0RlYWN0aXZhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHYtaWNvblxuICAgICAgICAgICAgICAgICAgICAgIGxhcmdlXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJlcnJvclwiIFxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgbGlua19vZmZcbiAgICAgICAgICAgICAgICAgICAgPC92LWljb24+XG4gICAgICAgICAgICAgICAgICAgIERlYWN0aXZhdGUgU2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICAgICAgPC92LWZsZXg+XG4gICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgPC92LWxheW91dD5cbiAgICAgICAgICBcbiAgICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgPC92LWxheW91dD5cbiAgICAgICAgPCEtLSBDbGllbnQgRGF0YSBUYWJsZSAtLT5cbiAgICAgICAgPHYtZGF0YS10YWJsZVxuICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZFwiXG4gICAgICAgICAgOmhlYWRlcnM9XCJoZWFkZXJzXCJcbiAgICAgICAgICA6aXRlbXM9XCJpdGVtc1wiXG4gICAgICAgICAgOnNlYXJjaD1cInNlYXJjaFwiXG4gICAgICAgICAgOnBhZ2luYXRpb24uc3luYz1cInBhZ2luYXRpb25cIlxuICAgICAgICAgIHNlbGVjdC1hbGxcbiAgICAgICAgICBpdGVtLWtleT1cImlkXCJcbiAgICAgICAgICBleHBhbmRcbiAgICAgICAgPlxuICAgICAgICAgIDwhLS0gSGVhZGVyIFNlY3Rpb24gLS0+XG4gICAgICAgICAgPHRlbXBsYXRlXG4gICAgICAgICAgICBzbG90PVwiaGVhZGVyc1wiIFxuICAgICAgICAgICAgc2xvdC1zY29wZT1cInByb3BzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDwhLS0gPHRoPlxuICAgICAgICAgICAgICA8di1jaGVja2JveFxuICAgICAgICAgICAgICAgIDppbnB1dC12YWx1ZT1cInByb3BzLmFsbFwiXG4gICAgICAgICAgICAgICAgOmluZGV0ZXJtaW5hdGU9XCJwcm9wcy5pbmRldGVybWluYXRlXCJcbiAgICAgICAgICAgICAgICBwcmltYXJ5XG4gICAgICAgICAgICAgICAgaGlkZS1kZXRhaWxzXG4gICAgICAgICAgICAgICAgQGNsaWNrLm5hdGl2ZT1cInRvZ2dsZUFsbFwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L3RoPiAtLT5cbiAgICAgICAgICAgICAgPHRoIFxuICAgICAgICAgICAgICAgIHYtZm9yPVwiaGVhZGVyIGluIHByb3BzLmhlYWRlcnNcIiBcbiAgICAgICAgICAgICAgICA6a2V5PVwiaGVhZGVyLnRleHRcIlxuICAgICAgICAgICAgICAgIDpjbGFzcz1cIlsnY29sdW1uIHNvcnRhYmxlJywgcGFnaW5hdGlvbi5kZXNjZW5kaW5nID8gJ2Rlc2MnIDogJ2FzYycsIFxuICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci52YWx1ZSA9PT0gcGFnaW5hdGlvbi5zb3J0QnkgPyAnbmFtZScgOiAnJywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgeyd0ZXh0LXhzLWxlZnQnOiBoZWFkZXIuYWxpZ24gPT09ICdsZWZ0JywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LXhzLXJpZ2h0JzogaGVhZGVyLmFsaWduID09PSAncmlnaHQnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RleHQteHMtY2VudGVyJzogaGVhZGVyLmFsaWduID09PSAnY2VudGVyJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgJHZ1ZXRpZnkuYnJlYWtwb2ludC53aWR0aCA+PSA2MDAgJiYgJ3RpdGxlJ11cIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cImNoYW5nZVNvcnQoaGVhZGVyLnZhbHVlKVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgIDx2LWljb24+YXJyb3dfdXB3YXJkPC92LWljb24+XG4gICAgICAgICAgICAgICAgICB7eyBoZWFkZXIudGV4dCB9fVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8IS0tIFJvdyBTZWN0aW9uIC0tPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBcbiAgICAgICAgICAgIHNsb3Q9XCJpdGVtc1wiIFxuICAgICAgICAgICAgc2xvdC1zY29wZT1cInByb3BzXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDwhLS0gPHRkIGNsYXNzPVwidGl0bGUgdGV4dC14cy1sZWZ0XCI+XG4gICAgICAgICAgICAgIDx2LWNoZWNrYm94XG4gICAgICAgICAgICAgICAgOmFjdGl2ZT1cInByb3BzLnNlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICA6aW5wdXQtdmFsdWU9XCJwcm9wcy5zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPVwicHJvcHMuc2VsZWN0ZWQgPSAhcHJvcHMuc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC90ZD4gLS0+XG4gICAgICAgICAgICAgIDwhLS0gPHRkIGNsYXNzPVwidGl0bGUgdGV4dC14cy1sZWZ0IGFjY2VudC0tdGV4dFwiPlxuICAgICAgICAgICAgICB7eyBwcm9wcy5pdGVtLmlkIH19XG4gICAgICAgICAgICA8L3RkPiAtLT5cbiAgICAgICAgICAgICAgPHRkIFxuICAgICAgICAgICAgICAgIGNsYXNzPVwidGl0bGUgdGV4dC14cy1jZW50ZXJcIlxuICAgICAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6MTAlO21hcmdpbi1sZWZ0OjBweDttYXJnaW4tcmlnaHQ6MHB4O3BhZGRpbmctbGVmdDowcHg7cGFkZGluZy1yaWdodDowcHg7XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDx2LWJ0biBcbiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiEkYXV0aC5jaGVjaygnYWRtaW4nKVwiIFxuICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieydhbWJlci0tdGV4dCc6IHByb3BzLmV4cGFuZGVkLCAnYW1iZXInOiBwcm9wcy5leHBhbmRlZCwgJ3RlYWwnOiAhcHJvcHMuZXhwYW5kZWQsICd0ZWFsLS10ZXh0JzogIXByb3BzLmV4cGFuZGVkIH1cIiBcbiAgICAgICAgICAgICAgICAgIGxpZ2h0IFxuICAgICAgICAgICAgICAgICAgZmxhdCBcbiAgICAgICAgICAgICAgICAgIGljb24gXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImNvbXByZXNzLS1pY29uXCJcbiAgICAgICAgICAgICAgICAgIEBjbGljaz1cInByb3BzLmV4cGFuZGVkID0gIXByb3BzLmV4cGFuZGVkXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8di1pY29uIHYtaWY9XCIhcHJvcHMuZXhwYW5kZWRcIj5mYS1leHBhbmQ8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICAgIDx2LWljb24gdi1pZj1cInByb3BzLmV4cGFuZGVkXCI+ZmEtY29tcHJlc3M8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICA8L3YtYnRuPlxuICAgICAgICAgICAgICAgIDx2LWJ0biBcbiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiEkYXV0aC5jaGVjaygnYWRtaW4nKVwiIFxuICAgICAgICAgICAgICAgICAgZmxhdCBcbiAgICAgICAgICAgICAgICAgIGljb24gXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cImJsdWVcIiBcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY29tcHJlc3MtLWljb25cIlxuICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZWRpdENsaWVudChwcm9wcy5pdGVtKVwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHYtaWNvbj5mYS1wZW5jaWw8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICA8L3YtYnRuPlxuICAgICAgICAgICAgICAgIDx2LWJ0biBcbiAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cIiEkYXV0aC5jaGVjaygnYWRtaW4nKVwiIFxuICAgICAgICAgICAgICAgICAgZmxhdCBcbiAgICAgICAgICAgICAgICAgIGljb24gXG4gICAgICAgICAgICAgICAgICBjb2xvcj1cImVycm9yXCIgXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImNvbXByZXNzLS1pY29uXCJcbiAgICAgICAgICAgICAgICAgIEBjbGljaz1cIm9wZW5EaWFsb2cocHJvcHMuaXRlbSlcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDx2LWljb24+ZmEtdHJhc2g8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICA8L3YtYnRuPlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0aXRsZSB0ZXh0LXhzLWxlZnQgYWNjZW50LS10ZXh0XCI+XG4gICAgICAgICAgICAgICAge3sgcHJvcHMuaXRlbS5uYW1lIH19XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwhLS0gUGFnaW5hdGlvbiBTZWN0aW9uIC0tPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBcbiAgICAgICAgICAgIHNsb3Q9XCJwYWdlVGV4dFwiXG4gICAgICAgICAgICBzbG90LXNjb3BlPVwieyBwYWdlU3RhcnQsIHBhZ2VTdG9wIH1cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEZyb20ge3sgcGFnZVN0YXJ0IH19IHRvIHt7IHBhZ2VTdG9wIH19XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8IS0tIEV4cGFuZCBTZWN0aW9uIC0tPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBcbiAgICAgICAgICAgIHNsb3Q9XCJleHBhbmRcIiBcbiAgICAgICAgICAgIHNsb3Qtc2NvcGU9XCJwcm9wc1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHYtY29udGFpbmVyIGZsdWlkPlxuICAgICAgICAgICAgICA8di1jYXJkIFxuICAgICAgICAgICAgICAgIGxpZ2h0IFxuICAgICAgICAgICAgICAgIGZsYXQgXG4gICAgICAgICAgICAgICAgdGV4dC14cy1jZW50ZXJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDx2LWNhcmQtbWVkaWFcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwid2hpdGUtLXRleHQgYmx1ZS1ncmV5XCJcbiAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjc1cHhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBcbiAgICAgICAgICAgICAgICAgICAgZmlsbC1oZWlnaHQgXG4gICAgICAgICAgICAgICAgICAgIGZsdWlkXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDx2LWxheW91dCBmaWxsLWhlaWdodD5cbiAgICAgICAgICAgICAgICAgICAgICA8di1mbGV4IFxuICAgICAgICAgICAgICAgICAgICAgICAgeHMxMiBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLWVuZCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXhib3hcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImhlYWRsaW5lXCI+e3sgcHJvcHMuaXRlbS5uYW1lIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICAgICAgICA8L3YtbGF5b3V0PlxuICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L3YtY2FyZC1tZWRpYT5cbiAgICAgICAgICAgICAgICA8di1jYXJkLXRpdGxlPlxuICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGZsdWlkPlxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxwIFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwidGl0bGUgYWNjZW50LS10ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIEFjY291bnQgRGV0YWlsc1xuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgIDx2LWxheW91dCBcbiAgICAgICAgICAgICAgICAgICAgICByb3cgXG4gICAgICAgICAgICAgICAgICAgICAgd3JhcFxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHhzNlxuICAgICAgICAgICAgICAgICAgICAgICAgcHgtMT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInByb3BzLml0ZW0uZW1haWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwiZmEtZW52ZWxvcGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgICAgICAgICAgICAgICA8di1mbGV4IFxuICAgICAgICAgICAgICAgICAgICAgICAgeHM2XG4gICAgICAgICAgICAgICAgICAgICAgICBweC0xPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicHJvcHMuaXRlbS5waG9uZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiUGhvbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249XCJwaG9uZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICAgICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgICAgICAgICAgICAgICB4czZcbiAgICAgICAgICAgICAgICAgICAgICAgIHB4LTFcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cInByb3BzLml0ZW0uYWRkcmVzc18xXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJBZGRyZXNzIDFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVwZW5kLWljb249XCJsb29rc19vbmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgICAgICAgICAgICAgICA8di1mbGV4IFxuICAgICAgICAgICAgICAgICAgICAgICAgeHM2XG4gICAgICAgICAgICAgICAgICAgICAgICBweC0xXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICA6dmFsdWU9XCJwcm9wcy5pdGVtLmFkZHJlc3NfMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiQWRkcmVzcyAyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibG9va3NfdHdvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC92LWZsZXg+XG4gICAgICAgICAgICAgICAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHhzNlxuICAgICAgICAgICAgICAgICAgICAgICAgcHgtMVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPVwicHJvcHMuaXRlbS5jaXR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJDaXR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibG9jYXRpb25fY2l0eVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICAgICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgICAgICAgICAgICAgICB4czZcbiAgICAgICAgICAgICAgICAgICAgICAgIHB4LTFcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cInByb3BzLml0ZW0uc3RhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlN0YXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlcGVuZC1pY29uPVwibWFwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC92LWZsZXg+XG4gICAgICAgICAgICAgICAgICAgICAgPHYtZmxleCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHhzNlxuICAgICAgICAgICAgICAgICAgICAgICAgcHgtMVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRleHQtZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhbHVlPVwicHJvcHMuaXRlbS56aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlppcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cIm1hcmt1bnJlYWRfbWFpbGJveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICAgICAgICAgIDx2LWZsZXggXG4gICAgICAgICAgICAgICAgICAgICAgICB4czZcbiAgICAgICAgICAgICAgICAgICAgICAgIHB4LTFcbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0LWZpZWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cInByb3BzLml0ZW0uY291bnRyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiQ291bnRyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHByZXBlbmQtaWNvbj1cImZsYWdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L3YtZmxleD5cbiAgICAgICAgICAgICAgICAgICAgPC92LWxheW91dD5cbiAgICAgICAgICAgICAgICAgICAgPHYtbGF5b3V0IFxuICAgICAgICAgICAgICAgICAgICAgIHJvdyBcbiAgICAgICAgICAgICAgICAgICAgICB3cmFwXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8di1mbGV4IHhzMTI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di10ZXh0YXJlYVxuICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicHJvcHMuaXRlbS5ub3Rlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc2xvdD1cImxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aXRsZVwiPk5vdGVzOiA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC92LXRleHRhcmVhPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdi1mbGV4PlxuICAgICAgICAgICAgICAgICAgICA8L3YtbGF5b3V0PlxuXG4gICAgICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRpdGxlPlxuXG4gICAgICAgICAgICAgIDwvdi1jYXJkPlxuICAgICAgICAgICAgPC92LWNvbnRhaW5lcj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwhLS0gTm8gRGF0YSBTZWN0aW9uIC0tPlxuICAgICAgICAgIDx0ZW1wbGF0ZSBzbG90PVwibm8tZGF0YVwiPlxuICAgICAgICAgICAgPHYtYWxlcnQgXG4gICAgICAgICAgICAgIDp2YWx1ZT1cInRydWVcIiBcbiAgICAgICAgICAgICAgY29sb3I9XCJlcnJvclwiIFxuICAgICAgICAgICAgICBpY29uPVwid2FybmluZ1wiPlxuICAgICAgICAgICAgICBPcHBzISBObyBDbGllbnQgWWV0ISwgXG4gICAgICAgICAgICAgIDx2LWJ0biBcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCIhJGF1dGguY2hlY2soJ2FkbWluJylcIiBcbiAgICAgICAgICAgICAgICBjb2xvcj1cIndoaXRlXCIgXG4gICAgICAgICAgICAgICAgZmxhdFxuICAgICAgICAgICAgICAgIGRhcmtcbiAgICAgICAgICAgICAgICBAY2xpY2s9XCJjcmVhdGVDbGllbnRcIj5cbiAgICAgICAgICAgICAgICBDcmVhdGUgTmV3IENsaWVudFxuICAgICAgICAgICAgICAgIDx2LWljb25cbiAgICAgICAgICAgICAgICAgIHJpZ2h0XG4gICAgICAgICAgICAgICAgICBjb2xvcj1cIndoaXRlXCIgXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgZmEtdXNlci1wbHVzXG4gICAgICAgICAgICAgICAgPC92LWljb24+XG4gICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICA8L3YtYWxlcnQ+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8IS0tIE5vIFNlYXJjaCBSZXN1bHQgU2VjdGlvbiAtLT5cbiAgICAgICAgICA8di1hbGVydCBcbiAgICAgICAgICAgIHNsb3Q9XCJuby1yZXN1bHRzXCIgXG4gICAgICAgICAgICA6dmFsdWU9XCJ0cnVlXCIgXG4gICAgICAgICAgICBjb2xvcj1cImJsdWUtZ3JleVwiIFxuICAgICAgICAgICAgaWNvbj1cIndhcm5pbmdcIj5cbiAgICAgICAgICAgIFlvdXIgc2VhcmNoIGZvciBcInt7IHNlYXJjaCB9fVwiIGZvdW5kIG5vIHJlc3VsdHMuXG4gICAgICAgICAgPC92LWFsZXJ0PlxuICAgICAgICA8L3YtZGF0YS10YWJsZT5cbiAgICAgICAgPGNvbmZpcm0gXG4gICAgICAgICAgOmNhbGxiYWNrPVwiY29uZmlybWVkKGRlbGV0ZUNsaWVudClcIiBcbiAgICAgICAgICA6bWVzc2FnZT1cIm1lc3NhZ2VcIlxuICAgICAgICAvPlxuICAgICAgPC92LWNvbnRhaW5lcj5cbiAgICA8L3YtY2FyZD5cblxuICA8L21vZGFsLWxheW91dD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgTW9kYWxMYXlvdXQgZnJvbSBcIkxheW91dHMvTW9kYWxMYXlvdXQudnVlXCI7XG5pbXBvcnQgdmFsaWRhdGlvbkVycm9yIGZyb20gXCJNaXhpbnMvdmFsaWRhdGlvbi1lcnJvclwiO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gXCJ2Zm9ybVwiO1xuaW1wb3J0IHN3YWwgZnJvbSBcInN3ZWV0YWxlcnQyXCI7XG5pbXBvcnQgQ29uZmlybSBmcm9tIFwiQ29tcG9uZW50cy9kc2cvQ29uZmlybS52dWVcIjtcbmltcG9ydCBjb25maXJtYXRpb24gZnJvbSBcIk1peGlucy9jb25maXJtYXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgTW9kYWxMYXlvdXQsXG4gICAgQ29uZmlybVxuICB9LFxuICBtaXhpbnM6IFt2YWxpZGF0aW9uRXJyb3IsY29uZmlybWF0aW9uXSxcbiAgcHJvcHM6IHtcbiAgICBjdXN0b21lcjoge1xuICAgICAgdHlwZTogW051bWJlcixTdHJpbmddLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH0sXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgY29udGVudENsYXNzOiB7IGdyZXk6IHRydWUsIFwibGlnaHRlbi00XCI6IHRydWUsIFwiYWNjZW50LS10ZXh0XCI6IHRydWUgfSxcbiAgICBkaWFsb2c6IGZhbHNlLFxuICAgIC8qIHRhYmxlICovXG4gICAgaGVhZGVyczogW1xuICAgICAgLy8gICB7IHRleHQ6IFwiSURcIiwgdmFsdWU6IFwiaWRcIiwgYWxpZ246IFwibGVmdFwiLCBzb3J0YWJsZTogdHJ1ZSB9LFxuICAgICAgeyB0ZXh0OiBcIkFjdGlvbnNcIiwgdmFsdWU6IFwiYWN0aW9uc1wiLCBhbGlnbjogXCJjZW50ZXJcIiwgc29ydGFibGU6IGZhbHNlIH0sXG4gICAgICB7IHRleHQ6IFwiTmFtZVwiLCB2YWx1ZTogXCJuYW1lXCIsIGFsaWduOiBcImxlZnRcIiwgc29ydGFibGU6IHRydWUgfSxcbiAgICBdLFxuICAgIGl0ZW1zOiBbXSxcbiAgICBzZWxlY3RlZDogW10sXG4gICAgcGFnaW5hdGlvbjoge1xuICAgICAgc29ydEJ5OiBcIm5hbWVcIlxuICAgIH0sXG4gICAgY2xpZW50c0Zvcm06IG5ldyBGb3JtKHt9KSxcbiAgICB0b2dnbGVGb3JtOiBuZXcgRm9ybSh7XG4gICAgICB0b2dnbGU6IGZhbHNlLFxuICAgICAgY2xpZW50X2lkOiBudWxsXG4gICAgfSksXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGRlbGV0ZUNsaWVudEZvcm06IG5ldyBGb3JtKHtcbiAgICAgIGNsaWVudF9pZDogbnVsbFxuICAgIH0pLFxuICAgIGRvbWFpbjogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLFxuICAgIG1lc3NhZ2U6XG4gICAgICBcIldhcm5pbmchIERlbGV0aW5nIFRoaXMgQ2xpZW50IFJlY29yZCBIYXMgU29tZSBSZXBlcmN1c2lvbiBUbyBUaGUgU3l0ZW0sIFNvbWUgRmVhdHVyZXMgVGhhdCBSZWZlcmVuY2UgVG8gVGhpcyBDbGllbnQgUmVjb3JkIFdpbGwgQnJlYWsgaXRzIEZ1bmN0aW9uYWxpdHkgU3VjaCBBcyBEU0csIExvZ2lzdGljcywgSW52b2ljaW5nLiBPbmx5IFByb2NlZWQgSWYgWW91IFRoaW5rIFRoZXJlIFdpbGwgQmUgTm8gU2lkZSBFZmZlY3QgT2YgV2hhdCBZb3UgV2lsbCBCZSBEb2luZyFcIlxuXG4gIH0pLFxuICB3YXRjaDoge1xuICAgIGl0ZW1zOiB7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihuZXdWYWx1ZSkge30sXG4gICAgICBkZWVwOiB0cnVlXG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGxldCBzZWxmID0gdGhpcztcbiAgICBzZWxmLmZldGNoQ2xpZW50cygpO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgcmVkaXJlY3RCYWNrKCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi4kbmV4dFRpY2soKCkgPT4gc2VsZi4kcm91dGVyLnB1c2goeyBuYW1lOiBcInVzZXJzXCIgfSkpO1xuICAgIH0sXG4gICAgZWRpdENsaWVudChjbGllbnQpIHtcbiAgICAgIHZtLiRyb3V0ZXIucHVzaCh7XG4gICAgICAgIG5hbWU6IFwiY3VzdG9tZXItY2xpZW50cy1lZGl0XCIsXG4gICAgICAgIHBhcmFtczogeyBjdXN0b21lcjogdGhpcy5jdXN0b21lciwgY2xpZW50OiBjbGllbnQuaWQgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjcmVhdGVDbGllbnQoKSB7XG4gICAgICB2bS4kcm91dGVyLnB1c2goeyBuYW1lOiBcImN1c3RvbWVyLWNsaWVudHMtY3JlYXRlXCIgfSk7XG4gICAgfSxcbiAgICBhc3luYyBmZXRjaENsaWVudHMoKSB7XG4gICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICBzZWxmLmNsaWVudHNGb3JtLmJ1c3kgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGF4aW9zLnBvc3QoXG4gICAgICAgICAgcm91dGUoXCJhcGkuY2xpZW50LmluZGV4XCIsIHsgY3VzdG9tZXI6IHNlbGYuY3VzdG9tZXIgfSksXG4gICAgICAgICAgc2VsZi5jbGllbnRzRm9ybVxuICAgICAgICApO1xuICAgICAgICBzZWxmLml0ZW1zID0gcGF5bG9hZC5kYXRhLmRhdGE7XG4gICAgICAgIHNlbGYuY2xpZW50c0Zvcm0gPSBuZXcgRm9ybSh7fSk7XG4gICAgICB9IGNhdGNoICh7IGVycm9ycywgbWVzc2FnZSB9KSB7XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICBzZWxmLmNsaWVudHNGb3JtLmVycm9ycy5zZXQoZXJyb3JzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuY2xpZW50c0Zvcm0uYnVzeSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVsZXRlQ2xpZW50KGNsaWVudCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgc2VsZi5kZWxldGVDbGllbnRGb3JtLmNsaWVudF9pZCA9IGNsaWVudC5pZDtcbiAgICAgIGxldCBpbmRleCA9IF8uZmluZEluZGV4KHNlbGYuaXRlbXMsIHsgaWQ6IGNsaWVudC5pZCB9KTtcbiAgICAgIGF4aW9zXG4gICAgICAgIC5wb3N0KHJvdXRlKFwiYXBpLmNsaWVudC5kZWxldGVcIiksIHNlbGYuZGVsZXRlQ2xpZW50Rm9ybSlcbiAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc2VsZi4kZGVsZXRlKHNlbGYuaXRlbXMsIGluZGV4KTtcbiAgICAgICAgICAgIGxldCB0b2dnbGVNb2RhbCA9IHN3YWwubWl4aW4oe1xuICAgICAgICAgICAgICBjb25maXJtQnV0dG9uQ2xhc3M6IFwidi1idG4gYmx1ZS1ncmV5ICBzdWJoZWFkaW5nIHdoaXRlLS10ZXh0XCIsXG4gICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0b2dnbGVNb2RhbCh7XG4gICAgICAgICAgICAgIHRpdGxlOiBcIlN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgaHRtbDogYDxwIGNsYXNzPVwidGl0bGVcIj5DbGllbnQgRGVsZXRlZCE8L3A+YCxcbiAgICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIkJhY2tcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3JzID0+IHtcbiAgICAgICAgICBjb25zdCBkZWxldGVNb2RhbCA9IHN3YWwubWl4aW4oe1xuICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNsYXNzOiBcInYtYnRuIGJsdWUtZ3JleSAgc3ViaGVhZGluZyB3aGl0ZS0tdGV4dFwiLFxuICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVsZXRlTW9kYWwoe1xuICAgICAgICAgICAgdGl0bGU6IFwiT29wcyEgRm9yYmlkZGVuIEFjdGlvbiFcIixcbiAgICAgICAgICAgIGh0bWw6ICc8cCBjbGFzcz1cInRpdGxlXCI+JyArIGVycm9ycy5yZXNwb25zZS5kYXRhLm1lc3NhZ2UgKyBcIjwvcD5cIixcbiAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiQmFja1wiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmNvbXByZXNzLS1pY29uIHtcbiAgbWFyZ2luLWxlZnQ6IC01cHg7XG4gIG1hcmdpbi1yaWdodDogLTVweDtcbn1cbjwvc3R5bGU+XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gcmVzb3VyY2VzL2Fzc2V0cy9qcy9wYWdlcy9DdXN0b21lckNsaWVudHMudnVlIiwiZnVuY3Rpb24gaW5qZWN0U3R5bGUgKHNzckNvbnRleHQpIHtcbiAgcmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP21pbmltaXplIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleD97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNGNjZWZhMDNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9DdXN0b21lckNsaWVudHMudnVlXCIpXG59XG52YXIgbm9ybWFsaXplQ29tcG9uZW50ID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvY29tcG9uZW50LW5vcm1hbGl6ZXJcIilcbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyP3tcXFwiY2FjaGVEaXJlY3RvcnlcXFwiOnRydWUsXFxcInByZXNldHNcXFwiOltbXFxcImVudlxcXCIse1xcXCJtb2R1bGVzXFxcIjpmYWxzZSxcXFwidGFyZ2V0c1xcXCI6e1xcXCJicm93c2Vyc1xcXCI6W1xcXCI+IDIlXFxcIl0sXFxcInVnbGlmeVxcXCI6dHJ1ZX19XSxbXFxcInZ1ZS1hcHBcXFwiXV0sXFxcInBsdWdpbnNcXFwiOltcXFwidHJhbnNmb3JtLW9iamVjdC1yZXN0LXNwcmVhZFxcXCIsW1xcXCJ0cmFuc2Zvcm0tcnVudGltZVxcXCIse1xcXCJwb2x5ZmlsbFxcXCI6ZmFsc2UsXFxcImhlbHBlcnNcXFwiOmZhbHNlfV0sW1xcXCJ0cmFuc2Zvcm0taW1wb3J0c1xcXCIse1xcXCJ2dWV0aWZ5XFxcIjp7XFxcInRyYW5zZm9ybVxcXCI6XFxcInZ1ZXRpZnkvZXM1L2NvbXBvbmVudHMvJHttZW1iZXJ9XFxcIixcXFwicHJldmVudEZ1bGxJbXBvcnRcXFwiOnRydWV9fV1dfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL0N1c3RvbWVyQ2xpZW50cy52dWVcIilcbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfdGVtcGxhdGVfXyA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTRjY2VmYTAzXFxcIixcXFwiaGFzU2NvcGVkXFxcIjp0cnVlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9DdXN0b21lckNsaWVudHMudnVlXCIpXG4vKiB0ZW1wbGF0ZSBmdW5jdGlvbmFsICovXG52YXIgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fID0gZmFsc2Vcbi8qIHN0eWxlcyAqL1xudmFyIF9fdnVlX3N0eWxlc19fID0gaW5qZWN0U3R5bGVcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBcImRhdGEtdi00Y2NlZmEwM1wiXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3RlbXBsYXRlX18sXG4gIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyxcbiAgX192dWVfc3R5bGVzX18sXG4gIF9fdnVlX3Njb3BlSWRfXyxcbiAgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfX1xuKVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudC5leHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvQ3VzdG9tZXJDbGllbnRzLnZ1ZVxuLy8gbW9kdWxlIGlkID0gZDFQdFxuLy8gbW9kdWxlIGNodW5rcyA9IDQwIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3YtYXBwJyx7YXR0cnM6e1wic3RhbmRhbG9uZVwiOlwiXCJ9fSxbX2MoJ3YtY29udGVudCcse3N0YXRpY0NsYXNzOlwid2hpdGVcIn0sW19jKCd2LWNvbnRhaW5lcicse3N0YXRpY0NsYXNzOlwicGEtMCBtYS0wXCIsYXR0cnM6e1widHJhbnNpdGlvblwiOlwic2xpZGUteC10cmFuc2l0aW9uXCIsXCJmbHVpZFwiOlwiXCJ9fSxbX2MoJ3YtY2FyZCcse2F0dHJzOntcImZsYXRcIjp0cnVlfX0sW192bS5fdChcInRvb2xiYXJcIiksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJkZWZhdWx0XCIpXSwyKV0sMSksX3ZtLl92KFwiIFwiKSxfdm0uX3QoXCJmb290ZXJcIildLDIpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxubW9kdWxlLmV4cG9ydHMgPSB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXI/e1wiaWRcIjpcImRhdGEtdi1iODhlYTA2ZVwiLFwiaGFzU2NvcGVkXCI6ZmFsc2UsXCJidWJsZVwiOntcInRyYW5zZm9ybXNcIjp7fX19IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IGRnYklcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9taW5pbWl6ZSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTI0YmYxMGVlXFxcIixcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwiaGFzSW5saW5lQ29uZmlnXFxcIjp0cnVlfSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0NvbmZpcm0udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikoXCI3NWI4MWNmZVwiLCBjb250ZW50LCB0cnVlLCB7fSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlciEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyP21pbmltaXplIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyP3tcInZ1ZVwiOnRydWUsXCJpZFwiOlwiZGF0YS12LTI0YmYxMGVlXCIsXCJzY29wZWRcIjpmYWxzZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlXG4vLyBtb2R1bGUgaWQgPSBmSGhRXG4vLyBtb2R1bGUgY2h1bmtzID0gNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDQwIiwiZXhwb3J0IGRlZmF1bHQge1xuICAvKiB0aGlzIG1peGlucyBpcyByZXNwb25zaWJsZSBmb3IgY29uY2F0aW5hdGluZyBlcnJvciBtZXNzYWdlcyBmcm9tIHZmb3JtIGFuZCB2ZWUtdmFsaWRhdGUgICovXG4gIG1ldGhvZHM6IHtcbiAgICAvKiBlcnJvckJhZyBpcyByZWxhdGFlZCB0byB2ZWVWYWxpZGF0ZSBjb25maWcgbmFtZSovXG4gICAgLyogZm9ybSBpcyByZWxhdGVkIHRvIHZmb3JtICovXG4gICAgZXJyb3JNZXNzYWdlcyhmaWVsZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZXJyb3JzLmNvbGxlY3QoZmllbGQpLmNvbmNhdCh0aGlzLmZvcm0uZXJyb3JzLm9ubHkoZmllbGQpKTtcbiAgICB9LFxuICAgIGhhc0Vycm9ycyhmaWVsZCkge1xuICAgICAgbGV0IGVycm9ycyA9IHRoaXMuZXJyb3JzXG4gICAgICAgIC5jb2xsZWN0KGZpZWxkKVxuICAgICAgICAuY29uY2F0KHRoaXMuZm9ybS5lcnJvcnMub25seShmaWVsZCkpO1xuICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvbWl4aW5zL3ZhbGlkYXRpb24tZXJyb3IuanMiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtMjRiZjEwZWVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9kc2cvQ29uZmlybS52dWVcbi8vIG1vZHVsZSBpZCA9IG1wSEpcbi8vIG1vZHVsZSBjaHVua3MgPSA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgNDAiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/bWluaW1pemUhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi1iODhlYTA2ZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Nb2RhbExheW91dC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKShcIjU3YmY0ZWE4XCIsIGNvbnRlbnQsIHRydWUsIHt9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYjg4ZWEwNmVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IHB3TEtcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSIsImV4cG9ydCBkZWZhdWx0IHtcbiAgbWV0aG9kczoge1xuICAgIGNvbmZpcm1lZChjYikge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcyA9PiB7XG4gICAgICAgIGNiKHBhcmFtcyk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgb3BlbkRpYWxvZyhpdGVtKSB7XG4gICAgICBCdXMuJGVtaXQoXCJvcGVuLWNvbmZpcm1hdGlvblwiLCBpdGVtKTtcbiAgICB9XG4gIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21peGlucy9jb25maXJtYXRpb24uanMiLCI8dGVtcGxhdGU+XG4gIDx2LWRpYWxvZ1xuICAgIHYtbW9kZWw9XCJkaWFsb2dcIlxuICAgIHdpZHRoPVwiNTAwXCJcbiAgPlxuICAgIDx2LWNhcmQ+XG4gICAgICA8di1jYXJkLXRpdGxlXG4gICAgICAgIGNsYXNzPVwiaGVhZGxpbmUgcHJpbWFyeVwiXG4gICAgICAgIGRhcmtcbiAgICAgID5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ3aGl0ZS0tdGV4dFwiPnt7IHRpdGxlIH19PC9zcGFuPlxuICAgICAgPC92LWNhcmQtdGl0bGU+XG5cbiAgICAgIDx2LWNhcmQtdGV4dD5cbiAgICAgICAge3sgbWVzc2FnZSB9fVxuICAgICAgPC92LWNhcmQtdGV4dD5cblxuICAgICAgPHYtZGl2aWRlci8+XG5cbiAgICAgIDx2LWNhcmQtYWN0aW9ucz5cbiAgICAgICAgPHYtYnRuIFxuICAgICAgICAgIGZsYXQgXG4gICAgICAgICAgY29sb3I9XCJzZWNvbmRhcnlcIiBcbiAgICAgICAgICBAY2xpY2s9XCJkaWFsb2cgPSBmYWxzZVwiPlxuICAgICAgICAgIDx2LWljb24gbGVmdD5hcnJvd19sZWZ0PC92LWljb24+XG4gICAgICAgICAgQmFja1xuICAgICAgICA8L3YtYnRuPlxuICAgICAgICA8di1zcGFjZXIvPlxuICAgICAgICA8di1idG5cbiAgICAgICAgICBjb2xvcj1cInByaW1hcnlcIlxuICAgICAgICAgIGZsYXRcbiAgICAgICAgICBAY2xpY2s9XCJjb25maXJtKClcIlxuICAgICAgICA+XG4gICAgICAgICAge3sgYWN0aW9uIH19XG4gICAgICAgIDwvdi1idG4+XG4gICAgICA8L3YtY2FyZC1hY3Rpb25zPlxuICAgIDwvdi1jYXJkPlxuICA8L3YtZGlhbG9nPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcHJvcHM6IHtcbiAgICBjYWxsYmFjazoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgbWVzc2FnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIkRlbGV0aW5nIFRoaXMgRHNnIFJlY29yZCAsIFdpbGwgQWxzbyBEZWxldGUgQWxsIEFzc29jaWF0ZWQgRGF0YSBBdHRhY2ggVG8gSXQgU3VjaCBBcyBJbWFnZXMgYW5kIEl0ZW1zLiBBbHNvIE5vdGUgVGhhdCBTb21lIERhdGEgSW4gVGhlIFN5c3RlbSBUaGF0IEV4aXN0IFdoaWNoIFJlZmVyZW5jZSBUbyBUaGlzIERzZyBSZWNvcmQgV2lsbCBCcmVhayBpdHMgRnVuY3Rpb25hbGl0eSBTdWNoIEFzIEludm9pY2luZy4gT25seSBQcm9jZWVkIElmIFlvdSBUaGluayBUaGVyZSBXaWxsIEJlIE5vIFNpZGUgRWZmZWN0IE9mIFdoYXQgWW91IFdpbGwgQmUgRG9pbmchXCI7XG4gICAgICB9XG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIkFyZSBZb3UgU3VyZSBZb3UgV2FudCBUbyBEZWxldGUgVGhpcz9cIjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFjdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIlllcyAsIEkgVW5kZXJzdGFuZFwiO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBkaWFsb2c6IGZhbHNlLFxuICAgIHBhcmFtczogbnVsbFxuICB9KSxcbiAgbW91bnRlZCgpIHtcbiAgICBCdXMuJG9uKFwib3Blbi1jb25maXJtYXRpb25cIiwgcGFyYW1zID0+IHtcbiAgICAgIHRoaXMuZGlhbG9nID0gdHJ1ZTtcbiAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIH0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VEaWFsb2coKSB7XG4gICAgICB0aGlzLmRpYWxvZyA9IGZhbHNlO1xuICAgIH0sXG4gICAgY29uZmlybSgpIHtcbiAgICAgIGlmICh0aGlzLmNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmFtcyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmRpYWxvZyA9IGZhbHNlO1xuXG4gICAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLnBhcmFtcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kaWFsb2cgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG52YXIgbGlzdFRvU3R5bGVzID0gcmVxdWlyZSgnLi9saXN0VG9TdHlsZXMnKVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFyZW50SWQsIGxpc3QsIF9pc1Byb2R1Y3Rpb24sIF9vcHRpb25zKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICBvcHRpb25zID0gX29wdGlvbnMgfHwge31cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVsnICsgc3NySWRLZXkgKyAnfj1cIicgKyBvYmouaWQgKyAnXCJdJylcblxuICBpZiAoc3R5bGVFbGVtZW50KSB7XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYW5kIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAgICAgIC8vIHNpbXBseSBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYnV0IGluIGRldiBtb2RlLlxuICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIENocm9tZSBjYW4ndCBoYW5kbGUgc291cmNlIG1hcCBpbiBzZXJ2ZXItcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlIHRhZ3MgLSBzb3VyY2UgbWFwcyBpbiA8c3R5bGU+IG9ubHkgd29ya3MgaWYgdGhlIHN0eWxlIHRhZyBpc1xuICAgICAgLy8gY3JlYXRlZCBhbmQgaW5zZXJ0ZWQgZHluYW1pY2FsbHkuIFNvIHdlIHJlbW92ZSB0aGUgc2VydmVyIHJlbmRlcmVkXG4gICAgICAvLyBzdHlsZXMgYW5kIGluamVjdCBuZXcgb25lcy5cbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBpZiAoaXNPbGRJRSkge1xuICAgIC8vIHVzZSBzaW5nbGV0b24gbW9kZSBmb3IgSUU5LlxuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrXG4gICAgc3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKVxuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpXG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG11bHRpLXN0eWxlLXRhZyBtb2RlIGluIGFsbCBvdGhlciBjYXNlc1xuICAgIHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpXG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudClcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9iailcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuICAgICAgICAgIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG4gICAgICAgICAgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpXG4gICAgfVxuICB9XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJylcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzXG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2Rlc1xuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlRWxlbWVudCwgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzXG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcFxuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpXG4gIH1cbiAgaWYgKG9wdGlvbnMuc3NySWQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKHNzcklkS2V5LCBvYmouaWQpXG4gIH1cblxuICBpZiAoc291cmNlTWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2phdmFzY3JpcHQtZGVidWdnaW5nXG4gICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgc291cmNlTWFwLnNvdXJjZXNbMF0gKyAnICovJ1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgJyAqLydcbiAgfVxuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZClcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1xuLy8gbW9kdWxlIGlkID0gcmpqMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMgMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAgNjEiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jb21wcmVzcy0taWNvbltkYXRhLXYtNGNjZWZhMDNde21hcmdpbi1sZWZ0Oi01cHg7bWFyZ2luLXJpZ2h0Oi01cHh9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj9taW5pbWl6ZSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi00Y2NlZmEwM1wiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3BhZ2VzL0N1c3RvbWVyQ2xpZW50cy52dWVcbi8vIG1vZHVsZSBpZCA9IHJ6ZHhcbi8vIG1vZHVsZSBjaHVua3MgPSA0MCIsIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gdFRWa1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDYgNyA4IDkgMTAgMTEgMTIgMTMgMTQgMTUgMTYgMTcgMTggMTkgMjAgMjEgMjIgMjMgMjQgMjUgMjYgMjcgMjggMjkgMzAgMzEgMzIgMzMgMzQgMzUgMzYgMzcgMzggMzkgNDAgNDEgNDIgNDMgNDQgNDUgNDYgNDcgNDggNDkgNTAgNTEgNTIgNTMgNTQgNTUgNTYgNTcgNTggNTkgNjAgNjEiLCJmdW5jdGlvbiBpbmplY3RTdHlsZSAoc3NyQ29udGV4dCkge1xuICByZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/bWluaW1pemUhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0yNGJmMTBlZVxcXCIsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcImhhc0lubGluZUNvbmZpZ1xcXCI6dHJ1ZX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9Db25maXJtLnZ1ZVwiKVxufVxudmFyIG5vcm1hbGl6ZUNvbXBvbmVudCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyXCIpXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV0sW1xcXCJ2dWUtYXBwXFxcIl1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dLFtcXFwidHJhbnNmb3JtLWltcG9ydHNcXFwiLHtcXFwidnVldGlmeVxcXCI6e1xcXCJ0cmFuc2Zvcm1cXFwiOlxcXCJ2dWV0aWZ5L2VzNS9jb21wb25lbnRzLyR7bWVtYmVyfVxcXCIsXFxcInByZXZlbnRGdWxsSW1wb3J0XFxcIjp0cnVlfX1dXX0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9Db25maXJtLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMjRiZjEwZWVcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9Db25maXJtLnZ1ZVwiKVxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IGluamVjdFN0eWxlXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvZHNnL0NvbmZpcm0udnVlXG4vLyBtb2R1bGUgaWQgPSB1emwxXG4vLyBtb2R1bGUgY2h1bmtzID0gNSA2IDcgOCA5IDEwIDExIDEyIDEzIDE0IDE1IDQwIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudi1tZXNzYWdlc19fbWVzc2FnZXtjb2xvcjojZTU3MzczfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/bWluaW1pemUhLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXI/e1widnVlXCI6dHJ1ZSxcImlkXCI6XCJkYXRhLXYtYjg4ZWEwNmVcIixcInNjb3BlZFwiOmZhbHNlLFwiaGFzSW5saW5lQ29uZmlnXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3Jlc291cmNlcy9hc3NldHMvanMvbGF5b3V0cy9Nb2RhbExheW91dC52dWVcbi8vIG1vZHVsZSBpZCA9IHpyN0hcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAxOCAxOSAyMCAyMSAyMiAyMyAzOCAzOSA0MCA0MSA0MiA0MyA0NCA0NSA0NiA0NyA0OCA0OSA1MCA1MSA1MiA1MyA1NCA1NSA1NiA1NyA1OCA1OSA2MCA2MSJdLCJzb3VyY2VSb290IjoiIn0=